<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0'>
<channel>
<generator>
clj-rss
</generator>
<link>
https://news.ycombinator.com
</link>
<title>
myread
</title>
<description>
myread
</description>
<item>
<link>
item?id=7100394
</link>
<description>

</description>
<title>
50 comments
</title>
</item>
<item>
<author>
Walter Bright
</author>
<link>
http://www.drdobbs.com/architecture-and-design/so-you-want-to-write-your-own-language/240165488
</link>
<description>
&lt;div&gt;&lt;article&gt;
	&lt;p&gt;My career has been all about designing programming languages and writing compilers for them. This has been a great joy and source of satisfaction to me, and perhaps I can offer some observations about what you're in for if you decide to design and implement a professional programming language. This is actually a book-length topic, so I'll just hit on a few highlights here and avoid topics well covered elsewhere.&lt;/p&gt;
&lt;h3&gt;Work&lt;/h3&gt;
&lt;p&gt;First off, you're in for a lot of work&amp;#x2026;years of work&amp;#x2026;most of which will be wandering in the desert. The odds of success are heavily stacked against you. If you are not strongly self-motivated to do this, it isn't going to happen. If you need validation and encouragement from others, it isn't going to happen.&lt;/p&gt;
&lt;p&gt;Fortunately, embarking on such a project is not major dollar investment; it won't break you if you fail. Even if you do fail, depending on how far the project got, it can look pretty good on your r&amp;#xE9;sum&amp;#xE9; and be good for your career.&lt;/p&gt;
&lt;h3&gt;Design&lt;/h3&gt;
&lt;p&gt;One thing abundantly clear is that syntax matters. It matters an awful lot. It's like the styling on a car &amp;#x97; if the styling is not appealing, it simply doesn't matter how hot the performance is. The syntax needs to be something your target audience will like.&lt;/p&gt;
&lt;p&gt;Trying to go with something they've not seen before will make language adoption a much tougher sell.&lt;/p&gt;
&lt;p&gt;I like to go with a mix of familiar syntax and aesthetic beauty. It's got to look good on the screen. After all, you're going to spend plenty of time looking at it. If it looks awkward, clumsy, or ugly, it will  taint the language.&lt;/p&gt;
&lt;p&gt;There are a few things I (perhaps surprisingly) suggest should not be considerations. These are false gods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Minimizing keystrokes. Maybe this mattered when programmers used paper tape, and it matters for small languages like bash or awk. For larger applications, much more programming time is spent reading than writing, so reducing keystrokes shouldn't be a goal in itself. Of course, I'm not suggesting that large amounts of boilerplate is a good idea.&lt;/li&gt;
&lt;li&gt;Easy parsing. It isn't hard to write parsers with arbitrary lookahead. The looks of the language shouldn't be compromised to save a few lines of code in the parser. Remember, you'll spend a lot of time staring at the code. That comes first. As mentioned below, it still should be a context-free grammar.&lt;/li&gt;
&lt;li&gt;Minimizing the number of keywords. This metric is just silly, but I see it cropping up repeatedly. There are a million words in the English language, I don't think there is any looming shortage. Just use your good judgment.&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;Things that are true gods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Context-free grammars. What this really means is the code should be parsable without having to look things up in a symbol table. C++ is famously not a context-free grammar. A context-free grammar, besides making things a lot simpler, means that IDEs can do syntax highlighting without integrating most of a compiler front end. As a result, third-party tools become much more likely to exist.&lt;/li&gt;
&lt;li&gt;Redundancy. Yes, the grammar should be redundant. You've all heard people say that statement terminating &lt;code&gt;;&lt;/code&gt; are not necessary because the compiler can figure it out. That's true &amp;#x97; but such non-redundancy makes for incomprehensible error messages. Consider a syntax with no redundancy: Any random sequence of characters would then be a valid program. No error messages are even possible. A good syntax needs redundancy in order to diagnose errors and give good error messages.&lt;/li&gt;
&lt;li&gt;Tried and true. Absent a very strong reason, it's best to stick with tried and true grammatical forms for familiar constructs. It really cuts the learning curve for the language and will increase adoption rates. Think of how people will hate the language if it swaps the operator precedence of &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;. Save the divergence for features not generally seen before, which also signals the user that this is new.&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;As always, these principles should not be taken as dicta. Use good judgment. Any language design principle blindly followed leads to disaster. The principles are rarely orthogonal and frequently conflict. It's a lot like designing a house &amp;#x97; making the master closet bigger means the master bedroom gets smaller. It's all about finding the right balance.&lt;/p&gt;
&lt;p&gt;Getting past the syntax, the meat of the language will be the semantic processing, which is where meaning is assigned to the syntactical constructs. This is where you'll be spending the vast bulk of design and implementation. It's much like the organs in your body &amp;#x97; they are  unseen and we don't think about them unless they are going wrong. There won't be a lot of glory in the semantic work, but in it will be the whole point of the language.&lt;/p&gt;
&lt;p&gt;Once through the semantic phase, the compiler does optimizations and then code generation  &amp;#x97; collectively called the &quot;back end.&quot; These two passes are very challenging and complicated. Personally, I love working with this stuff, and grumble that I've got to spend time on other issues. But unless you really like it, and it takes a fairly unhinged programmer to delight in the arcana of such things, I recommend taking the common sense approach and using an existing back end, such as the JVM, CLR, gcc, or LLVM. (Of course, I can always set you up with the glorious Digital Mars back end!)&lt;/p&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;
&lt;p&gt;How best to implement it? I hope I can at least set you off in the right direction. The first tool that beginning compiler writers often reach for is regex. Regex is just the wrong tool for lexing and parsing. Rob Pike &lt;a href=&quot;http://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html&quot;&gt;explains why&lt;/a&gt; reasonably well. I'll close that with the famous quote from Jamie Zawinski:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&quot;Some people, when confronted with a problem, think 'I know, I'll use regular expressions.' Now they have two problems.&quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Somewhat more controversial, I wouldn't bother wasting time with lexer or parser generators and other so-called &quot;compiler compilers.&quot; They're a waste of time. Writing a lexer and parser is a tiny percentage of the job of writing a compiler. Using a generator will take up about as much time as writing one by hand, and it will marry you to the generator (which matters when porting the compiler to a new platform). And generators also have the unfortunate reputation of emitting lousy error messages.&lt;/p&gt;
&lt;/article&gt;
&lt;/div&gt;
</description>
<title>
So, You Want To Write Your Own Language? (Dr. Dobbs article by Walter Bright)
</title>
</item>
<item>
<author>
Marco Arment
</author>
<link>
http://www.marco.org/2014/01/22/sunrise-asks-for-apple-id-password
</link>
<description>
&lt;div&gt;&lt;section id=&quot;posts&quot;&gt;

            


                                                &lt;article&gt;
                        
                    
                        &lt;p&gt;Apple&amp;#x2019;s currently featuring the &lt;a href=&quot;http://www.sunrise.am&quot;&gt;Sunrise&lt;/a&gt; app in the App Store.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.marco.org/media/2014/01/sunrise-feature.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;Upon first launch, Sunrise invites you to create an account, then asks you to add a calendar. The first option, &amp;#x201C;iCloud Calendar&amp;#x201D;, brings you to a screen where the Sunrise app itself, in its native interface and code, solicits your Apple ID (iCloud) email address and password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.marco.org/media/2014/01/sunrise.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;This is apparently OK.&lt;/p&gt;

&lt;p&gt;I first saw &lt;a href=&quot;https://alpha.app.net/mrgan/post/19586859&quot;&gt;Neven Mrgan point this out&lt;/a&gt; (good replies there), with some additional commentary from &lt;a href=&quot;http://mjtsai.com/blog/2014/01/21/calendar-app-asks-for-apple-id-and-password/&quot;&gt;Michael Tsai&lt;/a&gt;. I couldn&amp;#x2019;t believe it, so I downloaded the app myself and took these screenshots.&lt;/p&gt;

&lt;p&gt;Sunrise claims that they&amp;#x2019;re not storing the credentials and are instead just getting a login token of some sort from iCloud. (It&amp;#x2019;s unclear whether they&amp;#x2019;re transmitting your email and password to their servers and getting the login token from there, or doing the exchange from the device.) But that doesn&amp;#x2019;t matter at all.&lt;/p&gt;

&lt;p&gt;No app or website should ever be asking for a high-security username and password directly, especially given &lt;a href=&quot;http://www.wired.com/gadgetlab/2012/08/apple-amazon-mat-honan-hacking/all/&quot;&gt;how much&lt;/a&gt; is tied to your Apple ID. What year is this?&lt;/p&gt;

&lt;p&gt;It&amp;#x2019;s downright dangerous that Apple not only let this through app review, but is &lt;em&gt;promoting&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;To my surprise, there&amp;#x2019;s &lt;a href=&quot;https://developer.apple.com/appstore/resources/approval/guidelines.html&quot;&gt;no rule against doing this&lt;/a&gt;. That needs to change &lt;em&gt;immediately&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(&lt;a href=&quot;http://www.marco.org/2014/01/22/sunrise-response&quot;&gt;Update here with a Sunrise response, sort of&lt;/a&gt;.)&lt;/strong&gt;&lt;/p&gt;
                    &lt;/article&gt;
                    
                                        
			            
            &lt;footer&gt;
                &lt;p&gt;
                    Follow Marco.org posts: &lt;a href=&quot;http://www.marco.org/rss&quot;&gt;RSS feed&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/marco_org&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://alpha.app.net/marco_org&quot; rel=&quot;me&quot;&gt;App.net&lt;/a&gt;,
                    or the &lt;a href=&quot;http://www.marco.org/rss2&quot;&gt;alternate RSS feed&lt;/a&gt; in which link posts always point here first instead of their targets.
                    &lt;br&gt;
                    Follow Marco, the person: &lt;a href=&quot;https://twitter.com/marcoarment&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://alpha.app.net/marco&quot; rel=&quot;me&quot;&gt;App.net&lt;/a&gt;.
                &lt;/p&gt;
                &lt;p&gt;
                    &amp;#xA9;&amp;#xA0;2006&amp;#x2013;2014 Marco Arment.
                &lt;/p&gt;
            &lt;/footer&gt;

            
        &lt;/section&gt;



    &lt;/div&gt;
</description>
<title>
Apparently It’s OK For iOS Apps To Ask For Your Apple ID And Password
</title>
</item>
<item>
<link>
http://www.nationofchange.org/utah-ending-homelessness-giving-people-homes-1390056183
</link>
<description>
&lt;div&gt;&lt;div id=&quot;bodycount&quot;&gt;
	  
	  
	  
	  
	  
&lt;div&gt; &lt;div class=&quot;toolbox&quot;&gt;


     
     
    
     
     
     &lt;p class=&quot;tool_item&quot;&gt;Resize Text &lt;span class=&quot;increaseFont&quot;&gt;+&lt;/span&gt; | &lt;span class=&quot;decreaseFont&quot;&gt;-&lt;/span&gt; | &lt;span class=&quot;resetFont&quot;&gt;R&lt;/span&gt;&lt;/p&gt;
     
     
     
     
     
     
     
     
      

      &lt;/div&gt; &lt;/div&gt;

	  
	  
	  
	  &lt;p&gt;Earlier this month, Hawaii State representative Tom Bower (D) began walking the streets of his Waikiki district with a sledgehammer, and&amp;#xA0;&lt;a href=&quot;http://www.huffingtonpost.com/2013/11/18/tom-brower-hawaii_n_4299256.html&quot;&gt;smashing shopping carts used by homeless people&lt;/a&gt;. &amp;#x201C;Disgusted&amp;#x201D; by the city&amp;#x2019;s chronic homelessness problem, Bower decided to take matters into his own hands&amp;#xA0;&amp;#x2014; literally. He also took to rousing homeless people if he saw them sleeping at bus stops during the day.&lt;/p&gt;&lt;p&gt;Bower&amp;#x2019;s tactics were over the top, and so unpopular that he quickly&amp;#xA0;&lt;a href=&quot;http://www.huffingtonpost.com/2013/11/20/tom-brower-sledgehammer_n_4306368.html&quot;&gt;declared &amp;#x201C;Mission accomplished,&amp;#x201D; and retired his sledgehammer&lt;/a&gt;. But Bower&amp;#x2019;s frustration with his city&amp;#x2019;s homelessness problem is just an extreme example of the frustration that has led cities to pass measures that effective deal with the homeless by criminalizing homelessness.&lt;/p&gt;&lt;div&gt;&lt;p&gt;  &lt;label for=&quot;email&quot;&gt;Want more? Enter your email for weekly updates:&lt;/label&gt;&lt;br&gt;     &amp;#xA0;&lt;/p&gt;&lt;/div&gt;

&lt;br&gt;
&lt;ul&gt;&lt;li&gt;City council members in&amp;#xA0;&lt;a href=&quot;http://www.huffingtonpost.com/2013/08/22/columbia-south-carolina-criminalizes-homelessness_n_3795397.html&quot;&gt;Columbia, South Carolina&lt;/a&gt;, concerned that the city was becoming a &amp;#x201C;magnet for homeless people,&amp;#x201D; passed an ordinance giving the homeless the option to either relocate or get arrested. The council later rescinded the ordinance, after backlash from police officers, city workers, and advocates.&lt;/li&gt;&lt;li&gt;Last year,&amp;#xA0;&lt;a href=&quot;http://www.huffingtonpost.com/2013/07/25/tampa-bay-criminalizes-homelessness_n_3652701.html&quot;&gt;Tampa, Florida&lt;/a&gt;&amp;#xA0;&amp;#x2014; which had the most homeless people for a mid-sized city &amp;#x2014; passed an &amp;#xA0;ordinance allowing police officers to arrest anyone they saw sleeping in public, or &amp;#x201C;storing personal property in public.&amp;#x201D;&amp;#xA0;&lt;a href=&quot;http://www.tampabay.com/news/localgovernment/tampa-city-council-to-consider-new-ordinances-restricting-panhandling/2132006&quot;&gt;The city followed up with a ban on panhandling downtown&lt;/a&gt;, and other locations around the city.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.huffingtonpost.com/2012/07/10/philadelphia-homeless-feeding-ban_n_1663058.html&quot;&gt;Philadelphia&lt;/a&gt;&amp;#xA0;took a somewhat different approach, with a law banning&amp;#xA0;the feeding of homeless people on city parkland. Religious groups objected to the ban, and announced that they would not obey it.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.npr.org/2013/09/05/218891324/more-cities-sweeping-homeless-into-less-prominent-areas&quot;&gt;Raleigh, North Carolina&lt;/a&gt;&amp;#xA0;took the step of asking religious groups to stop their longstanding practice of feeding the homeless in a downtown park on weekends. Religious leaders announced that they would risk arrest rather than stop.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This trend makes Utah&amp;#x2019;s accomplishment even more noteworthy. In eight years, Utah has quietly reduced homelessness by 78 percent, and is on track to end homelessness by 2015.&lt;/p&gt;&lt;p&gt;How did Utah accomplish this? Simple.&amp;#xA0;&lt;a href=&quot;http://www.nationswell.com/one-state-track-become-first-end-homelessness-2015/&quot;&gt;Utah solved homelessness by giving people homes&lt;/a&gt;. In 2005, Utah figured out that the annual cost of E.R. visits and jail stays for homeless people was about $16,670 per person, compared to $11,000 to provide each homeless person with an apartment and a social worker. So, the state began giving away apartments, with no strings attached. Each participant in Utah&amp;#x2019;s Housing First program also gets a caseworker to help them become self-sufficient, but they keep the apartment even if they fail. The program has been so successful that other states are hoping to achieve similar results with programs modeled on Utah&amp;#x2019;s.&lt;/p&gt;&lt;p&gt;It sounds like Utah borrowed a page from&amp;#xA0;&lt;a href=&quot;http://nationalhomeless.org/publications/crimreport/CrimzReport_2009.pdf&quot;&gt;&lt;span&gt;Homes Not Handcuffs&lt;/span&gt;&lt;/a&gt;, the 2009 report by The National Law Center on Homelessness &amp;amp; Poverty and The National Coalition for the Homeless. Using a 2004 survey and anecdotal evidence from activists, the report concluded that permanent housing for the homeless is cheaper than criminalization. Housing is not only more human, it&amp;#x2019;s economical.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.slate.com/blogs/weigel/2013/12/20/republican_state_gives_free_houses_to_moochers_cuts_homelessness_by_74_percent.html&quot;&gt;This happened in a Republican state&lt;/a&gt;! Republicans in Congress would probably have required the homeless to take a drug test before getting an apartment, denied apartments to homeless people with criminal records, and evicted those who failed to become self-sufficient after five years or so. But Utah&amp;#x2019;s results show that even conservative states can solve problems like homelessness with decidedly progressive solutions.&lt;/p&gt;      
      
      
      
             
      
      
      
      
      &lt;/div&gt;
      
      &lt;/div&gt;
</description>
<title>
Utah is Ending Homelessness by Giving People Homes
</title>
</item>
<item>
<author>
RJ Nowling
</author>
<link>
http://discretestates.blogspot.com/2014/01/response-to-math-is-not-necessary-for.html
</link>
<description>
&lt;div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-8006763369905331017&quot;&gt;
Ross Hunter recently wrote a &lt;a href=&quot;http://www.mutuallyhuman.com/blog/2014/01/14/math-is-not-necessary-for-software-development/&quot;&gt;blog entry&lt;/a&gt; on Mutually Human arguing that math is not necessary for being a good software developer. &amp;#xA0;I agree with his thesis -- math isn't necessary. &amp;#xA0;However, Ross shouldn't then jump to the conclusion that math isn't useful for software development. Math may not be necessary but it can certainly be useful.&lt;br&gt;
&lt;br&gt;
I'll start by addressing relevant points in his argument and try to clear up perceived misconceptions.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;&lt;u&gt;First Argument:&lt;/u&gt;&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;The skills that make a good mathematician are not the same as the skills that make for a good software developer.&lt;/li&gt;
&lt;li&gt;Math is the process of breaking down complex problems into simpler problems, recognizing patterns, and applying known formulae.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Math is often taught in a way where students learn how to solve problems by identifying patterns. &amp;#xA0;Once the student identifies the pattern, they can solve the problem using the approach they memorized. &amp;#xA0;It's unfortunate that math is taught this way because people like Ross come away with a very incomplete and distorted picture of math. &amp;#xA0;I would call this &quot;computation&quot; rather than math.&lt;/p&gt;

&lt;p&gt;
The reason we have &quot;known formulae&quot; is precisely because of the practice of actual mathematics. In my mind, mathematics is the process of analyzing a formal system with logic. A mathematician starts by defining the basis of a formal system by specifying an initial set of rules by way of axioms, or statements which are held to be true without proof. &amp;#xA0;Next, the mathematician recursively applies logic to determine what the implications of the axioms are and if any additional rules can be then be defined. &amp;#xA0;As more and more rules are proven, the system becomes more powerful. &amp;#xA0;&lt;/p&gt;

&lt;p&gt;
Often times, mathematicians will be looking to see if a specific rule can be implied from the initial set of axioms. &amp;#xA0;If they find that this is not the case, the mathematicians may apply creative thinking to look for more specific cases where the rule does hold true or may change the axioms. &amp;#xA0;A good example is the complex number system. &amp;#xA0;When faced with the square roots of negative values, mathematicians had to define a new mathematical object (the imaginary number) to be able to reason about such results. This process can actually be quite creative.&lt;/p&gt;

&lt;p&gt;
Speaking from personal experience and comments made by others, a good math education can be a significant advantage. &amp;#xA0;Reasoning through complex arguments and formal systems has made me much more detail oriented than I was before. &amp;#xA0;Math has improved my problem solving skills. &amp;#xA0;It's also enabled me to reason formally about software, which can be very important when developing distributed systems, for example.&lt;/p&gt;

&lt;p&gt;
It's unfortunate that the way math is often taught fails our students. &amp;#xA0;Students are often taught the results found over thousands of years, but not the methodology for discovering the results. &amp;#xA0;Classes like algebra, calculus, and introductory statistics are examples which focus on results rather than methodology. Unfortunately, these are also the most popular math classes since they are required in most high schools and college science majors!&lt;/p&gt;

&lt;p&gt;
Ross points out that he loved his discrete math class. &amp;#xA0;Discrete math, along with others such as geometry, graph theory, and combinatorics, are much better courses for teaching students the methods rather than results. &amp;#xA0;All of the subject material can be derived from a few simple definitions and axioms, giving students the opportunity to learn the mathematical process. &amp;#xA0;Imagine the benefit for students if they were taught Real Analysis or Modern Algebra instead of calculus? &amp;#xA0;As Ross rightly argues, in many cases, a solid foundation in logical thinking can more broadly applicable than calculus.&lt;/p&gt;
&lt;p&gt;
&lt;br&gt;
(I would also like to correct Ross's description of discrete math. &amp;#xA0;Ross implies that discrete math only consists of logic and boolean algebra. &amp;#xA0;This is, of course, wrong -- discrete math covers a range of topics such as set theory, combinatorics, and graph theory as well.)&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;&lt;u&gt;Second Argument:&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Math, there is only one right answer, but in software development, there is rarely a singular right answer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Ross assumes that if a student is trained in mathematics, they will not be able to deal with grey situations. &amp;#xA0;Maybe Ross assumes that people are only studying math? &amp;#xA0;Or maybe he assumes that people are not capable of learning new ways of thinking or analyzing situations critically? Either way, this argument doesn't hold water.&lt;/p&gt;

&lt;p&gt;
Like any skill or way of thinking we have developed, learning where and when to apply it is an important part of gaining experience. &amp;#xA0;Ideally, a student would also be exposed to the humanities or cutting edge problems in the sciences where there are not clear answers. (Science education faces a similar problem -- a focus on results, not methods.) &amp;#xA0;Even if the student only studies math, it would be safe to assume that people can learn and adapt as they gain experience. &amp;#xA0;That is fundamentally part of being human.&lt;/p&gt;

&lt;p&gt;
There are also cases where math rarely involves a single correct answer. &amp;#xA0;A mathematician may have multiple ways of defining the initial axioms, each with their own trade offs. &amp;#xA0;For example, there are variations on Euclidean geometry that change the initial axioms and end up with very different properties.&lt;/p&gt;

&lt;br&gt;
&lt;b&gt;&lt;u&gt;Math IS Useful:&lt;/u&gt;&lt;/b&gt;&lt;br&gt;
Although math education is not necessary for software development, it is useful. &amp;#xA0;I've already described how math teaches good problem solving skills and critical thinking. &amp;#xA0;With the shift towards &quot;internet scale&quot; systems and big data, math is even more important than before.&lt;br&gt;
&lt;br&gt;
Consider the case of evaluating and tuning a complex software system to squeeze out every last bit of performance. &amp;#xA0;A well-controlled experiment and appropriate use of statistics is necessary to accurately access the response of the system under various conditions. &amp;#xA0;A software developer doesn't want to waste time performance tuning the areas of the system contributing least to the run-time -- they want to know what's eating up all the time so they can use their time efficiently.&lt;br&gt;
&lt;br&gt;
A better example would be the rise of machine learning and data mining. &amp;#xA0;Users leak data left and right, which is collected by nearly every internet company. &amp;#xA0;The data is then processed to predict what the user might like to target ads or improve the user experience. &amp;#xA0;Machine learning is also used in the banking apps on our cell phones to read hand-written checks. &amp;#xA0;The popularity of machine learning is exploding as more and more uses are found. &amp;#xA0;I predict that many software developers will need to be proficient in machine learning techniques in the future. &amp;#xA0;Since machine learning is based on math and statistics, there may be a time when most software developers will need to know some linear algebra, statistics, and calculus.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;&lt;u&gt;All Knowledge is Useful:&lt;/u&gt;&lt;/b&gt;&lt;br&gt;
Every subject offers an opportunity to apply our skills in a new way and train our brains to be even better. &amp;#xA0;One of the benefits of a liberal arts education is that students are expected to take a number of courses outside their major. &amp;#xA0;A programmer who decides to study math, literature, history, or art may find that they have developed a number of skills and tools that traditional Computer Scientists lack.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;&lt;u&gt;So is Experience:&lt;/u&gt;&lt;/b&gt;&lt;br&gt;
Experience is a great teacher, especially in software development. &amp;#xA0;Spending hours debugging code is a great way to learn how a project works and to remember what caused the bug in the first case. &amp;#xA0;The next time you see a similar bug, you won't have to spend nearly as much time hunting its source down.&lt;br&gt;
&lt;br&gt;
Experience also offers the benefit of knowing what works best in practice. &amp;#xA0;Ross points out that sometimes clever people will write code that is TOO clever. &amp;#xA0;They have sacrificed readability and effort for laziness or intellectual satisfaction. &amp;#xA0;This is not a problem of mathematicians, though. &amp;#xA0;This is a problem that comes from a lack of experience.&lt;br&gt;
&lt;br&gt;
In the end, I agree that math is not necessary for software development&amp;#xA0;(yet)&amp;#xA0;. &amp;#xA0;I also think that we could and should change the required math courses for computer science majors to reflect courses that will focus on logic and reasoning. &amp;#xA0;But, we shouldn't be attacking math or implying that it has no value. &amp;#xA0;For some of us, math education has been a valuable part of our training.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;

&lt;/div&gt;

&lt;/div&gt;
</description>
<title>
Response to &quot;Math is Not Necessary for Software Development&quot;
</title>
</item>
</channel>
</rss>
