<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0'>
<channel>
<generator>
clj-rss
</generator>
<link>
https://news.ycombinator.com
</link>
<title>
myread
</title>
<description>
myread
</description>
<item>
<link>
http://blog.mikiobraun.de/2014/01/apache-spark.html
</link>
<description>
&lt;div&gt;&lt;div id=&quot;content&quot;&gt;
      &lt;p&gt;&lt;em&gt;Friday, January 17, 2014&lt;/em&gt;&lt;/p&gt;
      
      


      &lt;h2&gt;&lt;/h2&gt;


      

      &lt;p&gt;&lt;a href=&quot;http://spark.incubator.apache.org/&quot;&gt;Apache Spark&lt;/a&gt; is generating quite some buzz right now. &lt;a href=&quot;http://databricks.com/&quot;&gt;Databricks&lt;/a&gt;, the company founded to support Spark &lt;a href=&quot;http://gigaom.com/2013/09/25/databricks-raises-14m-from-andreessen-horowitz-wants-to-take-on-mapreduce-with-spark/&quot;&gt;raised $14M from Andreessen Horowitz&lt;/a&gt;, &lt;a href=&quot;http://blog.cloudera.com/blog/2013/11/putting-spark-to-use-fast-in-memory-computing-for-your-big-data-applications/&quot;&gt;Cloudera&lt;/a&gt; has decided to fully support Spark, and others chime in that it&amp;#x2019;s the next &lt;a href=&quot;http://gigaom.com/2013/10/28/spark-is-a-really-big-deal-for-big-data-and-cloudera-gets-it/&quot;&gt;big&lt;/a&gt; &lt;a href=&quot;http://strata.oreilly.com/2013/02/the-future-of-big-data-with-bdas-the-berkeley-data-analytics-stack.html&quot;&gt;thing&lt;/a&gt;. So I thought it&amp;#x2019;s high time I took a look to get an understanding what the whole buzz is around.&lt;/p&gt;

&lt;p&gt;I played around with the Scala API (Spark is written in Scala), and to be honest, at first I was pretty underwhelmed, because Spark looked, well, so small. The basic abstraction are Resilient Distributed Datasets (RDDs), basically distributed immutable collections, which can be defined based on local files or files stored in on Hadoop via HDFS, and which provide the usual Scala-style collection operations like map, foreach and so on.&lt;/p&gt;

&lt;p&gt;My first reaction was &amp;#x201C;wait, is this basically distributed collections?&amp;#x201D; Hadoop in comparison seemed to be so much more, a distributed filesystem, obviously map reduce, with support for all kinds of data formats, data sources, unit testing, clustering variants, and so on and so on.&lt;/p&gt;

&lt;p&gt;Others quickly pointed out that there&amp;#x2019;s more to it, in fact, Spark also provides more complex operations like joins, group-by, or reduce-by operations so that you can model quite complex data flows (without iterations, though).&lt;/p&gt;

&lt;p&gt;Over time it dawned on me that the perceived simplicity of Spark actually said a lot more about the Java API of Hadoop than Spark. Even simple examples in Hadoop usually come with a lot of boilerplate code. But conceptually speaking, Hadoop is quite simple as it only provides two basic operations, a parallel map, and a reduce operation. If expressed in the same way on something resembling distributed collections, one would in fact have an even smaller interface (some projects like &lt;a href=&quot;https://github.com/twitter/scalding&quot;&gt;Scalding&lt;/a&gt; actually build such things and the code looks pretty similar to that of Spark).&lt;/p&gt;

&lt;p&gt;So after convincing me that Spark actually provides a non-trivial set of operations (really hard to tell just from the ubiqitous word count example), I digged deeper and read this &lt;a href=&quot;http://www.cs.berkeley.edu/~matei/papers/2012/nsdi_spark.pdf&quot;&gt;paper&lt;/a&gt; which describes the general architecture. RDDs are the basic building block of Spark and are actually really something like distributed immutable collections. These define operations like map or foreach which are easily parallelized, but also join operations which take two RDDs and collects entries based on a common key, as well as reduce-by operations which aggregates entries using a user specified function based on a given key. In the word count example, you&amp;#x2019;d map a text to all the words with a count of one, and then reduce them by key using the word and summing up the counts to get the word counts. RDDs can be read from disk but are then held in memory for improved speed where they can also be cached so you don&amp;#x2019;t have to reread them every time. That alone adds a lot of speed compared to Hadoop which is mostly disk based.&lt;/p&gt;

&lt;p&gt;Now what&amp;#x2019;s interesting is Spark&amp;#x2019;s approach to fault tolerance. Instead of persisting or checkpointing intermediate results, Spark remembers the sequence of operations which led to a certain data set. So when a node fails, Spark reconstructs the data set based on the stored information. They argue that this is actually not that bad because the other nodes will help in the reconstruction.&lt;/p&gt;

&lt;p&gt;So in essence, compared to bare Hadoop, Spark has a smaller interface (which might still become similarly bloated in the future), but there are many projects on top of Hadoop (like Twitter&amp;#x2019;s &lt;a href=&quot;https://github.com/twitter/scalding&quot;&gt;Scalding&lt;/a&gt;, for example), which achieve a similar level of expressiveness. The other main difference is that Spark is in-memory by default, which naturally leads to a large improvement in performance, and even allows to run iterative algorithms. Spark has no built- in support for iterations, though, it&amp;#x2019;s just that they claim it&amp;#x2019;s so fast that you can run iterations if you want to.&lt;/p&gt;

&lt;h2 id=&quot;spark_streaming__return_of_the_microbatch&quot;&gt;Spark Streaming - return of the micro-batch&lt;/h2&gt;

&lt;p&gt;Spark also comes with a streaming data processing model, which got me quite interested, of course. There is again a &lt;a href=&quot;http://www.eecs.berkeley.edu/Pubs/TechRpts/2012/EECS-2012-259.pdf&quot;&gt;paper&lt;/a&gt; which summarizes the design quite nicely. Spark follows an interesting and different approach compared to frameworks like Twitter&amp;#x2019;s &lt;a href=&quot;http://storm-project.net/&quot;&gt;Storm&lt;/a&gt;. Storm is basically like a pipeline where you push individual events in which then get processed in a distributed fashion. Instead, Spark follows a model where events are collected and then processed at short time intervals (let&amp;#x2019;s say every 5 seconds) in a batch manner. The collected data become an RDD of their own which is then processed using the usual set of Spark applications.&lt;/p&gt;

&lt;p&gt;The authors claim that this mode is more robust against slow nodes and failures, and also that the 5 second interval are usually fast enough for most applications. I&amp;#x2019;m not so sure about this, as distributed computing is always pretty complex and I don&amp;#x2019;t think you can easily say that something&amp;#x2019;s are generally better than others. This approach also nicely unifies the streaming with the non- streaming parts, which is certainly true.&lt;/p&gt;

&lt;h2 id=&quot;final_thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;What I saw looked pretty promising, and given the support and attention Spark receives, I&amp;#x2019;m pretty sure it will mature and become a strong player in the field. It&amp;#x2019;s not well-suited for everything. As the authors themselves admit, it&amp;#x2019;s not really well suited to operations which require to change only a few entries the data set at the time due to the immutable nature of the RDDs. In principle, you have to make a copy of the whole data set even if you just want to change one entry. This can be nicely paralellized, but is of course costly. More efficient implementations based on copy-on-write schemes might also work here, but are not implement yet if I&amp;#x2019;m not mistaken.&lt;/p&gt;

&lt;p&gt;Stratosphere is research project at the TU Berlin which has similar goals, but takes the approach even further by including more complex operations like iterations and not only storing the sequence of operations for fault tolerance, but to use them for global optimization of the scheduling and paralellization.&lt;/p&gt;

&lt;p&gt;Immutability is pretty on vogue here as it&amp;#x2019;s easier to reason about, but I&amp;#x2019;d like to point you to this excellent &lt;a href=&quot;http://www.xaprb.com/blog/2013/12/28/immutability-mvcc-and-garbage-collection/&quot;&gt;article&lt;/a&gt; by Baron Schwartz on how you&amp;#x2019;ll always end up with mixed strategies (mutable and immutable data) to make it work in the real-world.&lt;/p&gt;
      
      &lt;p&gt;Posted by Mikio L. Braun at Fri Jan 17 16:12:00 +0100 2014&lt;/p&gt;


      

      
      

      
      
      &lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;blog comments powered by &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description>
<title>
Apache Spark: The Next Big Data Thing?
</title>
</item>
<item>
<link>
http://baboom.com/
</link>
<description>
&lt;div class=&quot;phone&quot;&gt;
        &lt;div id=&quot;page&quot;&gt;
            

            &lt;div class=&quot;page-wrapper&quot;&gt;
                &lt;div class=&quot;page-container&quot;&gt;
                    
                    &lt;div class=&quot;content&quot;&gt;
                        

                        &lt;div class=&quot;section&quot;&gt;
                            &lt;div class=&quot;align-middle-wrapper&quot;&gt;
                                &lt;div class=&quot;align-middle&quot;&gt;
                                    

                                    &lt;p class=&quot;cant-wait-title title&quot;&gt;Can't wait to see &lt;br&gt;&lt;span class=&quot;strong&quot;&gt;what we're all about?&lt;/span&gt;&lt;/p&gt;
                                    &lt;p class=&quot;check-album-subtitle subtitle&quot;&gt;Check the first album ever released on Baboom,&lt;br&gt; &lt;span class=&quot;strong&quot;&gt;Good Times&lt;/span&gt; by Kim Dotcom&lt;/p&gt;

                                    &lt;p class=&quot;check-album-subtitle-compact subtitle&quot;&gt;Check the first album ever released on Baboom&lt;/p&gt;
                                    

                                    

                                    
                                &lt;/div&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;

                        

                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        
        &lt;a href=&quot;https://plus.google.com/104355472463686127790&quot; rel=&quot;publisher&quot; class=&quot;google-plus-link&quot;&gt;Google+&lt;/a&gt;

        
        
    &lt;/div&gt;

</description>
<title>
Kim Dotcom's new music streaming service
</title>
</item>
<item>
<link>
http://www.agner.org/optimize/blog/read.php?i=49
</link>
<description>
&lt;div&gt;&lt;td class=&quot;message&quot; width=&quot;100%&quot; colspan=&quot;2&quot;&gt;&lt;h2&gt;Will Intel be forced to remove the &quot;cripple AMD&quot; function from
their compiler?&lt;/h2&gt;
&lt;p&gt;Many software programmers consider Intel's compiler the best optimizing
compiler on the market, and it is often the preferred compiler for the most
critical applications. Likewise, Intel is supplying a lot of highly optimized
function libraries for many different technical and scientific applications. In
many cases, there are no good alternatives to Intel's function libraries.&lt;/p&gt;
&lt;p&gt;Unfortunately, software compiled with the Intel compiler or the Intel
function libraries has inferior performance on AMD and VIA processors. The
reason is that the compiler or library can make multiple versions of a piece of
code, each optimized for a certain processor and instruction set, for example
SSE2, SSE3, etc. The system includes a function that detects which type of CPU
it is running on and chooses the optimal code path for that CPU. This is called
a CPU dispatcher. However, the Intel CPU dispatcher does not only check which
instruction set is supported by the CPU, it also checks the vendor ID string. If
the vendor string says &quot;GenuineIntel&quot; then it uses the optimal code
path. If the CPU is not from Intel then, in most cases, it will run the slowest
possible version of the code, even if the CPU is fully compatible with a better
version.&lt;/p&gt;
&lt;p&gt;I have complained about this behavior for years, and so have many others, but
Intel have refused to change their CPU dispatcher. If Intel had advertised their
compiler as compatible with Intel processors only, then there would probably be
no complaints. The problem is that they are trying to hide what they are doing.
Many software developers think that the compiler is compatible with AMD
processors, and in fact it is, but unbeknownst to the programmer it puts in a
biased CPU dispatcher that chooses an inferior code path whenever it is running
on a non-Intel processor. If programmers knew this fact they would probably use
another compiler. Who wants to sell a piece of software that doesn't work well
on AMD processors? &lt;/p&gt;
&lt;p&gt;Because of their size, Intel can afford to put more money into their compiler
than other CPU vendors can. The Intel compiler is relatively cheap, it has superior
performance, and the support is excellent. Selling such a compiler is certainly
not a profitable business in itself, but it is obviously intended as a way of
supporting Intel's microprocessors. There would be no point in adding new
advanced instructions to the microprocessors if there were no tools to use these
instructions. AMD is also making a compiler, but the current version supports
only Linux, not Windows. &lt;/p&gt;
&lt;p&gt;Various people have raised suspicion that the biased CPU dispatching has made its way into
common benchmark programs (&lt;a href=&quot;http://www.brightsideofnews.com/print/2009/12/17/why-the-ftc-lawsuit-against-intel-has-substance.aspx&quot;&gt;link&lt;/a&gt;
&lt;a href=&quot;http://arstechnica.com/hardware/reviews/2008/07/atom-nano-review.ars/6&quot;&gt;link&lt;/a&gt;).
This is a serious issue indeed. We know that many customers base their buying
decision on published benchmark results, and a biased benchmark means an unfair
market advantage worth billions of dollars. &lt;/p&gt;

&lt;h2&gt;The legal battle &lt;/h2&gt;
&lt;p&gt;AMD have sued Intel for unfair competition at least since 2005, and the case
has been &lt;a href=&quot;http://download.intel.com/pressroom/legal/AMD_settlement_agreement.pdf&quot;&gt;settled&lt;/a&gt;
in November 2009. This settlement deals with many issues of unfair competition,
apparently including the Intel compiler. The settlement says: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.3 TECHNICAL PRACTICES&lt;br&gt;
&lt;br&gt;
Intel shall not include any Artificial Performance Impairment in any Intel
product or require any Third Party to include an Artificial Performance
Impairment in the Third Party&amp;#x92;s product. As used in this Section 2.3, &amp;#x93;&lt;u&gt;Artificial
Performance Impairment&lt;/u&gt;&amp;#x94; means an affirmative engineering or design action
by Intel (but not a failure to act) that (i) degrades the performance or
operation of a Specified AMD product, (ii) is not a consequence of an Intel
Product Benefit and (iii) is made intentionally to degrade the performance or
operation of a Specified AMD Product. For purposes of this Section 2.3, &amp;#x93;&lt;u&gt;Product
Benefit&lt;/u&gt;&amp;#x94; shall mean any benefit, advantage, or improvement in terms of
performance, operation, price, cost, manufacturability, reliability,
compatibility, or ability to operate or enhance the operation of another
product.&lt;br&gt;
&lt;br&gt;
In no circumstances shall this Section 2.3 impose or be construed to impose any
obligation on Intel to (i) take any act that would provide a Product Benefit to
any AMD or other non-Intel product, either when such AMD or non-Intel product is
used alone or in combination with any other product, (ii) optimize any products
for Specified AMD Products, or (iii) provide any technical information,
documents, or know how to AMD. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This looks like a victory for AMD. If we read &quot;any Intel product&quot;
as Intel's compilers and function libraries, &quot;any Third Party&quot; as
programmers using these compilers and libraries, and &quot;Artificial
Performance Impairment&quot; as the CPU dispatcher checking the vendor ID
string; then the settlement puts an obligation on Intel to change their CPU
dispatcher. I will certainly check the next version of Intel's compiler and
libraries to see if they have done so or they have found a loophole in the
settlement. &lt;/p&gt;
&lt;p&gt;Interestingly, this is not the end of the story. Only about one month after
the AMD/Intel settlement, the US Federal Trade Commission (FTC) filed an &lt;a href=&quot;http://www.ftc.gov/os/adjpro/d9341/091216intelcmpt.pdf&quot;&gt;antitrust
complaint&lt;/a&gt; against Intel. The accusations in the FTC complaint are unusually
strong: &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Intel sought to undercut the performance advantage of
  non-Intel x86 CPUs relative to Intel x86 CPUs when it redesigned and
  distributed software products, such as compilers and libraries.&lt;br&gt;
  [...]&lt;br&gt;
  To the public, OEMs, ISVs, and benchmarking organizations, the slower
  performance of non-Intel CPUs on Intel-compiled software applications appeared
  to be caused by the non-Intel CPUs rather than the Intel software. Intel
  failed to disclose the effects of the changes it made to its software in or
  about 2003 and later to its customers or the public. Intel also disseminated
  false or misleading documentation about its compiler and libraries. Intel
  represented to ISVs, OEMs, benchmarking organizations, and the public that
  programs inherently performed better on Intel CPUs than on competing CPUs. In
  truth and in fact, many differences were due largely or entirely to the Intel
  software. Intel&amp;#x92;s misleading or false statements and omissions about the
  performance of its software were material to ISVs, OEMs, benchmarking
  organizations, and the public in their purchase or use of CPUs. Therefore,
  Intel&amp;#x92;s representations that programs inherently performed better on Intel
  CPUs than on competing CPUs were, and are, false or misleading. Intel&amp;#x92;s
  failure to disclose that the differences were due largely to the Intel
  software, in light of the representations made, was, and is, a deceptive
  practice. Moreover, those misrepresentations and omissions were likely to harm
  the reputation of other x86 CPUs companies, and harmed competition.&lt;br&gt;
  [...]&lt;br&gt;
  Some ISVs requested information from Intel concerning the apparent variation
  in performance of identical software run on Intel and non-Intel CPUs. In
  response to such requests, on numerous occasions, Intel misrepresented,
  expressly or by implication, the source of the problem and whether it could be
  solved.&lt;br&gt;
  [...]&lt;br&gt;
  Intel&amp;#x92;s software design changes slowed the performance of non-Intel x86 CPUs
  and had no sufficiently justifiable technological benefit. Intel&amp;#x92;s deceptive
  conduct deprived consumers of an informed choice between Intel chips and rival
  chips, and between Intel software and rival software, and raised rivals&amp;#x92;
  costs of competing in the relevant CPU markets. The loss of performance caused
  by the Intel compiler and libraries also directly harmed consumers that used
  non-Intel x86 CPUs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The remedy that the FTC asks for is also quite farreaching: &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Requiring that, with respect to those Intel customers that purchased from
  Intel a software compiler that had or has the design or effect of impairing
  the actual or apparent performance of microprocessors not manufactured by
  Intel (&quot;Defective Compiler&quot;), as described in the Complaint:&lt;/p&gt;
  &lt;ol type=&quot;a&quot;&gt;
    &lt;li&gt;Intel provide them, at no additional charge, a substitute compiler that is
  not a Defective Compiler;&lt;/li&gt;
    &lt;li&gt;Intel compensate them for the cost of recompiling the software they had
  compiled on the Defective Compiler and of substituting, and distributing to
  their own customers, the recompiled software for software compiled on a Defective
  Compiler; and&lt;/li&gt;
    &lt;li&gt;Intel give public notice and warning, in a manner likely to be communicated
  to persons that have purchased software compiled on Defective Compilers
  purchased from Intel, of the possible need to replace that software.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maybe the FTC has decided&amp;#xA0;that the AMD/Intel settlement was not a fair
and sufficient remedy against Intel's monopoly behavior? The settlement
compensates AMD, but not VIA and other microprocessor vendors, and not the customers who have been harmed by
insufficient competition and by the &quot;defective&quot; software produced with
the Intel compiler. &lt;/p&gt;

&lt;h2&gt;My own findings &lt;/h2&gt;
&lt;p&gt;When I started testing Intel's compiler several years ago, I soon found out
that it had a biased CPU dispatcher. Back in January 2007 I complained to Intel
about the unfair CPU dispatcher. I had a long correspondence with Intel
engineers about the issue, where they kept denying the problem and I kept
providing more evidence. They said that: &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The CPU dispatch, coupled with optimizations, is designed to optimize
  performance across Intel and AMD processors to give the best results. This is
  clearly our goal and with one exception we believe we are there now. The one
  exception is that our 9.x compilers do not support SSE3 on AMD processors
  because of the timing of the release of AMD processors vs. our compiler (our
  compiler was developed before AMD supported SSE3). The future 10.x compilers,
  which enter beta this quarter and release around the middle of the year, will
  address this now that we&amp;#x92;ve had time to tune and adjust to the new AMD
  processors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sounds nice, but the truth is that the CPU dispatcher didn't support SSE or
SSE2 or any higher SSE in AMD processors and still doesn't today (Intel compiler
version 11.1.054). I have
later found out that others have made similar complaints to Intel and got
similarly useless answers (&lt;a href=&quot;http://yro.slashdot.org/comments.pl?sid=155593&amp;amp;cid=13042922&quot;&gt;link&lt;/a&gt;
&lt;a href=&quot;http://www.swallowtail.org/naughty-intel.shtml&quot;&gt;link&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;The Intel CPU dispatcher does not only check the vendor ID string and the
instruction sets supported. It also checks for specific processor models. In
fact, it will fail to recognize future Intel processors with a family number
different from 6. When I mentioned this to the Intel engineers they replied: &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;You mentioned we will not support future Intel processors with non-'6'
  family designations without a compiler update. Yes, that is correct and
  intentional. Our compiler produces code which we have high confidence will
  continue to run in the future. This has the effect of not assuming anything
  about future Intel or AMD or other processors. You have noted we could be more
  aggressive. We believe that would not be wise for our customers, who want a
  level of security that their code (built with our compiler) will continue to
  run far into the future. Your suggested methods, while they may sound
  reasonable, are not conservative enough for our highly optimizing compiler.
  Our experience steers us to issue code conservatively, and update the compiler
  when we have had a chance to verify functionality with new Intel and new AMD
  processors. That means there is a lag sometime in our production release
  support for new processors. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, they claim that they are optimizing for specific processor
models rather than for specific instruction sets. If true, this gives Intel an
argument for not supporting AMD processors properly. But it also means that all
software developers who use an Intel compiler have to recompile their code and
distribute new versions to their customers every time a new Intel processor
appears on the market. Now, this was three years ago. What happens if I try to
run a program compiled with an old version of Intel's compiler on the newest
Intel processors? You guessed it: It still runs the optimal code path. But the
reason is more difficult to guess: Intel have manipulated the CPUID family numbers on new processors in such a way that they appear as known models to older Intel
software. I have described the technical details &lt;a href=&quot;http://aceshardware.freeforums.org/cpuid-family-bits-added-because-of-flaw-in-intel-compiler-t428.html&quot;&gt;elsewhere&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Perhaps the initial design of Intel's CPU dispatcher was indeed intended
to optimize for known processor models only, without regard for future models.
If any of my students had made such a solution that was not future-oriented, I
would consider it a serious flaw. Perhaps the Intel engineers discovered the
missing support for future processors too late so that they had to design the
next generation of their processors in such a way that they appeared as known
models to existing Intel software. &lt;/p&gt;
&lt;p&gt;After Intel had flatly denied to change their CPU dispatcher, I decided that
the most efficient way to make them change their minds was to create publicity
about the problem. I contacted several IT magazines, but nobody wanted to write
about it. Sad, but not very surprising, considering that they all depend on
advertising money from Intel. The only publicity was my own &lt;a href=&quot;http://www.agner.org/optimize/#manual_cpp&quot;&gt;optimization
manual&lt;/a&gt; where I have described the problem in detail and given instructions
on how to replace the unfair CPU dispatcher. I wonder why AMD didn't create
public awareness about the problem. Were they obliged to keep quiet about an
ungoing lawsuit? And what about VIA/Centaur? &lt;/p&gt;

&lt;h2&gt;Workarounds &lt;/h2&gt;
&lt;p&gt;At present, we don't know if or when Intel will make a new compiler and new
software libraries that do not check the vendor ID string. In the meantime, here
is what we can do about the problem. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use another compiler. In &lt;a href=&quot;http://www.agner.org/optimize/#manual_cpp&quot;&gt;my
    tests&lt;/a&gt;, the Gnu compiler for Linux has an optimizing performance similar
    to the Intel compiler, but the Gnu function library (glibc) is inferior. All
    other compilers gave lower performance in my tests. There is no other Windows
    compiler with a similar performance, not even the Gnu compiler for Windows.&lt;br&gt;
    &amp;#xA0;&amp;#xA0;&lt;/li&gt;
  &lt;li&gt;Use the Intel software and patch the CPU dispatcher. In &lt;a href=&quot;http://www.agner.org/optimize/#manual_cpp&quot;&gt;my
    C++ manual&lt;/a&gt;, I have provided the code for alternative CPU dispatchers for
    Intel's compiler and function libraries and descriptions on how to patch
    them into your software. This, of course, relies on undocumented details of
    the Intel software. This dispatcher-patch can improve performance on
    non-Intel processors considerably in many cases.&lt;br&gt;
    &amp;#xA0;&amp;#xA0;&lt;/li&gt;
  &lt;li&gt;Never trust any benchmark unless it is open source and compiled with a
    neutral compiler, such as Gnu or Microsoft.&lt;br&gt;
    &amp;#xA0; &amp;#xA0;&lt;/li&gt;
  &lt;li&gt;It is possible to change the CPUID of AMD processors by using
    the AMD virtualization instructions. I hope that somebody will volunteer to
    make a program for this purpose. This will make it easy for anybody to check
    if their benchmark is fair and to improve the performance of software
    compiled with the Intel compiler on AMD processors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://aceshardware.freeforums.org/cpuid-family-bits-added-because-of-flaw-in-intel-compiler-t428.html&quot;&gt;My
Discussion in Aceshardware forum 2007&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://forums.amd.com/devforum/messageview.cfm?catid=203&amp;amp;threadid=95754&quot;&gt;Discussion
in AMD Developer Forums 2008&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amdzone.com/phpbb3/viewtopic.php?f=52&amp;amp;t=137269&amp;amp;sid=3571329cc7c1238a819d02de4bf906f5&quot;&gt;My
Discussion in AMDzone 2009&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://groups.google.co.uk/group/comp.arch/browse_frm/thread/4e42f16511cf8640?hl=en&amp;amp;lr=&amp;amp;ie=UTF-8&amp;amp;rnum=1&amp;amp;prev=/groups%3Fq%3Dintel%2Bcompiler%2Btrick%26hl%3Den%26lr%3D%26ie%3DUTF-8%26selm%3Dvlfnf1-8tm.ln1%2540miriam.mikron.de%26rnum%3D1&quot;&gt;Discussion
in comp.arch 2004&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://yro.slashdot.org/comments.pl?sid=155593&amp;amp;cid=13042922&quot;&gt;Complaint
to Intel 2004, discussion in slashdot.org&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.swallowtail.org/naughty-intel.shtml&quot;&gt;Mark Mackey,
complaint to Intel 2005&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://arstechnica.com/hardware/reviews/2008/07/atom-nano-review.ars/6&quot;&gt;PCMark
2005 benchmark proven unfair. Arstechnica&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.brightsideofnews.com/print/2009/12/17/why-the-ftc-lawsuit-against-intel-has-substance.aspx&quot;&gt;Testimony
by &lt;span id=&quot;ctl00_ContentPlaceHolder1_NewsXXL1_Label4&quot;&gt;John Oram regarding &lt;span id=&quot;ctl00_ContentPlaceHolder1_NewsXXL1_Label3&quot;&gt;BAPCo&lt;/span&gt;&lt;/span&gt;benchmark organization&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.amd.com/documentation/articles/pages/4292005119.aspx&quot;&gt;Comment
on AMD Developer Central 2005&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.theregister.co.uk/2005/07/12/amd_vs_intel_code/&quot;&gt;AMD
files lawsuit 2005&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://techreport.com/discussions/8547&quot;&gt;AMD untitrust complaints
2005&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://download.intel.com/pressroom/legal/AMD_settlement_agreement.pdf&quot;&gt;Settlement agreement
between AMD and Intel, 2009&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ftc.gov/os/adjpro/d9341/091216intelcmpt.pdf&quot;&gt;FTC complaint
2009&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.agner.org/optimize/#manual_cpp&quot;&gt;Technical details
in my C++ optimization manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;mod&quot;&gt;[Added later:]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.xtremesystems.org/forums/showthread.php?t=242272&quot;&gt;Discussion on XtremeSystems Forum&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.osnews.com/story/22683/Intel_Forced_to_Remove_quot_Cripple_AMD_quot_Function_from_Compiler_&quot;&gt;Discussion on OSnews&lt;/a&gt;.&lt;/p&gt;&lt;/td&gt;&lt;/div&gt;
</description>
<title>
Intel's &quot;cripple AMD&quot; function (2009)
</title>
</item>
<item>
<link>
https://github.com/cython/cython/blob/master/CHANGES.rst#020-2014-01-18
</link>
<description>

</description>
<title>
Cython 0.20
</title>
</item>
<item>
<link>
http://www.gamezebo.com/news/2014/01/20/king-has-trademarked-word-candy-and-youre-probably-infringing
</link>
<description>
&lt;div&gt;&lt;div class=&quot;page_reviewbox_content_details font14&quot;&gt;
&lt;div class=&quot;fltleft gaprt20 gapbot20&quot;&gt;&lt;img src=&quot;http://2a34166a1c224507ff54-79590be14f37a3e58649da10f58ee927.r67.cf1.rackcdn.com/news/game_title_image/1390232832.png&quot;&gt;&lt;/div&gt;
&lt;p&gt;When you have an intellectual property &amp;#x2013; especially one that&amp;#x2019;s worth millions of dollars &amp;#x2013; you want to protect it. But can such protections ever go too far? That&amp;#x2019;s the question a lot of industry watchers are asking this morning, as developers far and wide whose games include the word &amp;#x2018;candy&amp;#x2019; are getting emails from Apple on behalf of King, the makers of &lt;em&gt;&lt;a href=&quot;http://www.gamezebo.com/games/candy-crush-saga/review&quot;&gt;Candy Crush Saga&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;In &lt;a href=&quot;http://www.trademarkia.com/candy-85842584.html&quot;&gt;a filing with the US trademark office&lt;/a&gt; dated February 6, 2013, King.com Limited registered claim to the word &amp;#x2018;candy&amp;#x2019; as it pertains to video games and, strangely, clothing. On January 15, 2014 the filing was approved. And now, a mere five days later, reports are coming in from developers that they&amp;#x2019;re being asked to remove their app (or prove that their game doesn&amp;#x2019;t infringe upon the trademark).&lt;/p&gt;&lt;p&gt;&amp;#x201C;Lots of devs are frustrated cause it seems so ridiculous&amp;#x201D; says Benny Hsu, the maker of &lt;em&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/all-candy-casino-slots-jewels/id788815470&quot;&gt;All Candy Casino Slots &amp;#x2013; Jewel Craze Connect: Big Blast Mania Land&lt;/a&gt;&lt;/em&gt;. Benny&amp;#x2019;s game, which shares no similarities with King&amp;#x2019;s properties aside from the word &amp;#x2018;candy,&amp;#x2019; is one of a number of games that have been targeted by King.&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;gallery colorbox-load&quot; title=&quot;news&quot; href=&quot;http://2a34166a1c224507ff54-79590be14f37a3e58649da10f58ee927.r67.cf1.rackcdn.com/news/full/1390231848.&quot;&gt;&lt;img src=&quot;http://2a34166a1c224507ff54-79590be14f37a3e58649da10f58ee927.r67.cf1.rackcdn.com/news/medium/1390231847.&quot; alt=&quot;news&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Hsu contacted Sophie Hallstrom, King&amp;#x2019;s IP paralegal, to discuss the matter further. Rather than the simple &amp;#x201C;oops, our mistake&amp;#x201D; that Benny was hoping for, he was given a very finite response. &amp;#x201C;Your use of CANDY SLOTS in your app icon uses our CANDY trade mark exactly, for identical goods, which amounts to trade mark infringement and is likely to lead to consumer confusion and damage to our brand,&amp;#x201D; reads Hallstrom&amp;#x2019;s reply. &amp;#x201C;The addition of only the descriptive term &quot;SLOTS&quot; does nothing to lessen the likelihood of confusion.&amp;#x201D;&amp;#xA0;&lt;/p&gt;&lt;p&gt;So how does a word like &amp;#x2018;candy&amp;#x2019; get trademarked? According to Martin Schwimmer, a partner at the IP legal firm &lt;a href=&quot;http://www.leasonellis.com/&quot;&gt;Leeson Ellis&lt;/a&gt; (and the man behind &lt;a href=&quot;http://www.trademarkblog.com/&quot;&gt;The Trademark Blog&lt;/a&gt;), it&amp;#x2019;s all about how strong a connection the claimant has to that mark when it comes to a particular good or service. Think of Apple, for example. Nobody is going to expect the electronics giant to lay claim over the fruit, but if someone were to try to market an electronic device under that name, you&amp;#x2019;d better believe their lawyers would swoop in.&lt;/p&gt;&lt;p&gt;So the question then, is whether or not there&amp;#x2019;s a strong enough connection between the word &amp;#x2018;candy&amp;#x2019; and video games as it pertains to &lt;em&gt;Candy Crush Saga&lt;/em&gt;. According to the US Trademark Office, the answer is a bona fide yes.&lt;/p&gt;&lt;p&gt;Still, holding a trademark and being able to enforce it are entirely different things. Schwimmer is quick to point out the difference between suggestive marks and unique ones. &amp;#x201C;Someone can't plausibly claim that they came up with the term TEENAGE MUTANT NINJA TURTLES on their own. &amp;#xA0;An incredibly unique trademark like that is somewhat easy to protect.&amp;#x201D; But something generic &amp;#x2013; a dictionary word like candy? That can be a lot trickier.&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;gallery colorbox-load&quot; title=&quot;news&quot; href=&quot;http://2a34166a1c224507ff54-79590be14f37a3e58649da10f58ee927.r67.cf1.rackcdn.com/news/full/1390231780.jpeg&quot;&gt;&lt;img src=&quot;http://2a34166a1c224507ff54-79590be14f37a3e58649da10f58ee927.r67.cf1.rackcdn.com/news/medium/1390231778.jpeg&quot; alt=&quot;news&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Benny Hsu's &lt;a href=&quot;https://itunes.apple.com/us/app/all-candy-casino-slots-jewels/id788815470&quot;&gt;All Candy Casino Slots&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&amp;#x201C;Suggestive marks are protectable, but the problem is that third parties can claim that they thought up their mark on their own.&amp;#x201D; And in the case of something as generic as &amp;#x2018;candy,&amp;#x2019; it doesn&amp;#x2019;t seem that farfetched to think that a lot of developers may have.&lt;/p&gt;&lt;p&gt;&amp;#x201C;As to how far King can enforce its rights, it will be a function of how strong its mark has become, and how similar the third party name is. &amp;#xA0;It would likely be able to enforce its rights against marks that are connotatively, phonetically or visually similar, for games that are conceivably competitive,&amp;#x201D; Schwimmer tells us. &amp;#x201C;King can't go after candy companies because candy companies don't use the term CANDY as a trademark &amp;#x2013; they use it to identify their product.&amp;#x201D;&lt;/p&gt;&lt;p&gt;If you&amp;#x2019;re a developer who has received one of these letters from King, Schwimmer&amp;#x2019;s advice is simple: call a lawyer. &amp;#x201C;A trademark lawyer can be very useful in obtaining a coexistence agreement. &amp;#xA0;Often a trademark owner will accept a settlement in which the possibility of confusion is mitigated, perhaps because the developer will not expand into areas more directly competitive with the trademark owner.&amp;#x201D;&lt;/p&gt;&lt;p&gt;But in an App Store littered with small indie developers, this is an option that seems out of reach for developers like Benny Hsu. &amp;#x201C;Myself and other indie developers don't have the money or resources to fight back&amp;#x2026; I plan on changing the name if that is what I must do.&amp;#x201D;&lt;/p&gt;&lt;p&gt;With Apple seemingly complicit in King&amp;#x2019;s claims &amp;#x2013; the letter Tsu initially received came through the iTunes legal department &amp;#x2013; one can&amp;#x2019;t help but wonder what the future of the App Store and suggestive trademarks might be.&lt;/p&gt;&lt;p&gt;&amp;#x201C;Last year I learned I couldn't use the word MEMORY because it was trademarked,&amp;#x201D; said Hsu. &amp;#x201C;Now I wonder what other common words will be trademarked in the App Store.&amp;#x201D;&lt;/p&gt;

&lt;p class=&quot;tags&quot;&gt;
&lt;strong&gt;Read more:&lt;/strong&gt; &lt;a href=&quot;http://www.gamezebo.com/tag/candy-crush-saga&quot;&gt;Candy Crush Saga&lt;/a&gt;, &lt;a href=&quot;http://www.gamezebo.com/tag/king&quot;&gt;King&lt;/a&gt;, &lt;a href=&quot;http://www.gamezebo.com/tag/copyright&quot;&gt;copyright&lt;/a&gt; &lt;/p&gt;
&lt;/div&gt;
 
 
 
 
&lt;/div&gt;
</description>
<title>
Candy Crush Saga creators have trademarked the word “candy”
</title>
</item>
</channel>
</rss>
