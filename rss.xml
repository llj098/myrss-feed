<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0'>
<channel>
<generator>
clj-rss
</generator>
<link>
https://news.ycombinator.com
</link>
<title>
myread
</title>
<description>
myread
</description>
<item>
<author>
Chris Lattner
</author>
<link>
http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html?repost!
</link>
<description>
&lt;div&gt;&lt;div class=&quot;post-body entry-content&quot;&gt;
People occasionally ask why LLVM-compiled code sometimes generates SIGTRAP signals when the optimizer is turned on. After digging in, they find that Clang generated a &quot;ud2&quot; instruction (assuming X86 code) - the same as is generated by __builtin_trap(). There are several issues at work here, all centering around undefined behavior in C code and how LLVM handles it.&lt;br&gt;
&lt;br&gt;
This blog post (the first in a series of three) tries to explain some of these issues so that you can better understand the tradeoffs and complexities involved, and perhaps learn a few more of the dark sides of C. It turns out that C is &lt;i&gt;not&lt;/i&gt; a &quot;high level assembler&quot; like many experienced C programmers (particularly folks with a low-level focus) like to think, and that C++ and Objective-C have directly inherited plenty of issues from it.&lt;br&gt;
&lt;br&gt;
&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;
Translation available in: &lt;a href=&quot;http://blog-ja.intransient.info/2011/05/c-13.html&quot;&gt;Japanese&lt;/a&gt;&lt;br&gt;
&lt;br&gt;
Both LLVM IR and the C programming language have the concept of &quot;undefined behavior&quot;.  Undefined behavior is a broad topic with a lot of nuances. The best introduction I've found to it is a post on &lt;a href=&quot;http://blog.regehr.org/archives/213&quot;&gt;John Regehr's Blog&lt;/a&gt;.  The short version of this excellent article is that many seemingly reasonable things in C actually have undefined behavior, and this is a common source of bugs in programs. Beyond that, any undefined behavior in C gives license to the implementation (the compiler and runtime) to produce code that formats your hard drive, does completely unexpected things, &lt;a href=&quot;http://www.catb.org/jargon/html/N/nasal-demons.html&quot;&gt;or worse&lt;/a&gt;.  Again, I would highly recommend reading &lt;a href=&quot;http://blog.regehr.org/archives/213&quot;&gt;John's article&lt;/a&gt;.&lt;br&gt;
&lt;br&gt;
Undefined behavior exists in C-based languages because the designers of C wanted it to be an extremely efficient low-level programming language.  In contrast, languages like Java (and many other 'safe' languages) have eschewed undefined behavior because they want safe and reproducible behavior across implementations, and willing to sacrifice performance to get it.  While neither is &quot;the right goal to aim for,&quot; if you're a C programmer you really should understand what undefined behavior is.&lt;br&gt;
&lt;br&gt;
Before getting into the details, it is worth briefly mentioning what it takes for a compiler to get good performance out a broad range of C apps, because &lt;b&gt;there is no magic bullet&lt;/b&gt;.  At a very high level, compilers produce high performance apps by a) doing a good job at bread and butter algorithms like register allocation, scheduling, etc. b) knowing lots and lots of &quot;tricks&quot; (e.g. peephole optimizations, loop transformations, etc), and applying them whenever profitable. c) being good at eliminating unnecessary abstractions (e.g. redundancy due to macros in C, inlining functions, eliminating temporary objects in C++, etc) and d) not screwing anything up.   While any of the optimizations below may sound trivial, it turns out that saving just one cycle out of a critical loop can make some codec run 10% faster or take 10% less power.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Before getting into the dark side of undefined behavior and LLVM's policy and behavior when used as a C compiler, I thought it would be helpful to consider a few specific cases of undefined behavior, and talk about how each enables better performance than a safe language like Java.  You can look at this either as &quot;optimizations enabled&quot; by the class of undefined behavior or as the &quot;overhead avoided&quot; that would be required to make each case defined.  While the compiler optimizer could eliminate some of these overheads some of the time, to do so in general (for every case) would require solving the halting problem and many other &quot;interesting challenges&quot;.&lt;br&gt;
&lt;br&gt;
It is also worth pointing out that both Clang and GCC nail down a few behaviors that the C standard leaves undefined.  The things I'll describe are both undefined according to the standard and treated as undefined behavior by both of these compilers in their default modes.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Use of an uninitialized variable:&lt;/b&gt; This is commonly known as source of problems in C programs and there are many tools to catch these: from compiler warnings to static and dynamic analyzers.  This improves performance by not requiring that all variables be zero initialized when they come into scope (as Java does).  For most scalar variables, this would cause little overhead, but stack arrays and malloc'd memory would incur a memset of the storage, which could be quite costly, particularly since the storage is usually completely overwritten.&lt;br&gt;
&lt;br&gt;
&lt;b id=&quot;signed_overflow&quot;&gt;Signed integer overflow:&lt;/b&gt;  If arithmetic on an 'int' type (for example) overflows, the result is undefined.  One example is that &quot;INT_MAX+1&quot; is not guaranteed to be INT_MIN.  This behavior enables certain classes of optimizations that are important for some code.  For example, knowing that INT_MAX+1 is undefined allows optimizing &quot;X+1 &amp;gt; X&quot; to &quot;true&quot;.  Knowing the multiplication &quot;cannot&quot; overflow (because doing so would be undefined) allows optimizing &quot;X*2/2&quot; to &quot;X&quot;.  While these may seem trivial, these sorts of things are commonly exposed by inlining and macro expansion.  A more important optimization that this allows is for &quot;&amp;lt;=&quot; loops like this:&lt;br&gt;
&lt;br&gt;
&lt;pre&gt;for (i = 0; i &amp;lt;= N; ++i) { ... }
&lt;/pre&gt;&lt;br&gt;
In this loop, the compiler can assume that the loop will iterate exactly N+1 times if &quot;i&quot; is undefined on overflow, which allows a broad range of loop optimizations to kick in.  On the other hand, if the variable is defined to wrap around on overflow, then the compiler must assume that the loop is possibly infinite (which happens if N is INT_MAX) - which then disables these important loop optimizations.  This particularly affects 64-bit platforms since so much code uses &quot;int&quot; as induction variables.&lt;br&gt;
&lt;br&gt;
It is worth noting that unsigned overflow is guaranteed to be defined as 2's complement (wrapping) overflow, so you can always use them.  The cost to making signed integer overflow defined is that these sorts of optimizations are simply lost (for example, a common symptom is a ton of sign extensions inside of loops on 64-bit targets).  Both Clang and GCC accept the &quot;-fwrapv&quot; flag which forces the compiler to treat signed integer overflow as defined (other than divide of INT_MIN by -1).&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Oversized Shift Amounts:&lt;/b&gt; Shifting a uint32_t by 32 or more bits is undefined.  My guess is that this originated because the underlying shift operations on various CPUs do different things with this: for example, X86 truncates 32-bit shift amount to 5 bits (so a shift by 32-bits is the same as a shift by 0-bits), but PowerPC truncates 32-bit shift amounts to 6 bits (so a shift by 32 produces zero).  Because of these hardware differences, the behavior is completely undefined by C (thus shifting by 32-bits on PowerPC could format your hard drive, it is &lt;b&gt;*not*&lt;/b&gt; guaranteed to produce zero).  The cost of eliminating this undefined behavior is that the compiler would have to emit an extra operation (like an 'and') for variable shifts, which would make them twice as expensive on common CPUs.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Dereferences of Wild Pointers and Out of Bounds Array Accesses:&lt;/b&gt; Dereferencing random pointers (like NULL, pointers to free'd memory, etc) and the special case of accessing an array out of bounds is a common bug in C applications which hopefully needs no explanation.  To eliminate this source of undefined behavior, array accesses would have to each be range checked, and the ABI would have to be changed to make sure that range information follows around any pointers that could be subject to pointer arithmetic.  This would have an extremely high cost for many numerical and other applications, as well as breaking binary compatibility with every existing C library.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Dereferencing a NULL Pointer:&lt;/b&gt; contrary to popular belief, dereferencing a null pointer in C is undefined.  It is &lt;i&gt;not defined to trap&lt;/i&gt;, and if you mmap a page at 0, it is &lt;i&gt;not defined to access that page&lt;/i&gt;.  This falls out of the rules that forbid dereferencing wild pointers and the use of NULL as a sentinel.  NULL pointer dereferences being undefined enables a broad range of optimizations: in contrast, Java makes it invalid for the compiler to move a side-effecting operation across any object pointer dereference that cannot be proven by the optimizer to be non-null. This significantly punishes scheduling and other optimizations.  In C-based languages, NULL being undefined enables a large number of simple scalar optimizations that are exposed as a result of macro expansion and inlining.&lt;br&gt;
&lt;br&gt;
If you're using an LLVM-based compiler, you can dereference a &quot;volatile&quot; null pointer to get a crash if that's what you're looking for, since volatile loads and stores are generally not touched by the optimizer.  There is currently no flag that enables random NULL pointer loads to be treated as valid accesses or to make random loads know that their pointer is &quot;allowed to be null&quot;.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Violating Type Rules:&lt;/b&gt; It is undefined behavior to cast an int* to a float* and dereference it (accessing the &quot;int&quot; as if it were a &quot;float&quot;). C requires that these sorts of type conversions happen through memcpy: using pointer casts is not correct and undefined behavior results.  The rules for this are quite nuanced and I don't want to go into the details here (there is an exception for char*, vectors have special properties, unions change things, etc).  This behavior enables an analysis known as &quot;Type-Based Alias Analysis&quot; (TBAA) which is used by a broad range of memory access optimizations in the compiler, and can significantly improve performance of the generated code.  For example, this rule allows clang to optimize this function:&lt;br&gt;
&lt;br&gt;
&lt;pre&gt;float *P;
 void zero_array() {
   int i;
   for (i = 0; i &amp;lt; 10000; ++i)
     P[i] = 0.0f;
 }
&lt;/pre&gt;&lt;br&gt;
into &quot;&lt;tt&gt;memset(P, 0, 40000)&lt;/tt&gt;&quot;.  This optimization also allows many loads to be hoisted out of loops, common subexpressions to be eliminated, etc.  This class of undefined behavior can be disabled by passing the -fno-strict-aliasing flag, which disallows this analysis.  When this flag is passed, Clang is required to compile this loop into 10000 4-byte stores (which is several times slower), because it has to assume that it is possible for any of the stores to change the value of P, as in something like this:&lt;br&gt;
&lt;br&gt;
&lt;pre&gt;int main() {
  P = (float*)&amp;amp;P;  // cast causes TBAA violation in zero_array.
  zero_array();
}
&lt;/pre&gt;&lt;br&gt;
This sort of type abuse is pretty uncommon, which is why the standard committee decided that the significant performance wins were worth the unexpected result for &quot;reasonable&quot; type casts.  It is worth pointing out that Java gets the benefits of type-based optimizations without these drawbacks because it doesn't have unsafe pointer casting in the language at all.&lt;br&gt;
&lt;br&gt;
Anyway, I hope that this gives you an idea of some of the classes of optimizations enabled by undefined behavior in C.  There are many other kinds of course, including sequence point violations like &quot;foo(i, ++i)&quot;, race conditions in multithreaded programs, violating 'restrict', divide by zero, etc.&lt;br&gt;
&lt;br&gt;
In our &lt;a href=&quot;http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html&quot;&gt;next post&lt;/a&gt;, we'll discuss why undefined behavior in C is a pretty scary thing if performance is not your only goal. In our final post in the series, we'll talk about how LLVM and Clang handle it.&lt;br&gt;
&lt;br&gt;
-&lt;a href=&quot;http://nondot.org/sabre/&quot;&gt;Chris Lattner&lt;/a&gt;

&lt;/div&gt;

&lt;/div&gt;
</description>
<title>
What Every C Programmer Should Know About Undefined Behavior (2011)
</title>
</item>
<item>
<link>
http://productivity.stackexchange.com/questions/8182/how-to-cope-with-idea-overflow
</link>
<description>
&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;
            &lt;p&gt;As Gruber said in his answer, Agile methodologies will suite well for you. If you decide to adopt Scrum for yourself, the key thing to remember is that no planning should be done during an iteration. This means that at the beginning of an iteration you'll plan what you'll be doing for the next 2 or 3 weeks (the iteration length can be adjusted to your needs, but usually 2-3 weeks works best), and then you &lt;strong&gt;shouldn't change&lt;/strong&gt; any of your tasks, which includes not implementing anything new that wasn't planned beforehand. &lt;/p&gt;

&lt;p&gt;Once an idea comes to you, write it down somewhere and try to forget about it. The idea might seem brilliant at the moment (or at least better than your current task), but it might not seem so good some time later. Give your ideas time to settle, then come back to them and try to assess them again with a fresh look (probably at the beginning of an iteration when you need to plan the next few weeks).&lt;/p&gt;

&lt;p&gt;From my own experience, I worked in a small software company which suffered a lot because of such &lt;code&gt;idea overflow&lt;/code&gt;. We had new tasks before we had completed the previous ones, so eventually nothing was getting done. We had a bunch of incomplete stuff that wasn't working properly. But after we adopted Scrum and followed the key rule (which in our case was the same as I recommend to you: don't change the plans during an iteration), the situation improved significantly and we were surprised at how much we managed to accomplish.&lt;/p&gt;

&lt;p&gt;And one more thing that I think could be helpful. &lt;strong&gt;Always assume that your new idea is a bad one.&lt;/strong&gt; Don't rush to implement it, take your time. This combined with Scrum could really work for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; From your edit I think it's fair to assume that your focus is more toward making new ideas rather than working on a current one. If that is so, the real problem is to stay focused on the current task. I suggest you break your working hours into two parts: when you actually work on your current task and when you think of new ideas. You could try to see what sequence of the two works best for you (for example, work on a task for 6 hours and then spend 2 hours on the ideas, or have 2 hours for ideas in the middle of the day). &lt;/p&gt;

    &lt;/div&gt;
    &lt;/div&gt;
</description>
<title>
How to cope with “idea overflow”?
</title>
</item>
<item>
<link>
http://tgceec.tumblr.com/post/74534916370/results-of-the-grand-c-error-explosion-competition
</link>
<description>
&lt;div&gt;&lt;div class=&quot;body-text&quot;&gt;
                                                &lt;p&gt;After much deliberation, the winners of the Grand C++ Error Explosion Competition are finally selected. There are two different award categories. The winners of the first category are those submissions that produced the largest error with the smallest amount of source code. These entries contain a multiplier number, which is just the size of the error message divided by the size of the source code. The second category is artistic merit.&lt;/p&gt;
&lt;p&gt;Some of the code samples shown will overflow when displayed on the web. We apologize for any inconvenience this may cause.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Biggest error, category Anything&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;Name: Turtles all the way down
Author: Ed Hanway
Multiplier: 5.9 billion&lt;/pre&gt;
&lt;p&gt;This entry is the best implementation of the most common pattern, the &lt;em&gt;double include self&lt;/em&gt;. Here&amp;#x2019;s what it looks like:&lt;/p&gt;
&lt;pre&gt;#include &quot;.//.//.//.//jeh.cpp&quot;
#include &quot;jeh.cpp&quot;
`&lt;/pre&gt;
&lt;p&gt;This implementation produced almost six times the amount of error messages of the second best entry of the same type.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Biggest error, Category Plain&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;Name: y u no backreference?
Author: Chris Hopman
Multiplier: 790 million&lt;/pre&gt;
&lt;p&gt;The rules permitted includes in the plain category, so obviously the double include was used in this category as well.&lt;/p&gt;
&lt;pre&gt;#include &quot;set&amp;gt;.cpp&quot;
#include &quot;set&amp;gt;.cpp&quot;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Biggest error, category Bare Hands&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;Name: Const Variadic Templates
Author: Marc Aldorasi
Multiplier: 657 million&lt;/pre&gt;
&lt;p&gt;The bare hands category did not allow for any use of the preprocessor, which lead most people to use recursive or variadic template initiations. This entry was the most compact of the lot.&lt;/p&gt;
&lt;pre&gt;template&amp;lt;class T,class...&amp;gt;class C{C&amp;lt;T*const,T,C&amp;gt;a;C&amp;lt;T,C&amp;gt;b;};C&amp;lt;int&amp;gt;c;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Best cheat&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;Name: What's perl?
Author: Chris Hopman&lt;/pre&gt;
&lt;p&gt;There were several interesting cheat attempts in this competition. For example did you know that in C++ digraph expansion happens after line continuation expansion? We sure did not.&lt;/p&gt;
&lt;p&gt;Many tried to exploit a division by zero bug in the verification script. One submission even had a patch for this, which tried to changed the evaluator script to make their entry evaluate to infinite error. The best cheat went in a completely different direction, however.&lt;/p&gt;
&lt;p&gt;The actual code consisted of only one space. Since this entry was in the &lt;em&gt;anything&lt;/em&gt; category, it was accompanied by a list of header search directories. That file looked like this.&lt;/p&gt;
&lt;pre&gt;/usr/include; perl -e &quot;@c=\&quot;x\&quot;x(2**16); while(1) {print @c}&quot; 1&amp;gt;&amp;amp;2&lt;/pre&gt;
&lt;p&gt;When passed to the C++ compiler invocation line, this allows the shell code to escape the test harness sandbox. Extra credit for using Perl, which is the only language less readable than C++ templates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Most surprising&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;Name: templates and nested classes are not best practice
Author: Aaron Grothe&lt;/pre&gt;
&lt;p&gt;This piece of code looks innocent but explodes in a completely unexpected manner. We also tested this with Clang, which detects correctly the missing semicolon, after which it anyway tries to evaluate the infinite template recursion and eventually segfaults. This entry gives a glimpse on the kinds of issues an IDE&amp;#x2019;s code completion engine needs to guard against.&lt;/p&gt;
&lt;pre&gt;template&amp;lt;class T&amp;gt;class L{L&amp;lt;T*&amp;gt;operator-&amp;gt;()};L&amp;lt;int&amp;gt;i=i-&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Most lifelike&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;Name: Bjarne's nightmare
Author: Victor Zverovich&lt;/pre&gt;
&lt;p&gt;Suppose you are given a task of adding some new functionality to an existing code base. You have been told that the guy who wrote it was &amp;#x201C;really smart&amp;#x201D; and that his code is of &amp;#x201C;enterprise quality&amp;#x201D;. You check out the code and open a random file in an editor. It appears on the screen. After just one microsecond of looking at the code you have lost your will to live and want nothing more than to beat your head against the table until you lose consciousness.&lt;/p&gt;
&lt;p&gt;This entry could be that code. We&amp;#x2019;re glad we only needed to measure it rather than to understand and alter it.&lt;/p&gt;
&lt;pre&gt;#include &amp;lt;map&amp;gt;&lt;br&gt;#include &amp;lt;algorithm&amp;gt;&lt;br&gt;template&amp;lt;class T,class U&amp;gt;void f(T,U u){std::vector&amp;lt;std::vector&amp;lt;T&amp;gt;&amp;gt;v;auto i=end(v);find(i,i,u);find(i,i,&amp;amp;u);U*p,**q,r(),s(U);find(i,i,&amp;amp;p);find(i,i,&amp;amp;q);find(i,i,r);find(i,i,&amp;amp;r);find(i,i,s);find(i,i,&amp;amp;s);}template&amp;lt;class T&amp;gt;void f(T t){f(t,0);f(t,0l);f(t,0u);f(t,0ul);f(t,0ll);f(t,.0);f(t,.0l);f(t,.0f);f(t,' ');f(t,L' ');f(t,u' ');f(t,U' ');f(t,&quot;&quot;);f(t,L&quot;&quot;);}int main(){f(0);f(0l);f(0u);f(0ul);f(0ll);f(.0);f(.0l);f(.0f);f(' ');f(L' ');f(u' ');f(U' ');f(&quot;&quot;);f(L&quot;&quot;);f(u&quot;&quot;);f(U&quot;&quot;);}&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Barest hands&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;Title: whatever
Author: John Regehr&lt;/pre&gt;
&lt;p&gt;This entry does not have any template definitions or include recursion and yet it put up an admirable fight. This serves as an important reminder to all of us: when used correctly even the simplest of tools can be used to build impressive results.&lt;/p&gt;
&lt;pre&gt;struct x struct z&amp;lt;x(x(x(x(x(x(x(x(x(x(x(x(x(x(x(x(x(y,x(y&amp;gt;&amp;lt;y*,x(y*w&amp;gt;v&amp;lt;y*,w,x{}&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Epilogue&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We would like to thank all people who participated in the competition. We hope that all participants as well as you readers have enjoyed this experience.&lt;/p&gt;
&lt;p&gt;The final question now remaining is whether there will be a second TGCEEC next year?&lt;/p&gt;
&lt;p&gt;The answer to this is simple: yes, if you, the people, demand it.&lt;/p&gt;
&lt;p&gt;Till we meet again.&lt;/p&gt;
                                            &lt;/div&gt;
                                            
                                        

                                        

                                        

                                        


                                        


                                        


                                        


                                        

                                        

                                        

                                        
                                                                            
                                        

                                    &lt;/div&gt;
</description>
<title>
Results of the Grand C++ Error Explosion Competition
</title>
</item>
<item>
<link>
http://www.tonymacx86.com/mac-pro-mods/120757-mac-pro-late-2013-replica.html
</link>
<description>
&lt;div&gt;&lt;div class=&quot;postbody&quot;&gt;

&lt;div class=&quot;postrow has_after_content&quot;&gt;

				


						
							
							
						
						
				&lt;div class=&quot;content&quot;&gt;
					&lt;div id=&quot;post_message_736471&quot;&gt;
						&lt;blockquote class=&quot;postcontent restore &quot;&gt;


				&lt;br&gt;
				
							Edit (15th of january 2014):&lt;br&gt;
&lt;br&gt;
As this build gets so much attention I think I have to clarify some details.&lt;br&gt;
&lt;br&gt;
I am &lt;b&gt;NOT&lt;/b&gt; the builder of this mod. I got the permission of the &quot;modder&quot; to present the mod here. The original thread of the build has been in a german forum, which name I am not allowed to post, and has already been deleted. The admins of the source forum are a little restictive....&lt;br&gt;
&lt;br&gt;
All credit goes to the user &quot;sascha288&quot;, he is the owner and builder of that case.&lt;br&gt;
&lt;br&gt;
Because I have been threatened to get sued by the german forum admins, I had to remove the link to the original post. I'm not a professional in internet law/rights and just wanted to help.&lt;br&gt;
&lt;br&gt;
-----------&lt;br&gt;
&lt;br&gt;
I am writting on behalf of a user from a german Forum (had to delete the link&amp;#x85; o_O )&lt;br&gt;
&lt;br&gt;
The mod/case is based on (yes) a trashcan: Authentics - Lunar &lt;a href=&quot;http://www.amazon.de/Authentics-1200614-Bad-Abfalleimer-LUNAR-hellgrau/dp/B000TGKBRC/ref=sr_1_1?ie=UTF8&amp;amp;qid=1388662124&amp;amp;sr=8-1&amp;amp;keywords=Authentics+-+Lunar&quot; target=&quot;_blank&quot;&gt;http://www.amazon.de/Authentics-1200...entics+-+Lunar&lt;/a&gt;&lt;br&gt;
&lt;br&gt;
Dimensions: 18cm width, 26cm height&lt;br&gt;
&lt;br&gt;
Costs for the marterial (no PC hardware): 60&amp;#x80;&lt;br&gt;
&lt;br&gt;
Hardware:&lt;br&gt;
Core i3 (Haswell)&lt;br&gt;
Gigabyte z87n wifi&lt;br&gt;
Radeon 7750&lt;br&gt;
SDD &amp;amp; HDD&lt;br&gt;
ATX PSU&lt;br&gt;
&lt;br&gt;
Back:&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/Foto%201.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/Foto%202-2.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
Bottom fan:&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/Foto%203.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;br&gt;
Mainboard mounting:&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/1.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/2.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/3.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/4.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/5.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;br&gt;
New back:&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/Foto%20Aussen.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
Top view:&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/Innen.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;br&gt;
Core parts mounted + additional top fan:&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/SSD.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/Seite.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;br&gt;
working on the back:&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/Anpassung1.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/Anpassung-2.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;br&gt;
painting case red:&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/MP%20rot.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;br&gt;
hand crafted bottom intake:&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/unten/Foto%201.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/unten/Foto%202.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/unten/Foto3.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/unten/Foto%204.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/unten/Foto%205.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;br&gt;
almost finished:&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/final/1.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/final/2.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/final/4.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/final/5.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/final/6.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;br&gt;
Idle temperatures:&lt;br&gt;
&lt;img src=&quot;http://venom.deeppain.com/Bilder/MacPro2013/final/temp.jpg&quot; border=&quot;0&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;br&gt;
Hope you like it &lt;img src=&quot;http://www.tonymacx86.com/images/smilies/icon_e_wink.gif&quot; border=&quot;0&quot; alt=&quot;&quot; title=&quot;wink&quot; class=&quot;inlineimg&quot;&gt;
						&lt;/blockquote&gt;
					&lt;/div&gt;

					
				&lt;/div&gt;
			&lt;/div&gt;
&lt;div class=&quot;after_content&quot;&gt;

			
			
				
				
				&lt;blockquote class=&quot;postcontent lastedited&quot;&gt;
					
						Last edited by Dschijn; 01-15-2014 at &lt;span class=&quot;time&quot;&gt;08:14 AM&lt;/span&gt;.
					
					
				&lt;/blockquote&gt;
				
				
				
				
					
				
			
			
&lt;/div&gt;
			
		&lt;/div&gt;
	&lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;

&lt;div id=&quot;everything&quot;&gt;

	&lt;div class=&quot;body_wrapper&quot;&gt;














&lt;div id=&quot;postlist&quot; class=&quot;postlist restrain&quot;&gt;
	

	
		&lt;ol id=&quot;posts&quot; class=&quot;posts&quot; start=&quot;1&quot;&gt;
			
&lt;li class=&quot;postbitlegacy postbitim postcontainer old&quot; id=&quot;post_739254&quot;&gt;



&lt;div class=&quot;the_whole_post&quot;&gt;
	
	&lt;div class=&quot;postdetails&quot;&gt;
		
		&lt;div class=&quot;postbody&quot;&gt;

&lt;div class=&quot;postrow has_after_content&quot;&gt;

				


						
							
							
						
						
				&lt;div class=&quot;content&quot;&gt;
					&lt;div id=&quot;post_message_739254&quot;&gt;
						&lt;blockquote class=&quot;postcontent restore &quot;&gt;


				&lt;br&gt;
				
							Obviously, I'm not the only one that didn't want to wait for the new Mac Pro to become available, but I decided on a Corsair 650D case and went from there. &lt;img src=&quot;http://www.tonymacx86.com/images/smilies/icon_lol.gif&quot; border=&quot;0&quot; alt=&quot;&quot; title=&quot;&quot; class=&quot;inlineimg&quot;&gt;
						&lt;/blockquote&gt;
					&lt;/div&gt;

					
				&lt;/div&gt;
			&lt;/div&gt;

			
		&lt;/div&gt;
	&lt;/div&gt;
		


&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;

&lt;div id=&quot;everything&quot;&gt;

	&lt;div class=&quot;body_wrapper&quot;&gt;














&lt;div id=&quot;postlist&quot; class=&quot;postlist restrain&quot;&gt;
	

	
		&lt;ol id=&quot;posts&quot; class=&quot;posts&quot; start=&quot;1&quot;&gt;
			
&lt;li class=&quot;postbitlegacy postbitim postcontainer old&quot; id=&quot;post_740619&quot;&gt;



&lt;div class=&quot;the_whole_post&quot;&gt;
	
	&lt;div class=&quot;postdetails&quot;&gt;
		
		&lt;div class=&quot;postbody&quot;&gt;

&lt;div class=&quot;postrow&quot;&gt;

				


						
							
							
						
						
				&lt;div class=&quot;content&quot;&gt;
					&lt;div id=&quot;post_message_740619&quot;&gt;
						&lt;blockquote class=&quot;postcontent restore &quot;&gt;


				&lt;br&gt;
				
							if anyone can upload a build guide to this that would be great wanted to know how to cut the circle at the top so smooth.
						&lt;/blockquote&gt;
					&lt;/div&gt;

					
				&lt;/div&gt;
			&lt;/div&gt;

			
		&lt;/div&gt;
	&lt;/div&gt;
		
	
&lt;/div&gt;
&lt;/li&gt;

&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;postbody&quot;&gt;

&lt;div class=&quot;postrow has_after_content&quot;&gt;

				


						
							
							
						
						
				&lt;div class=&quot;content&quot;&gt;
					&lt;div id=&quot;post_message_744641&quot;&gt;
						&lt;blockquote class=&quot;postcontent restore &quot;&gt;


				&lt;br&gt;
				
							Best build ever &lt;img src=&quot;http://www.tonymacx86.com/images/smilies/headbang.gif&quot; border=&quot;0&quot; alt=&quot;&quot; title=&quot;&quot; class=&quot;inlineimg&quot;&gt;&lt;br&gt;
&lt;br&gt;
The only thing I'm a bit worried about it the chipset temperature, is that accurate? With those two fans I'm a bit surprised the airflow isn't better than it is, maybe it's because of the mesh on the backside? If it's sucking in air through that mesh it will probably just give airflow from the backside to the top, not all the way from the bottom - covering up the backside more might give a lot lower chipset temperatures.&lt;br&gt;
&lt;br&gt;
Anyway, great idea and great implementation, 10/10 &lt;img src=&quot;http://www.tonymacx86.com/images/smilies/icon_e_biggrin.gif&quot; border=&quot;0&quot; alt=&quot;&quot; title=&quot;grin&quot; class=&quot;inlineimg&quot;&gt;
						&lt;/blockquote&gt;
					&lt;/div&gt;

					
				&lt;/div&gt;
			&lt;/div&gt;
&lt;div class=&quot;after_content&quot;&gt;

			
			
				
				
				&lt;blockquote class=&quot;postcontent lastedited&quot;&gt;
					
						Last edited by Stingray454; 01-15-2014 at &lt;span class=&quot;time&quot;&gt;11:57 AM&lt;/span&gt;.
					
					
				&lt;/blockquote&gt;
				
				
				
				
					
				
			
			
&lt;/div&gt;
			
		&lt;/div&gt;
	&lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;

&lt;div id=&quot;everything&quot;&gt;

	&lt;div class=&quot;body_wrapper&quot;&gt;














&lt;div id=&quot;postlist&quot; class=&quot;postlist restrain&quot;&gt;
	

	
		&lt;ol id=&quot;posts&quot; class=&quot;posts&quot; start=&quot;1&quot;&gt;
			
&lt;li class=&quot;postbitlegacy postbitim postcontainer old&quot; id=&quot;post_745341&quot;&gt;



&lt;div class=&quot;the_whole_post&quot;&gt;
	
	&lt;div class=&quot;postdetails&quot;&gt;
		
		&lt;div class=&quot;postbody&quot;&gt;

&lt;div class=&quot;postrow&quot;&gt;

				


						
							
							
						
						
				&lt;div class=&quot;content&quot;&gt;
					&lt;div id=&quot;post_message_745341&quot;&gt;
						&lt;blockquote class=&quot;postcontent restore &quot;&gt;


				&lt;br&gt;
				
							&lt;div class=&quot;bbcode_container&quot;&gt;
	&lt;div class=&quot;bbcode_quote&quot;&gt;
		&lt;div class=&quot;quote_container&quot;&gt;
			
			
				&lt;div class=&quot;bbcode_postedby&quot;&gt;
					&lt;img src=&quot;http://www.tonymacx86.com/images/misc/quote_icon.png&quot; alt=&quot;Quote&quot;&gt; Originally Posted by &lt;strong&gt;sascha288&lt;/strong&gt;
					&lt;a href=&quot;http://www.tonymacx86.com/mac-pro-mods/120757-mac-pro-late-2013-replica-post740953.html#post740953&quot; rel=&quot;nofollow&quot;&gt;&lt;img class=&quot;inlineimg&quot; src=&quot;http://www.tonymacx86.com/images/buttons/viewpost-right.png&quot; alt=&quot;View Post&quot;&gt;&lt;/a&gt;
				&lt;/div&gt;
				&lt;p class=&quot;message&quot;&gt;:-) My System!!&lt;/p&gt;
			
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;Congratulation, well done! Super g'macht, Danke dafür &lt;img src=&quot;http://www.tonymacx86.com/images/smilies/icon_lol.gif&quot; border=&quot;0&quot; alt=&quot;&quot; title=&quot;&quot; class=&quot;inlineimg&quot;&gt;
						&lt;/blockquote&gt;
					&lt;/div&gt;

					
				&lt;/div&gt;
			&lt;/div&gt;

			
		&lt;/div&gt;
	&lt;/div&gt;
		
	
&lt;/div&gt;
&lt;/li&gt;

&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;

&lt;div id=&quot;everything&quot;&gt;

	&lt;div class=&quot;body_wrapper&quot;&gt;














&lt;div id=&quot;postlist&quot; class=&quot;postlist restrain&quot;&gt;
	

	
		&lt;ol id=&quot;posts&quot; class=&quot;posts&quot; start=&quot;1&quot;&gt;
			
&lt;li class=&quot;postbitlegacy postbitim postcontainer old&quot; id=&quot;post_746154&quot;&gt;



&lt;div class=&quot;the_whole_post&quot;&gt;
	
	&lt;div class=&quot;postdetails&quot;&gt;
		
		&lt;div class=&quot;postbody&quot;&gt;

&lt;div class=&quot;postrow&quot;&gt;

				


						
							
							
						
						
				&lt;div class=&quot;content&quot;&gt;
					&lt;div id=&quot;post_message_746154&quot;&gt;
						&lt;blockquote class=&quot;postcontent restore &quot;&gt;


				&lt;br&gt;
				
							Hi! thanks for the praise! &lt;br&gt;
sorry for my very bad english ... &lt;br&gt;
yes, that's power supply is over the graphics card! &lt;br&gt;
it is now with case, no problem
						&lt;/blockquote&gt;
					&lt;/div&gt;

					
				&lt;/div&gt;
			&lt;/div&gt;

			
		&lt;/div&gt;
	&lt;/div&gt;
		
	
&lt;/div&gt;
&lt;/li&gt;

&lt;/ol&gt;&lt;/div&gt; 








&lt;/div&gt;


&lt;/div&gt;&lt;/div&gt;

</description>
<title>
Mac Pro (late 2013) replica inside a real trashcan
</title>
</item>
<item>
<link>
http://simurai.com/projects/letter-heads/
</link>
<description>
&lt;div&gt;
	
    
	&lt;div id=&quot;letters&quot; class=&quot;out&quot;&gt;
		&lt;p id=&quot;front&quot;&gt;The Letter-HEADS&lt;/p&gt;
	&lt;/div&gt;
	
	
	&lt;div id=&quot;people&quot;&gt;
		&lt;div id=&quot;mr&quot;&gt;
			&lt;ul id=&quot;leds-mr&quot; class=&quot;leds&quot;&gt;
				&lt;li&gt;
				&lt;li&gt;
				&lt;li&gt;
				&lt;li&gt;
				&lt;li&gt;
			&lt;/ul&gt;
			&lt;div class=&quot;hint&quot;&gt;&lt;img src=&quot;http://simurai.com/projects/letter-heads/mr_hint.png&quot; alt=&quot;Click me!&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div id=&quot;ms&quot;&gt;
			&lt;ul id=&quot;leds-ms&quot; class=&quot;leds&quot;&gt;
				&lt;li&gt;
				&lt;li&gt;
				&lt;li&gt;
				&lt;li&gt;
				&lt;li&gt;
			&lt;/ul&gt;
			&lt;div class=&quot;hint&quot;&gt;&lt;img src=&quot;http://simurai.com/projects/letter-heads/ms_hint.png&quot; alt=&quot;Ladies first?&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
	
    
    
    &lt;div id=&quot;tweet&quot;&gt;
        &lt;a id=&quot;tweet-btn&quot; href=&quot;http://twitter.com/share?text=Meet%20the%20Letter-Heads&amp;amp;via=simurai&quot; target=&quot;_blank&quot;&gt;Tweet this!&lt;/a&gt;
    &lt;/div&gt;
	   		  
	
	
	&lt;div id=&quot;light&quot;&gt;
		
		&lt;img id=&quot;bg&quot; src=&quot;http://simurai.com/projects/letter-heads/bg.jpg&quot; alt=&quot;&quot;&gt;
	&lt;/div&gt;


	
	
	
	&lt;div id=&quot;footer&quot;&gt;	    
	    
	    &lt;nav class=&quot;links&quot;&gt;
	        &lt;a href=&quot;http://simurai.com/post/3782105679/letter-heads&quot;&gt;About&lt;/a&gt;
	    &lt;/nav&gt;
	    
	    &lt;img class=&quot;screenshot&quot; src=&quot;http://simurai.com/projects/letter-heads/screenshot.jpg&quot; alt=&quot;The Letter-HEADS&quot;&gt;
	    
	    &lt;div class=&quot;social&quot;&gt;
	        
	        &lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;&gt;Tweet&lt;/a&gt;
	        
	        
	        &lt;plusone size=&quot;medium&quot;&gt;&lt;/plusone&gt;            
	        
	        
	    &lt;/div&gt;
	    
	    &lt;nav class=&quot;stamp&quot;&gt;
	        
	    &lt;/nav&gt;
	    
	&lt;/div&gt;
	
	
	
	

	&lt;audio id=&quot;audio_gender_lr&quot;&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/gender_lr.ogg&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/gender_lr.mp3&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/gender_lr.wav&quot;&gt;&lt;/source&gt;&lt;/audio&gt;
	&lt;audio id=&quot;audio_gender_rl&quot;&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/gender_rl.ogg&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/gender_rl.mp3&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/gender_rl.wav&quot;&gt;&lt;/source&gt;&lt;/audio&gt;

	&lt;audio id=&quot;audio_step_1&quot;&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_1.ogg&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_1.mp3&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_1.wav&quot;&gt;&lt;/source&gt;&lt;/audio&gt;
	&lt;audio id=&quot;audio_step_2&quot;&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_2.ogg&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_2.mp3&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_2.wav&quot;&gt;&lt;/source&gt;&lt;/audio&gt;
	&lt;audio id=&quot;audio_step_3&quot;&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_3.ogg&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_3.mp3&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_3.wav&quot;&gt;&lt;/source&gt;&lt;/audio&gt;
	&lt;audio id=&quot;audio_step_4&quot;&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_4.ogg&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_4.mp3&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_4.wav&quot;&gt;&lt;/source&gt;&lt;/audio&gt;
	&lt;audio id=&quot;audio_step_5&quot;&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_5.ogg&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_5.mp3&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_5.wav&quot;&gt;&lt;/source&gt;&lt;/audio&gt;
	&lt;audio id=&quot;audio_step_6&quot;&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_6.ogg&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_6.mp3&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_6.wav&quot;&gt;&lt;/source&gt;&lt;/audio&gt;
	&lt;audio id=&quot;audio_step_7&quot;&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_7.ogg&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_7.mp3&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/step_7.wav&quot;&gt;&lt;/source&gt;&lt;/audio&gt;

	&lt;audio id=&quot;audio_frame&quot;&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/frame.ogg&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/frame.mp3&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/frame.wav&quot;&gt;&lt;/source&gt;&lt;/audio&gt;
	&lt;audio id=&quot;audio_morph&quot;&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/morph.ogg&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/morph.mp3&quot;&gt;&lt;/source&gt;&lt;source src=&quot;http://simurai.com/projects/letter-heads/audio/morph.wav&quot;&gt;&lt;/source&gt;&lt;/audio&gt;    
 
 
 
 	
	
	
	
	
	
	


	

&lt;/div&gt;


</description>
<title>
Letter-heads
</title>
</item>
</channel>
</rss>
