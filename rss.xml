<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0'>
<channel>
<generator>
clj-rss
</generator>
<link>
https://news.ycombinator.com
</link>
<title>
myread
</title>
<description>
myread
</description>
<item>
<link>
http://gcc.gnu.org/ml/gcc/2014-01/msg00176.html
</link>
<description>
&lt;div&gt;&lt;body&gt;



&lt;p&gt;This is the mail archive of the 
&lt;tt&gt;gcc@gcc.gnu.org&lt;/tt&gt;
mailing list for the &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC project&lt;/a&gt;.






&lt;/p&gt;









&lt;ul&gt;
&lt;li&gt;&lt;em&gt;From&lt;/em&gt;: esr at thyrsus dot com (Eric S. Raymond)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To&lt;/em&gt;: rms at gnu dot org, gcc at gcc dot gnu dot org, emacs-devel at gnu dot org&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Date&lt;/em&gt;: Tue, 21 Jan 2014 15:19:49 -0500 (EST)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subject&lt;/em&gt;: clang and FSF's strategy&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authentication-results&lt;/em&gt;: sourceware.org; auth=none&lt;/li&gt;
&lt;/ul&gt;





&lt;pre&gt;David Kastrup's recent question on emacs-devel motivates me to bring
up a larger related question I've been meaning to open for a while: Are the
FSF's goals best served by continuing to technically restrict GCC?

This is a question in which I have some positive stake.  Yes, I
continue to be opposed to the FSF's style of propaganda exactly
because I think it hinders an end goal - a software ecosystem that is
open-source and user-controlled - that I agree with and have worked
hard to achieve. On the other hand, I have always said that the FSF's
artifacts are its best artillery, and GCC is certainly one of the
biggest guns in that arsenal.

I want GCC to do what the FSF wants it to do - promote freedom and
openness, erode proprietary control, prevent vendor lock-in of
development toolchains. I think it is time to question whether the
anti-plugins policy is still the best way to accomplish this.

What gives this question point is the very existence of clang.  The
clang developers aren't shy about saying in public that they regard
the FSF's anti-plugin policy as obstructive and that this is a major
motivation for their work.  And they're making excellent progress;
clang is a production-quality tool today, not yet as mature as GCC but
with better features in some areas - its error messages, in particular
are *far* superior.

The clang developers very carefully do *not* say that they aim to make
GCC obsolete and relegate it to the dustbin of discarded tech.  But I
believe that is unmistakably among their goals, and I judge that they
are a credible threat to GCCs's dominance in the 3- to 5-year
timeframe.

It might be that my goals would actually be advanced if clang were to
kick GCC off the top of the heap.  That is, there is at least a
possible world in which a serious hit to FSF's prestige would decrease
its ability to hinder progress through PR I have made no secret of
considering ham-handed and counterproductive.

For the present I choose to ignore this possibility. It seems better
to me to promote as vigorous as possible a competitive race between 
GCC and clang, so that both will improve and the the aggregate position
of open-source toolchains will strengthen.

Therefore, I point out that FSF can no longer prevent proprietary
vendors from plugging into a free compiler to improve their tools.
That horse has left the barn; the strategic goal of the anti-plugin
policy has been definitively busted.

I also think it bears noticing that nobody outside of Microsoft seems
to particularly want to write proprietary compilers any more.  GCC won
its war; the cost and time-to-market advantages of hooking into
open-source toolchains are now so widely understood that new processor
designs support them as a matter of course.

Wouldn't it make sense, then, to entirely drop the factoring
restrictions from GCC so it can compete for developer attention more
effectively with clang?

Before clang existed, back when GCC had a near monopoly in its
competitive space, there might have been a functional case for those
restrictions. Reasonable people may differ on that; there's no point
in arguing it retrospectively. Now, I submit, they have become a pointless
gesture that serves only to hinder GCC development abd increase
clang's competitive advantage.

GCC has a lot of strengths to play from, most notably the maturity of
its multiplatform and cross-development support.  I urge the FSF to
fully free the code - drop the policy restrictions, encourage a
flourishing ecosystem of surrounding plugins.  Let GCC, clang, and
other alternatives compete for attention on pure technical merit.

I think the last fifteen years have demonstrated that in this sort of
competition, the proprietary vendors will eat dust if they try to
outcompete open-source tools on their own ground. Furthermore, they've
learned this the hard way, and are quite unlikely to try.  There are
less risky uses for their NRE.

In some sense I don't really care who wins.  Either GCC or clang
will serve my needs. I do prefer that both tools be as excellent
as possible.  And it would be nice if the FSF were to demonstrate that
it can recognize changed conditions and move with the times.
-- 
		&amp;lt;a href=&quot;&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.catb.org/~esr/&amp;amp;quot&quot;&gt;http://www.catb.org/~esr/&amp;amp;quot&lt;/a&gt;;&amp;gt;Eric S. Raymond&amp;lt;/a&amp;gt;

There's a tendency today to absolve individuals of
moral responsibility and treat them as victims of
social circumstance.  You buy that, you pay with your
soul.
		-Tom Robbins, Still Life with Woodpecker

&lt;/pre&gt;
















&lt;/body&gt;
&lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;body&gt;



&lt;p&gt;This is the mail archive of the 
&lt;tt&gt;gcc@gcc.gnu.org&lt;/tt&gt;
mailing list for the &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC project&lt;/a&gt;.






&lt;/p&gt;









&lt;ul&gt;
&lt;li&gt;&lt;em&gt;From&lt;/em&gt;: David Kastrup &amp;lt;dak at gnu dot org&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To&lt;/em&gt;: gcc at gcc dot gnu dot org&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cc&lt;/em&gt;: emacs-devel at gnu dot org&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Date&lt;/em&gt;: Wed, 22 Jan 2014 01:07:12 +0100&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subject&lt;/em&gt;: Re: clang and FSF's strategy&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authentication-results&lt;/em&gt;: sourceware.org; auth=none&lt;/li&gt;
&lt;li&gt;&lt;em&gt;References&lt;/em&gt;: &amp;lt;20140121201949 dot 21DE1380522 at snark dot thyrsus dot com&amp;gt;&lt;/li&gt;
&lt;/ul&gt;





&lt;pre&gt;esr@thyrsus.com (Eric S. Raymond) writes:

&amp;gt; David Kastrup's recent question on emacs-devel motivates me to bring
&amp;gt; up a larger related question I've been meaning to open for a while:
&amp;gt; Are the FSF's goals best served by continuing to technically restrict
&amp;gt; GCC?

I don't think that's even a sensible question.  The point of the GPL is
to promote expansion of Free Software, and the tool it uses for doing so
is by covering licensing of &quot;the work as a whole&quot;.  When providing full
technical capabilities for accessing the functionality of of program
without creating a larger whole in the process, we are basically down to
the LGPL.

So most definitely the FSF's goals are best served by continuing to
technically restrict GCC.  If there is any question, the question is
rather _what_ restrictions serve its interests more than it impedes
them.  Since any lifted restrictions cannot easily be reinstated, it
makes sense to be conservative.

&amp;gt; This is a question in which I have some positive stake.  Yes, I
&amp;gt; continue to be opposed to the FSF's style of propaganda exactly
&amp;gt; because I think it hinders an end goal - a software ecosystem that is
&amp;gt; open-source and user-controlled - that I agree with and have worked
&amp;gt; hard to achieve.

You are crossposting to two public project lists of the GNU project with
inflammatory language and mischaracterizations.  You have been involved
with the GNU project long enough to be well aware that this kind of
crowbar approach does not lead to much more than headlines about Free
Software infighting.

&amp;gt; The clang developers very carefully do *not* say that they aim to make
&amp;gt; GCC obsolete and relegate it to the dustbin of discarded tech.

Like most Free Software, GCC started out in a state where its technical
competitiveness placed it in the dustbin.  And that's a state the GNU
project prefers over that of it being an enabling and seminal part of
proprietary software &quot;ecosystems&quot;.  That's the reason GNU software is
licensed under copyleft rather than permissive licenses, and the
criterion of popularity should not render that choice irrelevant.

There is leeway for making and balancing individual decisions according
to individual tradeoffs.

Your black-and-white and all-or-nothing rhetoric and confrontational
style is not helpful for that.

&amp;gt; Therefore, I point out that FSF can no longer prevent proprietary
&amp;gt; vendors from plugging into a free compiler to improve their tools.

And we could not prevent proprietary vendors from plugging into
proprietary compilers to improve their tools, either.  And things like
Microsoft Visual C++ and the Intel compilers are quite competitive in
technical respects.  The only thing we ever have been able to prevent
people to do is them plugging into _our_ free compiler.

&amp;gt; That horse has left the barn;

Lots of horses have left the barn.  That's irrelevant as long as it is
not the horse we are sitting on.

&amp;gt; I also think it bears noticing that nobody outside of Microsoft seems
&amp;gt; to particularly want to write proprietary compilers any more.

Huh?  Intel still writes proprietary compilers, basically every GPU
vendor boosts his own proprietary compiler.

&amp;gt; In some sense I don't really care who wins.  Either GCC or clang will
&amp;gt; serve my needs. I do prefer that both tools be as excellent as
&amp;gt; possible.  And it would be nice if the FSF were to demonstrate that it
&amp;gt; can recognize changed conditions and move with the times.

The whole point of the FSF was _not_ to &quot;move with the times&quot;.  If you
would be willing to forego your popularity contest based approach, you
might have a better chance of getting actual adjustments in the details.

But at the core level, I see a fundamental miscomprehension about the
contexts in which strong copyleft and the GNU project operate and make
sense.  As long as you don't come to terms with that, I don't see this
discussion leading anywhere.  And that's not even taking into account
that key players tend to be less than amused about such a
confrontational approach.

-- 
David Kastrup

&lt;/pre&gt;






&lt;ul&gt;&lt;li&gt;&lt;strong&gt;References&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a name=&quot;00176&quot; href=&quot;http://gcc.gnu.org/ml/gcc/2014-01/msg00176.html&quot;&gt;clang and FSF's strategy&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;









&lt;/body&gt;
&lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;body&gt;



&lt;p&gt;This is the mail archive of the 
&lt;tt&gt;gcc@gcc.gnu.org&lt;/tt&gt;
mailing list for the &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC project&lt;/a&gt;.






&lt;/p&gt;









&lt;ul&gt;
&lt;li&gt;&lt;em&gt;From&lt;/em&gt;: Alexandre Oliva &amp;lt;oliva at gnu dot org&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To&lt;/em&gt;: esr at thyrsus dot com (Eric S. Raymond)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cc&lt;/em&gt;: rms at gnu dot org, gcc at gcc dot gnu dot org, emacs-devel at gnu dot org&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Date&lt;/em&gt;: Tue, 21 Jan 2014 22:50:12 -0200&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subject&lt;/em&gt;: Re: clang and FSF's strategy&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authentication-results&lt;/em&gt;: sourceware.org; auth=none&lt;/li&gt;
&lt;li&gt;&lt;em&gt;References&lt;/em&gt;: &amp;lt;20140121201949 dot 21DE1380522 at snark dot thyrsus dot com&amp;gt;&lt;/li&gt;
&lt;/ul&gt;





&lt;pre&gt;On Jan 21, 2014, esr@thyrsus.com (Eric S. Raymond) wrote:

&amp;gt; I think it is time to question whether the anti-plugins policy is
&amp;gt; still the best way to accomplish this.

Err...  Excuse me, but what anti-plugins policy are you talking about?

The runtime license exception designed to make room for GCC plugins
without endangering its copyleft is almost 5 years old!

Did you feel so aligned with clang's FSF-disparaging propaganda that you
failed to check the facts, or are you being intentionally specious?


That GCC plugin interface is not sufficiently stable for major
uncoordinated developments by third-parties is just as true as that
Linux's module interface is constantly changing, and complaints about
its lack of stability in it are often responded with such phrases as
&amp;#xE2;contribute your driver and we'll even help you keep it up-to-date&amp;#xE2;.

If you were to applaud one while voicing objections to the other,
someone might even get the idea you're using double standards ;-)

-- 
Alexandre Oliva, freedom fighter    &lt;a rel=&quot;nofollow&quot; href=&quot;http://FSFLA.org/~lxoliva/&quot;&gt;http://FSFLA.org/~lxoliva/&lt;/a&gt;
You must be the change you wish to see in the world. -- Gandhi
Be Free! -- &lt;a rel=&quot;nofollow&quot; href=&quot;http://FSFLA.org/&quot;&gt;http://FSFLA.org/&lt;/a&gt;   FSF Latin America board member
Free Software Evangelist     Red Hat Brazil Toolchain Engineer

&lt;/pre&gt;






&lt;ul&gt;&lt;li&gt;&lt;strong&gt;References&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a name=&quot;00176&quot; href=&quot;http://gcc.gnu.org/ml/gcc/2014-01/msg00176.html&quot;&gt;clang and FSF's strategy&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;









&lt;/body&gt;
&lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;body&gt;



&lt;p&gt;This is the mail archive of the 
&lt;tt&gt;gcc@gcc.gnu.org&lt;/tt&gt;
mailing list for the &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC project&lt;/a&gt;.






&lt;/p&gt;









&lt;ul&gt;
&lt;li&gt;&lt;em&gt;From&lt;/em&gt;: Stefan Monnier &amp;lt;monnier at iro dot umontreal dot ca&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To&lt;/em&gt;: esr at thyrsus dot com (Eric S. Raymond)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cc&lt;/em&gt;: rms at gnu dot org,  gcc at gcc dot gnu dot org,  emacs-devel at gnu dot org&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Date&lt;/em&gt;: Tue, 21 Jan 2014 20:31:04 -0500&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subject&lt;/em&gt;: Re: clang and FSF's strategy&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authentication-results&lt;/em&gt;: sourceware.org; auth=none&lt;/li&gt;
&lt;li&gt;&lt;em&gt;References&lt;/em&gt;: &amp;lt;20140121201949 dot 21DE1380522 at snark dot thyrsus dot com&amp;gt;&lt;/li&gt;
&lt;/ul&gt;





&lt;pre&gt;&amp;gt; up a larger related question I've been meaning to open for a while: Are the
&amp;gt; FSF's goals best served by continuing to technically restrict GCC?

Let me repeat: please stop discussing such things on this list.
There are things like gnu.misc.discuss for that.


        Stefan

&lt;/pre&gt;






&lt;ul&gt;&lt;li&gt;&lt;strong&gt;References&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a name=&quot;00176&quot; href=&quot;http://gcc.gnu.org/ml/gcc/2014-01/msg00176.html&quot;&gt;clang and FSF's strategy&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;









&lt;/body&gt;
&lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;body&gt;



&lt;p&gt;This is the mail archive of the 
&lt;tt&gt;gcc@gcc.gnu.org&lt;/tt&gt;
mailing list for the &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC project&lt;/a&gt;.






&lt;/p&gt;









&lt;ul&gt;
&lt;li&gt;&lt;em&gt;From&lt;/em&gt;: Ian Lance Taylor &amp;lt;iant at google dot com&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To&lt;/em&gt;: &quot;Eric S. Raymond&quot; &amp;lt;esr at thyrsus dot com&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cc&lt;/em&gt;: rms at gnu dot org, GCC Development &amp;lt;gcc at gcc dot gnu dot org&amp;gt;, emacs-devel at gnu dot org&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Date&lt;/em&gt;: Tue, 21 Jan 2014 17:31:43 -0800&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subject&lt;/em&gt;: Re: clang and FSF's strategy&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authentication-results&lt;/em&gt;: sourceware.org; auth=none&lt;/li&gt;
&lt;li&gt;&lt;em&gt;References&lt;/em&gt;: &amp;lt;20140121201949 dot 21DE1380522 at snark dot thyrsus dot com&amp;gt;&lt;/li&gt;
&lt;/ul&gt;





&lt;pre&gt;On Tue, Jan 21, 2014 at 12:19 PM, Eric S. Raymond &amp;lt;esr@thyrsus.com&amp;gt; wrote:
&amp;gt;
&amp;gt; Wouldn't it make sense, then, to entirely drop the factoring
&amp;gt; restrictions from GCC so it can compete for developer attention more
&amp;gt; effectively with clang?
&amp;gt;
&amp;gt; Before clang existed, back when GCC had a near monopoly in its
&amp;gt; competitive space, there might have been a functional case for those
&amp;gt; restrictions. Reasonable people may differ on that; there's no point
&amp;gt; in arguing it retrospectively. Now, I submit, they have become a pointless
&amp;gt; gesture that serves only to hinder GCC development abd increase
&amp;gt; clang's competitive advantage.
&amp;gt;
&amp;gt; GCC has a lot of strengths to play from, most notably the maturity of
&amp;gt; its multiplatform and cross-development support.  I urge the FSF to
&amp;gt; fully free the code - drop the policy restrictions, encourage a
&amp;gt; flourishing ecosystem of surrounding plugins.  Let GCC, clang, and
&amp;gt; other alternatives compete for attention on pure technical merit.

I'm sympathetic to our comments regarding GCC vs. clang.  But I'm not
sure I grasp your proposed solution.  GCC does support plugins, and
has supported them for a few releases now.

GCC plugins have what turns out to be a significant defect: the plugin
interface simply exposes GCC internals, and as such is not stable
across releases.  I pushed for plugins in GCC, and I thought this
unstable interface would be OK, but I was wrong.  For general plugins
to be useful, we need a more stable interface.

But that is a technical issue, not a licensing issue.  You are talking
about licensing issues.  Do you think the licensing requirements on
plugins are too onerous?

Because of the non-standard interface, the most effective way for
people to write plugins for GCC today is to use something like MELT
(&lt;a rel=&quot;nofollow&quot; href=&quot;http://gcc-melt.org&quot;&gt;http://gcc-melt.org&lt;/a&gt;) or the GCC Python plugin
(&lt;a rel=&quot;nofollow&quot; href=&quot;https://fedorahosted.org/gcc-python-plugin/&quot;&gt;https://fedorahosted.org/gcc-python-plugin/&lt;/a&gt;).  These provide a
somewhat more standard interface across releases.

Ideally we would develop a standard interface for C as well.  There
have been some efforts along those lines but as far as I know none of
them have been committed to the tree.

Ian

&lt;/pre&gt;






&lt;ul&gt;&lt;li&gt;&lt;strong&gt;References&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a name=&quot;00176&quot; href=&quot;http://gcc.gnu.org/ml/gcc/2014-01/msg00176.html&quot;&gt;clang and FSF's strategy&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;









&lt;/body&gt;
&lt;/div&gt;
</description>
<title>
Eric S. Raymond - clang and FSF's strategy
</title>
</item>
<item>
<link>
item?id=7102468
</link>
<description>

</description>
<title>
13 comments
</title>
</item>
<item>
<link>
item?id=7103184
</link>
<description>

</description>
<title>
discuss
</title>
</item>
<item>
<link>
item?id=7102301
</link>
<description>

</description>
<title>
35 comments
</title>
</item>
<item>
<link>
http://www.google.com/get/videoqualityreport/
</link>
<description>
&lt;div&gt;
                  
                  
                  &lt;div class=&quot;animation&quot;&gt;
                    &lt;div class=&quot;light_dots&quot;&gt;
                      &lt;img alt=&quot;&quot; class=&quot;light_dot&quot; id=&quot;lightdot01&quot; width=&quot;10&quot;&gt; &lt;img alt=&quot;&quot; class=&quot;light_dot&quot; id=&quot;lightdot02&quot; width=&quot;10&quot;&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;pistons&quot;&gt;
                      &lt;img alt=&quot;&quot; class=&quot;piston&quot; id=&quot;piston01&quot; width=&quot;23&quot;&gt; &lt;img alt=&quot;&quot; class=&quot;piston&quot; id=&quot;piston02&quot; width=&quot;23&quot;&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                  &lt;div class=&quot;section_text_content&quot;&gt;
                    
                    &lt;p class=&quot;section_text_content_title&quot;&gt;
                      Finally, the video must travel into your home.
                    &lt;/p&gt;
                    &lt;p class=&quot;section_text_content_copy&quot;&gt;
                      In addition to congestion in your ISP&amp;#x2019;s network, your video performance can
                      also be affected by the size of the ISP&amp;#x2019;s connection into your home, your
                      wi-fi setup, and other in-home factors such as the number of connected
                      devices.
                    &lt;/p&gt;
                    
                  &lt;/div&gt;
                &lt;/div&gt;
</description>
<title>
Google Video Quality Report
</title>
</item>
</channel>
</rss>
