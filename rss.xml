<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0'>
<channel>
<generator>
clj-rss
</generator>
<link>
https://news.ycombinator.com
</link>
<title>
myread
</title>
<description>
myread
</description>
<item>
<link>
https://github.com/trevorlinton/webkit.js
</link>
<description>
&lt;div&gt;&lt;article class=&quot;markdown-body entry-content&quot;&gt;

&lt;p&gt;An experimental port of WebKit (Specifically, webcore) to JavaScript aimed at running in both node.js and browsers. This is currently non-functional and is intended for developers and contributors.&lt;/p&gt;

&lt;h2&gt;
&lt;a name=&quot;goals&quot; class=&quot;anchor&quot; href=&quot;https://github.com/trevorlinton/webkit.js#goals&quot;&gt;&lt;/a&gt;Goals&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Produce a renderer in pure JavaScript that supports rendering to WebGL/Canvas contexts.&lt;/li&gt;
&lt;li&gt;Develop frameworks for image/webpage capturing and automated web testing (similar to PhantomJS).&lt;/li&gt;
&lt;li&gt;Develop a framework for prototyping CSS filters, HTML elements and attributes.&lt;/li&gt;
&lt;li&gt;Experimental harness for pure javascript rendering performance.&lt;/li&gt;
&lt;li&gt;Develop a javascript based browser in nodejs (just for fun).&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;
&lt;a name=&quot;status&quot; class=&quot;anchor&quot; href=&quot;https://github.com/trevorlinton/webkit.js#status&quot;&gt;&lt;/a&gt;Status&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Toolchain&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(BAD) Currently will only compile with Emscripten 1.8.2 on MacOSX in Xcode. &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Building&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(GOOD) Currently the latest nightly WebKit builds.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Linking&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(HORRIFIC) There are plenty of linking issues to be addressed; however visibility into this is minimal. Currently the system links but has quite a few unresolved symbols that will cause the renderer to crash. &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Tests&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(NON EXISTANT) Tests for javascript&amp;lt;-&amp;gt;C++ needs to be developed (non-layout related code)&lt;/li&gt;
&lt;li&gt;(BAD) Unit tests that integrate with WebKit's LayoutTests&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Supported Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(GOOD) Features that are &lt;em&gt;not&lt;/em&gt; currently supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accelerated 2D Canvas&lt;/li&gt;
&lt;li&gt;CSS Image Resolution&lt;/li&gt;
&lt;li&gt;CSS Image Orientation&lt;/li&gt;
&lt;li&gt;CSS3 Text&lt;/li&gt;
&lt;li&gt;Draggable Regions&lt;/li&gt;
&lt;li&gt;Encrypted Media&lt;/li&gt;
&lt;li&gt;Font Load Events&lt;/li&gt;
&lt;li&gt;Input Speech&lt;/li&gt;
&lt;li&gt;Audio&lt;/li&gt;
&lt;li&gt;Video&lt;/li&gt;
&lt;li&gt;Media Streams&lt;/li&gt;
&lt;li&gt;JavaScript Debugger / Inspector&lt;/li&gt;
&lt;li&gt;MHTML&lt;/li&gt;
&lt;li&gt;PDF/PDFKit&lt;/li&gt;
&lt;li&gt;Quota's&lt;/li&gt;
&lt;li&gt;Web Workers&lt;/li&gt;
&lt;li&gt;Web Sockets&lt;/li&gt;
&lt;li&gt;Shadow DOM&lt;/li&gt;
&lt;li&gt;Web Timing&lt;/li&gt;
&lt;li&gt;XSLT&lt;/li&gt;
&lt;li&gt;Native Widgets (IFRAME, Buttons, Text Boxes, etc.)&lt;/li&gt;
&lt;li&gt;Any Resource Loaders&lt;/li&gt;
&lt;li&gt;Font Rendering&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Frameworks&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(NON EXISTANT) Frameworks to easily perform common tasks with the renderer under various contexts.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(NON EXISTANT) Lots and lots of documentation, currently this is it.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;
&lt;a name=&quot;building&quot; class=&quot;anchor&quot; href=&quot;https://github.com/trevorlinton/webkit.js#building&quot;&gt;&lt;/a&gt;Building&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MacOS X Lion with Xcode 4+&lt;/li&gt;
&lt;li&gt;Emscripten 1.8.2+&lt;/li&gt;
&lt;li&gt;At least 16GB of free space (seriously)&lt;/li&gt;
&lt;li&gt;At least 4GB of RAM&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Building webkit.js step-by-step&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone the repo.&lt;/li&gt;
&lt;li&gt;Go to WebKitJS/tools and in a terminal run 
&lt;code&gt;sh
cp -pa ./WebKitJS/tools/EmscriptenXcode.xcplugin /Applications/Xcode.app/Contents/PlugIns/EmscriptenXcode.plugin 
vim /Applications/Xcode.app/Contents/PlugIns/EmscriptenXcode.xcplugin/Contents/Resources/GCC\ 4.5.xcspec 
&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Modify line 35 and set ExecPath to the path of em++ included with Emscripten.&lt;/li&gt;
&lt;li&gt;Then run:
&lt;code&gt;sh
vim WebKit/Source/WebCore/Configurations/Base.xcconfig
&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Replace &quot;EMSCRIPTEN_SYSTEM&quot; with the path to the system headers for emscripten.&lt;/li&gt;
&lt;li&gt;Open WebKit.xcworkspace in Xcode&lt;/li&gt;
&lt;li&gt;Change the Schema to &quot;WebcoreJS&quot; and make sure you build in Release (some systems Normal), not Debug. Hit Play and get some coffee or go do some chores.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your linking will most likely fail.  If so, just run the terminal command:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-sh&quot;&gt;&lt;pre&gt;em++ -r -isysroot /Path/To/Emscripten/1.8.2/system /Path/To/Your/WebKitBuild/*.o -std&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;c++11 -s &lt;span class=&quot;nv&quot;&gt;FULL_ES2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 -O2 -stdlib&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;libc++ -s &lt;span class=&quot;nv&quot;&gt;LINKABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 -o /Path/To/Your/WebKitBuild/webkit.js
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also create individual js files for each class in WebKit to ease debugging. Run:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-sh&quot;&gt;&lt;pre&gt;find . -name &lt;span class=&quot;s2&quot;&gt;&quot;*.o&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs -I &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; em++ -isysroot /Path/To/Your/Emscripten/1.8.2/system &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; -std&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;c++11 -s &lt;span class=&quot;nv&quot;&gt;FULL_ES2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 -O2 -stdlib&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;libc++ -s &lt;span class=&quot;nv&quot;&gt;LINKABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 -s &lt;span class=&quot;nv&quot;&gt;SIDE_MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 -o /Some/Folder/For/Output/&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;.js
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;
&lt;a name=&quot;contributing&quot; class=&quot;anchor&quot; href=&quot;https://github.com/trevorlinton/webkit.js#contributing&quot;&gt;&lt;/a&gt;Contributing&lt;/h2&gt;

&lt;p&gt;There's so much to be done any help is appreciated, at the moment I have a brutal wrapper/harness that can render DIV's with various colors to a WebGL surface in Chrome 32. It's not impressive but its a proof of concept.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getting around the code&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/WebKit/&lt;/code&gt; This is a modified version of Apple's official repo.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/WebKit/Source/WebCore&lt;/code&gt; This is where 90% of the work is done.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/WebKit/Source/WebCore/bindings/scripts&lt;/code&gt; This is an important folder where WebKit autogenerates bindings&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/WebKit/Source/WTF/&lt;/code&gt; is a cross-platform library for common tasks such as HashMaps, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/WebKit/Source/WTF/PlatformJS.h&lt;/code&gt; these are C++ pre-process settings for PLATFORM(JS)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/WebKit/Source/WebCore/Configurations/&lt;/code&gt; these are important compile-time configurations for WebCore&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/WebKitJS/&lt;/code&gt; When compiled the output of WebKit is placed in WebKitJS/webkit.js&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/WebKitJS/tools/&lt;/code&gt; Any helpful tools i've come across (only one for now...)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/WebKitJS/tools/cppfilter.js&lt;/code&gt;  This demangles C++ symbols contained in emscripten.js&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/WebKitJS/tools/EmscriptenXcode.plugin&lt;/code&gt; This is a Xcode plugin, and a temporary hack for using emscripten&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;It's important to know&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The code within the WebKit folder is pulled from upstream, be careful not to move any files, remove any files or heavily refactor any source file as it will cause headaches when merging.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Place a .gitignore on ./WebKit/WebKitBuild/ so you do not accidently commit build files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Enabling/disabling settings within the Configurations folder in WebCore will have a lot of consequences, most of the disabled features are disabled because there's no possible work around for including the platform specific code (it needs to be created in JS from scratch)&lt;/li&gt;
&lt;li&gt;A good amount of the bindings and code within the WebCore is auto generated from scripts, be careful when you have build errors to make sure you're not modifying a &quot;Derived Source&quot; otherwise you'll find your changes will be just over-written the next time the derived sources runs.&lt;/li&gt;
&lt;li&gt;The current webkit.js in WebKitJS folder was compiled exposing its symbols, this results in a heavy file size (current 44MB - 1/15/14). This can come down considerably once a framework/API is developed, tests are created and optimizations can become a priority.&lt;/li&gt;
&lt;li&gt;Do not modify code within ./WebKitJS/webkit.js or ./WebKitJS/debug/ these files are over-written when WebKit is built, so its somewhat pointless unless you're testing.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;What's Desperately Needed&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A build toolchain similar to GYP/gconfig. QtWebkit has one already, possibly re-map that.&lt;/li&gt;
&lt;li&gt;Create &quot;Debug&quot; and &quot;Release&quot; modes that allow for easier debugging. In addition creating anything that helps debug and spot problems easier.&lt;/li&gt;
&lt;li&gt;Scripts to auto-generate code with Emscripten JS Bindings (e.g., IDL generation, and some other bindings/scripts tasks)&lt;/li&gt;
&lt;li&gt;Integration of WTF library into WebCore&lt;/li&gt;
&lt;li&gt;Closer examination of optimization/best practices/guidance on Emscripten.&lt;/li&gt;
&lt;li&gt;Closer examination of optimization/best practices/guidance on compiling WebCore/renderer.&lt;/li&gt;
&lt;li&gt;Removal of &quot;oddity&quot; code (e.g., no mans land code, existing dead code, platform specific code)&lt;/li&gt;
&lt;li&gt;Start smaller with GYP and only develop one pass layout system from CSS/HTML/DOM code with minimal features and build up.&lt;/li&gt;
&lt;li&gt;Take each file one by one in ./webkitjs/debug/ and port?...&lt;/li&gt;
&lt;li&gt;Conversation, topics, discussions on best practices, methods and use cases&lt;/li&gt;
&lt;li&gt;Dependency and/or symbol graph that rebuilds automatically after a compile (expressed as a HTML doc?) The core reason for this is to visualize dependencies between classes, unresolved symbols still to be developed, and spot key integration points. This can be done by regex over the existing ./webkitjs/debug for symbols and building a D3 graph to show the symbols dependency possibly? Is there already key software that does this? Can emscripten/llvm spit this out?&lt;/li&gt;
&lt;li&gt;Identify what key import symbols may require significant retooling.&lt;/li&gt;
&lt;li&gt;Integrate libxml.js (rather than depending on browser pass through decoding to a buffer)&lt;/li&gt;
&lt;li&gt;Integrate libxslt.js (currently unsupported)&lt;/li&gt;
&lt;li&gt;Integrate ffmpeg.js ?.... pure javascript video support?..... .&lt;/li&gt;
&lt;li&gt;Integrate libpng.js (rather than depending on browser pass through decoding to a buffer)&lt;/li&gt;
&lt;li&gt;Integrate libjpeg-turbo.js/libjpeg.js (rather than depending on browser pass through decoding to a buffer)&lt;/li&gt;
&lt;li&gt;Integrate zlib (rather than depending on browser pass through decoding to a buffer)&lt;/li&gt;
&lt;li&gt;Use embind/cppfilter.js to automatically generate all the WebCore C++ interfaces (derived from WebCore.exp) directly into javascript, then simply reuse existing webcore demos/examples.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;
&lt;a name=&quot;license&quot; class=&quot;anchor&quot; href=&quot;https://github.com/trevorlinton/webkit.js#license&quot;&gt;&lt;/a&gt;License&lt;/h2&gt;

&lt;p&gt;BSD License (see &lt;a href=&quot;http://www.webkit.org/coding/bsd-license.html&quot;&gt;http://www.webkit.org/coding/bsd-license.html&lt;/a&gt;)
Use of this source code is governed by a BSD-style license that can be
found in the LICENSE files contained in the root of the respective source code.&lt;/p&gt;

&lt;p&gt;&amp;#xA9; True Interactions 2014&lt;/p&gt;

&lt;p&gt;[trevor linton]:mailto:trevor dot linton plus github at gmail dot com&lt;/p&gt;&lt;/article&gt;
  &lt;/div&gt;
</description>
<title>
WebKit.js: Pure JavaScript Port of WebKit
</title>
</item>
<item>
<author>
Google
</author>
<link>
http://googleblog.blogspot.com/2014/01/introducing-our-smart-contact-lens.html
</link>
<description>
&lt;div&gt;&lt;div id=&quot;maia-main&quot;&gt;
&lt;div class=&quot;maia-cols&quot;&gt;
&lt;div class=&quot;maia-col-9&quot;&gt;

&lt;div class=&quot;section&quot; id=&quot;main&quot;&gt;&lt;div class=&quot;widget Blog&quot; id=&quot;Blog1&quot;&gt;
&lt;div class=&quot;post&quot;&gt;
&lt;meta value=&quot;http://4.bp.blogspot.com/-mi6GFZvtLgM/UthX4TvBpjI/AAAAAAAAN_A/KYGNt93Ri5E/s1600/Hand+holding+-+zoomed+in.jpg&quot;&gt;


&lt;div class=&quot;post-content&quot;&gt;
You&amp;#x2019;ve probably heard that diabetes is a huge and growing problem&amp;#x2014;affecting one in every 19 people on the planet. But you may not be familiar with the daily struggle that many people with diabetes face as they try to keep their blood sugar levels under control. Uncontrolled blood sugar puts people at risk for a range of dangerous complications, some short-term and others longer term, including damage to the eyes, kidneys and heart. A friend of ours told us she worries about her mom, who once passed out from low blood sugar and drove her car off the road. &lt;br&gt;
&lt;br&gt;
Many people I&amp;#x2019;ve talked to say managing their diabetes is like having a part-time job. Glucose levels change frequently with normal activity like exercising or eating or even sweating. Sudden spikes or precipitous drops are dangerous and not uncommon, requiring round-the-clock monitoring. Although some people wear glucose monitors with a glucose sensor embedded under their skin, all people with diabetes must still prick their finger and test drops of blood throughout the day. It&amp;#x2019;s disruptive, and it&amp;#x2019;s painful. And, as a result, many people with diabetes check their blood glucose less often than they should.  &lt;br&gt;
&lt;br&gt;
Over the years, many scientists have investigated various body fluids&amp;#x2014;such as tears&amp;#x2014;in the hopes of finding an easier way for people to track their glucose levels. But as you can imagine, tears are hard to collect and study. At Google[x], we wondered if miniaturized electronics&amp;#x2014;think: chips and sensors so small they look like bits of glitter, and an antenna thinner than a human hair&amp;#x2014;might be a way to crack the mystery of tear glucose and measure it with greater accuracy.&lt;br&gt;
&lt;div class=&quot;separator&quot;&gt;
&lt;a href=&quot;http://4.bp.blogspot.com/-mi6GFZvtLgM/UthX4TvBpjI/AAAAAAAAN_A/KYGNt93Ri5E/s1600/Hand+holding+-+zoomed+in.jpg&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-mi6GFZvtLgM/UthX4TvBpjI/AAAAAAAAN_A/KYGNt93Ri5E/s1600/Hand+holding+-+zoomed+in.jpg&quot; width=&quot;400&quot;&gt;&lt;/a&gt;&lt;/div&gt;
We&amp;#x2019;re now testing a smart contact lens that&amp;#x2019;s built to measure glucose levels in tears using a tiny wireless chip and miniaturized glucose sensor that are embedded between two layers of soft contact lens material. We&amp;#x2019;re testing prototypes that can generate a reading once per second.  We&amp;#x2019;re also investigating the potential for this to serve as an early warning for the wearer, so we&amp;#x2019;re exploring integrating tiny LED lights that could light up to indicate that glucose levels have crossed above or below certain thresholds.  It&amp;#x2019;s still early days for this technology, but we&amp;#x2019;ve completed multiple clinical research studies which are helping to refine our prototype. We hope this could someday lead to a new way for people with diabetes to manage their disease.&lt;br&gt;
&lt;br&gt;
We&amp;#x2019;re in discussions with the FDA, but there&amp;#x2019;s still a lot more work to do to turn this technology into a system that people can use. We&amp;#x2019;re not going to do this alone: we plan to look for partners who are experts in bringing products like this to market. These partners will use our technology for a smart contact lens and develop apps that would make the measurements available to the wearer and their doctor. We&amp;#x2019;ve &lt;a href=&quot;http://investor.google.com/corporate/2004/ipo-founders-letter.html&quot;&gt;always said&lt;/a&gt; that we&amp;#x2019;d seek out projects that seem a bit speculative or strange, and at a time when the &lt;a href=&quot;http://www.idf.org/sites/default/files/Global_WDD_Final.pdf&quot;&gt;International Diabetes Federation&lt;/a&gt;&amp;#xA0;(PDF) is declaring that the world is &amp;#x201C;losing the battle&amp;#x201D; against diabetes, we thought this project was worth a shot. &lt;br&gt;
&lt;br&gt;
&lt;span class=&quot;byline-author&quot;&gt;Posted by Brian Otis and Babak Parviz, project co-founders&lt;/span&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;blog-pager&quot; id=&quot;blog-pager&quot;&gt;
&lt;span id=&quot;blog-pager-newer-link&quot;&gt;
&lt;a class=&quot;blog-pager-newer-link&quot; href=&quot;http://googleblog.blogspot.com/2014/01/hit-road-with-president-obama-in-first.html&quot; id=&quot;Blog1_blog-pager-newer-link&quot; title=&quot;Newer Post&quot;&gt;
Newer Post
&lt;/a&gt;
&lt;/span&gt;
&lt;span id=&quot;blog-pager-older-link&quot;&gt;
&lt;a class=&quot;blog-pager-older-link&quot; href=&quot;http://googleblog.blogspot.com/2014/01/a-new-wind-investment-in-texas.html&quot; id=&quot;Blog1_blog-pager-older-link&quot; title=&quot;Older Post&quot;&gt;
Older Post
&lt;/a&gt;
&lt;/span&gt;
&lt;a class=&quot;home-link&quot; href=&quot;http://googleblog.blogspot.com/&quot;&gt;
Home
&lt;/a&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;




&lt;/div&gt;
&lt;/div&gt;










&lt;/div&gt;
</description>
<title>
Introducing our smart contact lens project (for diabetics)
</title>
</item>
<item>
<link>
http://antirez.com/articoli/tclmisunderstood.html
</link>
<description>
&lt;div&gt;&lt;p&gt;
In an article recently linked from reddit entitled
&lt;a href=&quot;http://www.cabochon.com/~stevey/blog-rants/tour-de-babel.html&quot;&gt;
Tour de Babel&lt;/a&gt; you can read (among lots of other nonsense):
&lt;i&gt;Heck, people still use Tcl as an embedded interpreter, even though Python is far superior to Tcl in every conceivable way -- except, that is, for the frost thing.&lt;/i&gt;
&lt;/p&gt;&lt;p&gt;
Ok, the whole article is well.. not very valid, but unfortunately while
many misconceptions are promptly recognized by the informed reader,
this one against Tcl is generally believed at face value. I hope this article
will convince people that Tcl is not that bad.

&lt;/p&gt;&lt;p&gt;
In my programming life I have used a lot of languages to write different
kind of applications: many free/paywork programs in C, a web CMS
in Scheme, a number of networking/web applications in Tcl, a shop
management system in Python, and so on. I used to play with a number
of other programming languages like Smalltalk, Self, FORTH, Ruby, Joy,...
And yet, I have no doubt, that &lt;b&gt;there is no language that is as misunderstood
in the programming community as Tcl is&lt;/b&gt;.
&lt;/p&gt;&lt;p&gt;Tcl is not without faults, but most of its limitations are not
hard coded in the language design, they are just the result of the
fact that Tcl lost its &quot;father&quot; (John Ousterhout) a number of years ago, and together with him any kind
of single-minded strong leadership that was able to take strong
decisions. With the right changes it is possible
to overcome most of the limitations of Tcl, and at the same
time preserve the power of the language. If you don't trust Tcl is remarkably
powerful please &lt;b&gt;take the time&lt;/b&gt; to read this article first. Maybe
you still won't like it afterwards, but hopefully you will respect it, and you will certainly  have strong arguments against
the &lt;i&gt;Tcl is a toy language&lt;/i&gt; misconception that's even more petty than
&lt;i&gt;Lisp has too many parenthesis&lt;/i&gt;.
&lt;/p&gt;&lt;p&gt;
Before we begin, I'll spend some time explaining
how Tcl works. Like the best languages in the world, Tcl has a few
concepts that, combined together, allow for programming freedom
and expressiveness.
&lt;/p&gt;&lt;p&gt;After this short introduction to Tcl, you'll see how in Tcl
things very similar to Lisp macros just happen using normal
procedures (in a much more powerful way than Ruby blocks),
how it's possible to redefine almost every part of the language
itself, and how it is possible to mostly ignore
types when programming. The Tcl community developed
a number of OOP systems, radical language modifications, macro
systems, and many other interesting things, just writing Tcl
programs. If you like programmable programming languages I bet
you'll at least look on it with interest.

&lt;/p&gt;&lt;p&gt;
The first idea of the Tcl language is: commands.
Programs are commands, one after the other. For
example to set the variable 'a' to 5 and print its value
you write two commands:
&lt;/p&gt;&lt;pre&gt;
set a 5
puts $a
&lt;/pre&gt;
&lt;p&gt;
Commands are space separated words.
A command ends with a newline or with a &lt;b&gt;;&lt;/b&gt; character.
&lt;b&gt;Everything&lt;/b&gt; is a command in Tcl - as you can see there
is no assignment operator.  To set a variable you need a command,
the &lt;b&gt;set&lt;/b&gt; command, that sets the variable specified as the
first argument to the value specified as the second argument.
&lt;/p&gt;&lt;p&gt;
Almost every Tcl command returns a value, For example the &lt;b&gt;set&lt;/b&gt;
command returns the value assigned to the variable. If the
&lt;b&gt;set&lt;/b&gt; command is called with just one argument (the variable
name), the current value of the variable is returned.
&lt;/p&gt;&lt;p&gt;
The second idea is command substitution. In a command some arguments
may appear between &lt;b&gt;[&lt;/b&gt; and &lt;b&gt;]&lt;/b&gt; braces. If so
the argument is substituted with the return value of the code
included inside the braces. For example:
&lt;/p&gt;&lt;pre&gt;
set a 5
puts [set a]
&lt;/pre&gt;
&lt;p&gt;
The first argument of the second command, [set a], will be
substituted with the return value of &quot;set a&quot; (that's 5).
After the substitution step the command will be converted from:
&lt;/p&gt;&lt;pre&gt;
puts [set a]
&lt;/pre&gt;&lt;pre&gt;
puts 5
&lt;/pre&gt;&lt;p&gt;
And, at that point, it will be executed.
&lt;/p&gt;&lt;p&gt;
Always using the &lt;b&gt;set&lt;/b&gt; command for variable substitution
would be too verbose, so even if not strictly needed, variable substitution
was introduced at some time during the early development of Tcl.
If a variable name is preceded by the &lt;b&gt;$&lt;/b&gt; character
it is substituted with its value. So instead of
&lt;/p&gt;&lt;pre&gt;
puts [set a]
&lt;/pre&gt;&lt;pre&gt;
puts $a
&lt;/pre&gt;
&lt;p&gt;
If commands are space separated words, how to deal with the
need for arguments that may contain spaces? For example:
&lt;/p&gt;&lt;pre&gt;
puts Hello World
&lt;/pre&gt;
&lt;p&gt;
is an incorrect program as Hello and World are two different
arguments. This problem is solved by grouping. Text inside &quot;&quot;
is considered a single argument, so the right program is:
&lt;/p&gt;&lt;pre&gt;
puts &quot;Hello World&quot;
&lt;/pre&gt;
&lt;p&gt;
Commands and variables substitution work inside this kind
of grouping, For example I can write:
&lt;/p&gt;&lt;pre&gt;
set a 5
set b foobar
puts &quot;Hello $a World [string length $b]&quot;
&lt;/pre&gt;
&lt;p&gt;
And the result will be &quot;Hello 5 World 6&quot;. Also, escapes
like \t, \n will do what you think.   There is, however, another kind
of grouping where every kind of special character is just
considered verbatim without any kind of substitution step.
Everything between { and } is seen by Tcl as a unique argument
where no substitutions are performed. So:
&lt;/p&gt;&lt;pre&gt;
set a 5
puts {Hello $a World}
&lt;/pre&gt;
&lt;p&gt;
Will print &lt;i&gt;Hello $a World&lt;/i&gt;.
&lt;/p&gt;&lt;pre&gt;
set a 5
if $a {
    puts Hello!
}
&lt;/pre&gt;
&lt;p&gt;
&lt;b&gt;if&lt;/b&gt; is a command, with two arguments. The first is the value
of the variable a substituted, the second is the string { ... puts Hello! ... }.
The &lt;b&gt;if&lt;/b&gt; command uses a special version of &lt;b&gt;Eval&lt;/b&gt;
that we'll see in a moment to run the script passed as the second
argument, and returns the result. Of course, you can write
your version of &lt;b&gt;if&lt;/b&gt; or any other control structure if
you want. You may even redefine &lt;b&gt;if&lt;/b&gt; itself and add some
feature to it!
&lt;/p&gt;&lt;pre&gt;
set a pu
set b ts
$a$b &quot;Hello World&quot;
&lt;/pre&gt;
&lt;p&gt;
Yes, in Tcl everything happens at runtime and is dynamic: it's
the ultimate late binding programming language, and there are no
types. The command name is not a special type but just a string.
Numbers are also just strings, so is Tcl code, a string (remember
we passed a string to the &lt;b&gt;if&lt;/b&gt; command as second argument?).
In Tcl what a string represents is up to the command that's manipulating
it. the string &quot;5&quot; will be seen as a string of characters by
the &quot;string length 5&quot; command, and as a boolean value by &quot;if $a ...&quot;
command. Of course commands check that values have a suitable
form, If I try to add &quot;foo&quot; to &quot;bar&quot; Tcl will produce an exception
because it can't parse &quot;foo&quot; nor &quot;bar&quot; as numbers. This kind
of checks in Tcl are very strict, so you'll not get the PHP-alike
effect of silent absurd type conversions. The type conversion only
happens if the string makes sense interpreted as the thing the command
needs as arguments.
&lt;/p&gt;&lt;p&gt;
So Tcl is so dynamic, but guess what? It is more or less as fast as current
Ruby implementations. There is a trick in the implementation of
Tcl: objects (not in the OOP sense, but C structs representing
Tcl values) cache the native value of the last use of a given
string. If a Tcl value is always used as a number the C struct
representing it will contain an integer inside, and as long as
the next commands continue to use it as an integer, the string
representation of the object is not touched at all. It's a bit more complex
than this, but the result is that &lt;b&gt;the programmer doesn't need to
think about types&lt;/b&gt;, and programs still work as fast as other
dynamic programming languages where types are more explicit.
&lt;/p&gt;&lt;p&gt;
One of the more interesting types (or better.. string formats)
Tcl uses is lists. Lists are mostly the central structure
of a Tcl program: a Tcl list is always a valid Tcl command!
(and both are just strings, in the end).
In the simplest form lists are like commands: space separated
words. For example the string &quot;a b foo bar&quot; is a list with four elements.
There are commands to take a range of elements from a list,
to add elements, and so on. Of course, lists may have elements
containing spaces, so in order to create well formatted lists
the &lt;b&gt;list&lt;/b&gt; command is used. Example:
&lt;/p&gt;&lt;pre&gt;
set l [list a b foo &quot;hello world&quot;]
puts [llength $l]
&lt;/pre&gt;
&lt;p&gt;
&lt;b&gt;llength&lt;/b&gt; returns the length of the list, so the above
program will print 4 as output. &lt;b&gt;lindex&lt;/b&gt; will
instead return the element at the specified position,
so &quot;lindex $l 2&quot; will return &quot;foo&quot;, and so on.
Like in Lisp, in Tcl most programmers use the list type
to model as many concepts as possible in programs.
&lt;/p&gt;&lt;p&gt;
I bet most Lisp hackers already noted how Tcl is a prefix-notation
language, so you may think like in Lisp, math in Tcl is performed
using math operators as commands, like: puts [+ 1 2].
Instead, things work in a different way: in order to make Tcl more
friendly there is a command taking infix math expressions as
argument and evaluating them. This command is called &lt;b&gt;expr&lt;/b&gt;, and
math in Tcl works like this:
&lt;/p&gt;&lt;pre&gt;
set a 10
set b 20
puts [expr $a+$b]
&lt;/pre&gt;
&lt;p&gt;
Commands like &lt;b&gt;if&lt;/b&gt; and &lt;b&gt;while&lt;/b&gt; use &lt;b&gt;expr&lt;/b&gt;
internally in order to evaluate expressions, for instance:
&lt;/p&gt;&lt;pre&gt;
&lt;p&gt;
while {$a &amp;lt; $b} {
    puts Hello
}
&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;
where the while command takes two arguments - the first string being evaluated
as an &lt;b&gt;expr&lt;/b&gt;ession to check if it's true at every iteration,
and the second &lt;b&gt;eval&lt;/b&gt;uated itself each time.
I think it's a design error that math commands are not builtins,
I see &lt;b&gt;expr&lt;/b&gt; like a cool tool to have where there is
complex math to do, but to just add two numbers [+ $a $b]
is more convenient.  It's worth noting that this has been formally
proposed as a change to the language.
&lt;/p&gt;&lt;p&gt;
Naturally, nothing stops a Tcl programmer from writing a procedure (that's
a user defined command) in order to use math operators as commands.
Like this:
&lt;/p&gt;&lt;pre&gt;
proc + {a b} {
    expr {$a+$b}
}
&lt;/pre&gt;
&lt;p&gt;
The &lt;b&gt;proc&lt;/b&gt; command is used to create a procedure: its first
argument is the procedure name, the second is the list of arguments
the procedure takes as input, and finally the last argument
is the body of the procedure. Note that the second argument,
the arguments list, is a Tcl list. As you can see the return
value of the last command in a procedure is used as return
value of the procedure (unless the &lt;b&gt;return&lt;/b&gt; command is used
explicitly).
But wait... Everything is a command in Tcl right? So we can create
the procedures for +, -, *, ... in a simpler way instead of writing four
different procedures:
&lt;/p&gt;&lt;pre&gt;
set operators [list + - * /]
foreach o $operators {
    proc $o {a b} [list expr &quot;\$a $o \$b&quot;]
}
&lt;/pre&gt;
&lt;p&gt;
After this we can use [+ 1 2], [/ 10 2] and so on.
Of course it's smarter to create these procedures as varargs
like Scheme's procedures. In Tcl procedures can have the same names
as built in commands, so you can redefine Tcl itself. For example, in order
to write &lt;a href=&quot;http://wiki.tcl.tk/sugar&quot;&gt;a macro system for Tcl&lt;/a&gt;
I redefined &lt;b&gt;proc&lt;/b&gt;. Redefining proc is also useful
for writing profilers (Tcl profilers are developed in Tcl itself usually).
After a built in command is redefined you can still call it if you
&lt;b&gt;rename&lt;/b&gt;d it to some other name prior to overwriting it with &lt;b&gt;proc&lt;/b&gt;.
&lt;/p&gt;&lt;p&gt;
If you are reading this article you already know what &lt;b&gt;Eval&lt;/b&gt;
is. The command &lt;i&gt;eval {puts hello}&lt;/i&gt; will of course evaluate the
code passed as argument, as happens in many other
programming languages. In Tcl there is another beast,
a command called &lt;b&gt;uplevel&lt;/b&gt; that can evaluate code in the
context of the calling procedure, or for what it's worth, in
the context of the caller of the caller (or directly at the top level).
What this means is that what in Lisp are macros, in Tcl are just
simple procedures. Example: in Tcl there is no &quot;built-in&quot;
for a command &lt;b&gt;repeat&lt;/b&gt; to be used like this:
&lt;/p&gt;&lt;pre&gt;
repeat 5 {
    puts &quot;Hello five times&quot;
}
&lt;/pre&gt;&lt;p&gt;
But to write it is trivial.
&lt;/p&gt;&lt;pre&gt;
proc repeat {n body} {
    set res &quot;&quot;
    while {$n} {
        incr n -1
        set res [uplevel $body]
    }
    return $res
}
&lt;/pre&gt;
&lt;p&gt;
Note that we take care to save the result of the last
evaluation, so our &lt;b&gt;repeat&lt;/b&gt; will (like most Tcl
commands) return the last evaluated result.
An example of usage:
&lt;/p&gt;&lt;pre&gt;
set a 10
repeat 5 {incr a} ;# Repeat will return 15
&lt;/pre&gt;
&lt;p&gt;
As you can guess, the &lt;b&gt;incr&lt;/b&gt; command is used to increment
an integer var by one (if you omit its second argument).
&quot;incr a&quot; is executed in the context of the calling procedure,
(i.e. the previous stack frame).
&lt;/p&gt;&lt;p&gt;Congratulations, you know more than 90% of Tcl concepts!
&lt;/p&gt;&lt;p&gt;
I am not going to show you every single Tcl feature, but I want to give an idea
of advanced programming tasks that are solved in a very nice
way with Tcl. I want to stress that I think &lt;b&gt;Tcl has a number
of faults&lt;/b&gt;, but most of them are not in the main ideas of
the language itself.  I think there is room for a Tcl-derived
language that can compete with Ruby, Lisp and Python today in interesting
domains like web programming, network programming, GUI development, DSL
and as scripting language.
&lt;/p&gt;&lt;p&gt;Tcl syntax is so simple that you can write a parser for Tcl
in few lines of code in Tcl itself. I wrote
&lt;a href=&quot;http://wiki.tcl.tk/sugar&quot;&gt;a macro system for Tcl in Tcl&lt;/a&gt;
									    as I already mentioned, which is able to do source level transformations complex enough
to allow tail call optimization.
At the same time, Tcl syntax is able to scale to appear more
algol-like, it depends on your programming style.
&lt;/p&gt;&lt;p&gt;
There are no types, and you don't need to perform conversions,
however, you aren't likely to introduce bugs because the checks on the format
of the strings are very strict. Even better, you &lt;b&gt;don't need
serialization&lt;/b&gt;. Have a big complex Tcl list and want to send
it via a TCP socket? Just write: &lt;b&gt;puts $socket $mylist&lt;/b&gt;.
On the other side of the socket read it as &lt;b&gt;set mylist [read $socket]&lt;/b&gt;.
and you are done.
&lt;/p&gt;&lt;p&gt;
Tcl has built-in event-driven programming, integrated with the I/O library. To write complex networking programs with just what is provided in the core language is so simple it's funny. An example: the following program is
a &lt;b&gt;concurrent&lt;/b&gt; (internally select(2) based) TCP server that outputs
the current time to every client.
&lt;/p&gt;&lt;pre&gt;
socket -server handler 9999
proc handler {fd clientaddr clientport} {
    set t [clock format [clock seconds]]
    puts $fd &quot;Hello $clientaddr:$clientport, current date is $t&quot;
    close $fd
}
vwait forever
&lt;/pre&gt;
&lt;p&gt;
Non-blocking I/O and events are handled so well that you can even
write to a socket where there is no longer output buffer and Tcl
will automatically buffer it in userland and send it in background to the socket
when there is again space on the socket's output buffer.
&lt;/p&gt;&lt;p&gt;
Python users know a good idea when they see it - Python's &quot;Twisted&quot;
framework makes use of the same select-driven IO concepts that Tcl has
had natively for years.
&lt;/p&gt;&lt;p&gt;
In Tcl you can write object oriented code, functional style code,
and imperative code in a mix, like it happens in Common Lisp more
or less. A number of OOP systems and Functional Programming primitives
where implemented in the past. There are everything from prototype-based
OOP systems to SmallTalk-like ones, and many are implemented in Tcl
itself (or were initially, as a proof-of-concept). Furthermore, because code in Tcl
is first class, it is very simple to write functional language
primitives that play well with the logic of the language.
An example is &lt;b&gt;lmap&lt;/b&gt;:
&lt;/p&gt;&lt;pre&gt;
lmap i {1 2 3 4 5} {
    expr $i*$i
}
&lt;/pre&gt;
&lt;p&gt;
which will return a list of squares, 1 4 9 12 25. You can write
a &lt;b&gt;map&lt;/b&gt;-like function based on a version of lamba
(also developed in Tcl itself), but Tcl has already what you
need to allow for a more natural functional programming than
the Lisp way (which works well for Lisp but maybe not for everything
else).  Note what happens when you try to add functional programming
to a language that's too rigid: Python and the endless debate of
its functional primitives.
&lt;/p&gt;&lt;p&gt;
If you are a Lisp programmer you know how beautiful is to
have a flexible data structure like the list everywhere in your
programs, especially when the literal is as simple as
&quot;foo bar 3 4 5 6&quot; in most cases.
&lt;/p&gt;&lt;p&gt;
Via eval, uplevel, upvar and the very powerful introspection
capabilities of Tcl you can redefine the language and invent
new ways of solving problems. For example, the following interesting
command if called as first command in a function will &lt;b&gt;automagically
make it a memoizing version&lt;/b&gt; of the function:
&lt;/p&gt;&lt;pre&gt;
proc memoize {} {
    set cmd [info level -1]
    if {[info level] &amp;gt; 2 &amp;amp;&amp;amp; [lindex [info level -2] 0] eq &quot;memoize&quot;} return
    if {![info exists ::Memo($cmd)]} {set ::Memo($cmd) [eval $cmd]}
    return -code return $::Memo($cmd)
}
&lt;/pre&gt;&lt;p&gt;
Then, when you write a procedure just write something like:
&lt;/p&gt;&lt;pre&gt;
proc myMemoizingProcedure { ... } {
    memoize
    ... the rest of the code ...
} 
&lt;/pre&gt;
&lt;p&gt;
Tcl is probably the language with the best internationalization
support. Every string is internally encoded in utf-8, all the
string operations are Unicode-safe, including the regular expression
engine. Basically, in Tcl programs, encodings are not a problem -
they just work.
&lt;/p&gt;&lt;p&gt;
If you define a procedure called &lt;b&gt;unknown&lt;/b&gt; it is called
with a Tcl list representing arguments of every command Tcl tried
to execute, but failed because the command name was not defined. You can do
what you like with it, and return a value, or raise an error.
If you just return a value, the command will appear to work even
if unknown to Tcl, and the return value returned by &lt;b&gt;unknown&lt;/b&gt;
will be used as return value of the not defined command.
Add this to uplevel and upvar, and the language itself that's almost
syntax free, and what you get is an impressive environment for
Domain Specific Languages development. Tcl has almost no syntax,
like Lisp and FORTH, but there are different ways to have no syntax.
Tcl looks like a configuration file by default:
&lt;/p&gt;&lt;pre&gt;
disable ssl
validUsers jim barbara carmelo
hostname foobar {
    allow from 2:00 to 8:00
}
&lt;/pre&gt;
&lt;p&gt;
The above is a valid Tcl program, once you define the commands
used, &lt;b&gt;disable&lt;/b&gt;, &lt;b&gt;validUsers&lt;/b&gt; and &lt;b&gt;hostname&lt;/b&gt;.
&lt;/p&gt;&lt;p&gt;
Unfortunately there isn't room to show a lot of interesting features:
most Tcl commands just do one single thing well with easy to remember names.
Strings operations, introspection and other features
are implemented as single commands with subcommands, for example
&lt;b&gt;string length&lt;/b&gt;, &lt;b&gt;string range&lt;/b&gt; and so on. Every part of
the language that gets indexes as argument support an &lt;b&gt;end-num&lt;/b&gt;
notation, so for example to take all the elements of a list but
not the first nor the last you just write:
&lt;/p&gt;&lt;pre&gt;
lrange $mylist 1 end-1
&lt;/pre&gt;
&lt;p&gt;
And in general there is a lot of good design and optimization
for the common case inside. Moreover the Tcl source code is one
of the best written C programs you'll find, and the quality of
the interpreter is amazing: commercial grade in the best sense of the
word. Another interesting thing about the implementation is that
it works exactly the same in different environments, from Windows
to Unix, to Mac OS X. No quality difference among different
operating systems (yes, &lt;b&gt;including&lt;/b&gt; Tk, the main GUI library of Tcl).
&lt;/p&gt;&lt;p&gt;
I don't claim everybody should like Tcl. What I claim is that Tcl
is a powerful language and not a Toy, and it's possible to create
a new Tcl-alike language without most of the limitations of Tcl
but with all of its power. I tried this myself, and
the &lt;a href=&quot;http://jim.berlios.de&quot;&gt;Jim interpreter&lt;/a&gt; is the
result: the code is there and working and can run most Tcl
programs, but then I had no longer time to work for free to
language development, so the project is now more or less abandoned.
Another attempt to develop a Tcl-alike language,
&lt;a href=&quot;http://www.hecl.org/&quot;&gt;Hecl&lt;/a&gt;, is currently
in progress, as a scripting language for Java applications,
where the author (David Welton) exploits the fact that the Tcl core
implementation is small, and the command based design simple to
use as a glue between the two languages (This is not typical with
modern dynamic languages, but both the ideas apply to Scheme too).
I'll be very glad if, after reading this article, you no longer think of Tcl
as a Toy. Thank you. Salvatore.
&lt;/p&gt;&lt;/div&gt;
</description>
<title>
Tcl the misunderstood (2006)
</title>
</item>
<item>
<link>
https://github.com/JelteF/PyLaTeX
</link>
<description>
&lt;div&gt;&lt;article class=&quot;markdown-body entry-content&quot;&gt;

&lt;p&gt;PyLaTeX is a Python library for creating LaTeX files. The point of this library
is being an easy, but extensible interface between Python and LaTeX.&lt;/p&gt;

&lt;h3&gt;
&lt;a name=&quot;features&quot; class=&quot;anchor&quot; href=&quot;https://github.com/JelteF/PyLaTeX#features&quot;&gt;&lt;/a&gt;Features&lt;/h3&gt;

&lt;p&gt;The library contains some basic features I have had the need for so far.
Currently those are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Document generation and compilation&lt;/li&gt;
&lt;li&gt;Section, table and package classes&lt;/li&gt;
&lt;li&gt;An escape function&lt;/li&gt;
&lt;li&gt;Bold and italic functions&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Everything else you want you can still add to the document by adding LaTeX
formatted strings instead of classes or regular strings.&lt;/p&gt;

&lt;h3&gt;
&lt;a name=&quot;dependencies&quot; class=&quot;anchor&quot; href=&quot;https://github.com/JelteF/PyLaTeX#dependencies&quot;&gt;&lt;/a&gt;Dependencies&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python 3.3 (2.7 currently works as well)&lt;/li&gt;
&lt;li&gt;pdflatex (only if you want to compile the tex file)&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;
&lt;a name=&quot;installation&quot; class=&quot;anchor&quot; href=&quot;https://github.com/JelteF/PyLaTeX#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pip install pylatex&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;a name=&quot;example&quot; class=&quot;anchor&quot; href=&quot;https://github.com/JelteF/PyLaTeX#example&quot;&gt;&lt;/a&gt;Example&lt;/h3&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pylatex&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pylatex.utils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;italic&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Yaay the first section, it can even be '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;italic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'italic'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r|ccl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_hline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_hline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_empty_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate_pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code will generate this:
&lt;a href=&quot;https://raw.github.com/JelteF/PyLaTeX/master/docs/static/screenshot.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://raw.github.com/JelteF/PyLaTeX/master/docs/static/screenshot.png&quot; alt=&quot;Generated PDF by PyLaTeX&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;a name=&quot;future-development&quot; class=&quot;anchor&quot; href=&quot;https://github.com/JelteF/PyLaTeX#future-development&quot;&gt;&lt;/a&gt;Future development&lt;/h3&gt;

&lt;p&gt;I will keep adding functionality I need to this library, an interface for
graphics and math will probably be added in a future version.&lt;/p&gt;

&lt;p&gt;If you add a feature yourself, or fix a bug, please send a pull request.&lt;/p&gt;

&lt;p&gt;You can submit issues, but it will not be my priority to fix them. My job and
education are a bit higher on the priority list.&lt;/p&gt;

&lt;h3&gt;
&lt;a name=&quot;support&quot; class=&quot;anchor&quot; href=&quot;https://github.com/JelteF/PyLaTeX#support&quot;&gt;&lt;/a&gt;Support&lt;/h3&gt;

&lt;p&gt;This library is being developed for Python 3.3. It currently works for Python
2.7 as well, but further aditions to the library might break that compatibility.
It is also only tested on Linux, so it might not work on any different
platforms.&lt;/p&gt;

&lt;p&gt;I have no intention of testing on any different platforms or with different
Python versions. I also don't have the intention to write fixes for platform or
environment specific bugs, but pull requests that fix those are always welcome.&lt;/p&gt;

&lt;h3&gt;
&lt;a name=&quot;copyright-and-license&quot; class=&quot;anchor&quot; href=&quot;https://github.com/JelteF/PyLaTeX#copyright-and-license&quot;&gt;&lt;/a&gt;Copyright and License&lt;/h3&gt;

&lt;p&gt;Copyright 2014 Jelte Fennema, under &lt;a href=&quot;https://github.com/JelteF/PyLaTeX/blob/master/LICENSE&quot;&gt;the MIT
license&lt;/a&gt;&lt;/p&gt;&lt;/article&gt;
  &lt;/div&gt;
</description>
<title>
PyLaTeX: Easily create LaTeX documents with Python
</title>
</item>
<item>
<link>
http://www.matasano.com/matasano-square-microcontroller-ctf/
</link>
<description>
&lt;div&gt;&lt;div id=&quot;primary-content&quot;&gt;
  &lt;h2&gt;Announcing The Matasano/Square CTF&lt;/h2&gt;
  
  &lt;p&gt;We've teamed up with &lt;a href=&quot;https://www.squareup.com&quot;&gt;Square&lt;/a&gt; to run a joint Capture The Flag contest.&lt;/p&gt;
  
  &lt;h2&gt;What is it?&lt;/h2&gt;
  
  &lt;p&gt;Your target is a small embedded device; a microcontroller running compiled C code.&lt;/p&gt;
  
  &lt;p&gt;You get access to the device, disassembly of its code, and a low-level debugger and assembler. We &quot;run&quot; the devices, you interact with them via a vanilla web interface.&lt;/p&gt;
  
  &lt;p&gt;At each level, you'll get a simple input that, owing to some C software bug, can be used to own the target. You'll use the debugger to reverse the target, find the input, and then deliver it to a &quot;production&quot; instance to beat the level.&lt;/p&gt;
  
  &lt;p&gt;You'll face a series of revisions of the target, starting from &quot;comically broken&quot; and proceeding vendor-fix by vendor-fix through basic memory corruption, stack overflows, randomization, memory protection schemes, allocator vulnerabilities, and DRM-style software protection.&lt;/p&gt;
  
  &lt;p&gt;All this happens on an architecture you've probably used, but likely never have written any code for. Have you ever reverse-engineered a program from its assembly code to understand what it's doing? That'll happen too.&lt;/p&gt;
  
  &lt;p&gt;We're keeping a leaderboard, by completion time, CPU cycles, and input size. Part of the fun of a challenge like this is to see how others are doing in real-time.&lt;/p&gt;
  
  &lt;p&gt;If you've done a lot of exploit development, you won't have much trouble. &lt;em&gt;But we hope the real fun is reserved for the people who haven't&lt;/em&gt;: you'll get to play with concepts that, in the real world, involve tedious toolchain installs and comprehensive knowledge of the memory layouts of gigantic browser library codebases. You won't need any of that here: we're looking forward to seeing people who have never written a line of assembly beating people who've been doing this for years.&lt;/p&gt;
  
  &lt;h2&gt;How do I start?&lt;/h2&gt;
  
  &lt;p&gt;Visit &lt;a href=&quot;http://microcorruption.com&quot;&gt;microcorruption.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
      
      
    &lt;/div&gt;
</description>
<title>
Announcing The Matasano/Square CTF
</title>
</item>
</channel>
</rss>
