<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0'>
<channel>
<generator>
clj-rss
</generator>
<link>
https://news.ycombinator.com
</link>
<title>
myread
</title>
<description>
myread
</description>
<item>
<link>
http://imgur.com/a/F7AcL
</link>
<description>
&lt;div&gt;&lt;div id=&quot;image-container&quot;&gt;
                                                    &lt;a name=&quot;PL7KIRX&quot;&gt;&lt;/a&gt;
                            &lt;div class=&quot;image&quot; id=&quot;PL7KIRX&quot;&gt;
                                                                    &lt;h2 class=&quot;first&quot;&gt;1.8 Brainfuck computer&lt;/h2&gt;
                                

                                
                                &lt;div class=&quot;wrapper&quot;&gt;
                                    &lt;div class=&quot;image-hover action-button combobox left&quot; title=&quot;Actions&quot;&gt;
    &lt;div class=&quot;options&quot;&gt;
        
        
        

        
    &lt;/div&gt;
&lt;/div&gt;


                                    &lt;a class=&quot;zoom&quot; href=&quot;http://i.imgur.com/PL7KIRX.png&quot;&gt;
                                        &lt;img class=&quot;unloaded&quot; alt=&quot;1.8 Brainfuck computer&quot;&gt;
                                    &lt;/a&gt;
                                &lt;/div&gt;

                                                                    &lt;div class=&quot;description textbox&quot;&gt;This is a fully functional computer running the esoteric programming language brainfuck. It's currently running on the 14w03b snapshot and uses quite a bit of the new functionality. While this may have been possible to implement in earlier versions, it would likely have been ten times as big. It's not optimized yet and the speed is a bit under 1 Hz.

The save can be downloaded at &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://mega.co.nz/#&quot;&gt;https://mega.co.nz/#&lt;/a&gt;!GNoSia5b!YWhyl39GAOd78RGNAyw3aSKcGo9rn0F6fKrCH18XXuc

Brainfuck is not actually meant to be used for programming but great for a proof of concept like this because it consists of only 8 simple commands (&amp;lt;&amp;gt;+-.,[]). You can read more about brainfuck at &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;http://en.wikipedia.org/wiki/Brainfuck&quot;&gt;http://en.wikipedia.org/wiki/Brainfuck&lt;/a&gt;.&lt;/div&gt;
                                
                            &lt;/div&gt;
                                                    &lt;a name=&quot;UpFxzVT&quot;&gt;&lt;/a&gt;
                            &lt;div class=&quot;image&quot; id=&quot;UpFxzVT&quot;&gt;
                                                                    &lt;h2&gt;Overview&lt;/h2&gt;
                                

                                
                                &lt;div class=&quot;wrapper&quot;&gt;
                                    &lt;div class=&quot;image-hover action-button combobox left&quot; title=&quot;Actions&quot;&gt;
    &lt;div class=&quot;options&quot;&gt;
        
        
        

        
    &lt;/div&gt;
&lt;/div&gt;


                                    &lt;a class=&quot;zoom&quot; href=&quot;http://i.imgur.com/UpFxzVT.png&quot;&gt;
                                        &lt;img class=&quot;unloaded&quot; alt=&quot;Overview&quot;&gt;
                                    &lt;/a&gt;
                                &lt;/div&gt;

                                                                    &lt;p class=&quot;description textbox&quot;&gt;Here's an overview of all the parts including the input (brown), output (green), registers (the tower between input and output), the command dispatcher (light blue), and the circuits implementing conditions and jumps (white and yellow).&lt;/p&gt;
                                
                            &lt;/div&gt;
                                                    &lt;a name=&quot;olRFoJx&quot;&gt;&lt;/a&gt;
                            &lt;div class=&quot;image&quot; id=&quot;olRFoJx&quot;&gt;
                                                                    &lt;h2&gt;Program code and counter&lt;/h2&gt;
                                

                                
                                &lt;div class=&quot;wrapper&quot;&gt;
                                    &lt;div class=&quot;image-hover action-button combobox left&quot; title=&quot;Actions&quot;&gt;
    &lt;div class=&quot;options&quot;&gt;
        
        
        

        
    &lt;/div&gt;
&lt;/div&gt;


                                    &lt;a class=&quot;zoom&quot; href=&quot;http://i.imgur.com/olRFoJx.png&quot;&gt;
                                        &lt;img class=&quot;unloaded&quot; alt=&quot;Program code and counter&quot;&gt;
                                    &lt;/a&gt;
                                &lt;/div&gt;

                                                                    &lt;p class=&quot;description textbox&quot;&gt;The program code is stored using villagers with different names for each command. While the program is running they are moved between three compartments containing code to run (left), the current instruction (center), and code that has been run (right).

This is only possible because Minecraft returns entities in the order in which they were spawned, which means that using the selector @e[type=Villager,c=1,r=1,x=11,y=58,z=876] gives you the villager at that position that has been spawned first while c=-1 gives you the last.&lt;/p&gt;
                                
                            &lt;/div&gt;
                                                    &lt;a name=&quot;PXOjTdD&quot;&gt;&lt;/a&gt;
                            &lt;div class=&quot;image&quot; id=&quot;PXOjTdD&quot;&gt;
                                                                    &lt;h2&gt;Control panel&lt;/h2&gt;
                                

                                
                                &lt;div class=&quot;wrapper&quot;&gt;
                                    &lt;div class=&quot;image-hover action-button combobox left&quot; title=&quot;Actions&quot;&gt;
    &lt;div class=&quot;options&quot;&gt;
        
        
        

        
    &lt;/div&gt;
&lt;/div&gt;


                                    &lt;a class=&quot;zoom&quot; href=&quot;http://i.imgur.com/PXOjTdD.png&quot;&gt;
                                        &lt;img class=&quot;unloaded&quot; alt=&quot;Control panel&quot;&gt;
                                    &lt;/a&gt;
                                &lt;/div&gt;

                                                                    &lt;p class=&quot;description textbox&quot;&gt;This is the interface of the computer. You can enter, print, delete, and start a program as well as reset the state to run the next program (it currently doesn't clean up the state by itself). Note that the reset only works if the program has stopped running. You'll have to delete the program, wait for it to stop, and then reset if you want to recover from a bad state (e.g. an infinite loop). The green area allows you to input a character by replacing a sign and pushing the button that appears after executing a ',' command.

The box on the right can be used to manually adding a program by using the spawn eggs in the chest right in front of it. This can also be used to add code before or after loading one of the example programs.&lt;/p&gt;
                                
                            &lt;/div&gt;
                                                    &lt;a name=&quot;cvoWk8a&quot;&gt;&lt;/a&gt;
                            &lt;div class=&quot;image&quot; id=&quot;cvoWk8a&quot;&gt;
                                                                    &lt;h2&gt;Registers&lt;/h2&gt;
                                

                                
                                &lt;div class=&quot;wrapper&quot;&gt;
                                    &lt;div class=&quot;image-hover action-button combobox left&quot; title=&quot;Actions&quot;&gt;
    &lt;div class=&quot;options&quot;&gt;
        
        
        

        
    &lt;/div&gt;
&lt;/div&gt;


                                    &lt;a class=&quot;zoom&quot; href=&quot;http://i.imgur.com/cvoWk8a.png&quot;&gt;
                                        &lt;img class=&quot;unloaded&quot; alt=&quot;Registers&quot;&gt;
                                    &lt;/a&gt;
                                &lt;/div&gt;

                                                                    &lt;p class=&quot;description textbox&quot;&gt;These are the 8 registers that store the data. Each consists of two droppers and two hoppers that exchange dirt blocks. One dropper is the actual register (marked with a carpet) while the other acts as a reservoir holding the spare blocks.

The 9th circuit at the bottom is not a regular register but instead is used to select the active register. Whenever its value is changed, the cyan part gets activated and opens the input and output for the selected register.&lt;/p&gt;
                                
                            &lt;/div&gt;
                                                    &lt;a name=&quot;mCBfw9L&quot;&gt;&lt;/a&gt;
                            &lt;div class=&quot;image&quot; id=&quot;mCBfw9L&quot;&gt;
                                                                    &lt;h2&gt;Command dispatcher&lt;/h2&gt;
                                

                                
                                &lt;div class=&quot;wrapper&quot;&gt;
                                    &lt;div class=&quot;image-hover action-button combobox left&quot; title=&quot;Actions&quot;&gt;
    &lt;div class=&quot;options&quot;&gt;
        
        
        

        
    &lt;/div&gt;
&lt;/div&gt;


                                    &lt;a class=&quot;zoom&quot; href=&quot;http://i.imgur.com/mCBfw9L.png&quot;&gt;
                                        &lt;img class=&quot;unloaded&quot; alt=&quot;Command dispatcher&quot;&gt;
                                    &lt;/a&gt;
                                &lt;/div&gt;

                                                                    &lt;p class=&quot;description textbox&quot;&gt;This part decides which command to run, estimates how long the command takes and sends a signal back once the next command can be executed. Four commands send a signal to the registers to either switch between them ('&amp;lt;','&amp;gt;') or change the current value ('+','-'). The two IO commands activate the output ('.') or the input (',') and the jump commands ('[',']') require additional logic.&lt;/p&gt;
                                
                            &lt;/div&gt;
                                                    &lt;a name=&quot;ypyt9T2&quot;&gt;&lt;/a&gt;
                            &lt;div class=&quot;image&quot; id=&quot;ypyt9T2&quot;&gt;
                                                                    &lt;h2&gt;Condition and jump circuits&lt;/h2&gt;
                                

                                
                                &lt;div class=&quot;wrapper&quot;&gt;
                                    &lt;div class=&quot;image-hover action-button combobox left&quot; title=&quot;Actions&quot;&gt;
    &lt;div class=&quot;options&quot;&gt;
        
        
        

        
    &lt;/div&gt;
&lt;/div&gt;


                                    &lt;a class=&quot;zoom&quot; href=&quot;http://i.imgur.com/ypyt9T2.png&quot;&gt;
                                        &lt;img class=&quot;unloaded&quot; alt=&quot;Condition and jump circuits&quot;&gt;
                                    &lt;/a&gt;
                                &lt;/div&gt;

                                                                    &lt;p class=&quot;description textbox&quot;&gt;This part rewinds the instructions to jump from a closing bracket to the corresponding opening bracket. Only after reaching the opening bracket is a signal send back to resume regular execution. The same logic is used in the yellow circuit for forward jumps. Brackets could theoretically get nested until the dropper at the back is full (9*64) but it's currently set up to support only 64.&lt;/p&gt;
                                
                            &lt;/div&gt;
                                                    &lt;a name=&quot;NPRDXH4&quot;&gt;&lt;/a&gt;
                            &lt;div class=&quot;image&quot; id=&quot;NPRDXH4&quot;&gt;
                                                                    &lt;h2&gt;Output device&lt;/h2&gt;
                                

                                
                                &lt;div class=&quot;wrapper&quot;&gt;
                                    &lt;div class=&quot;image-hover action-button combobox left&quot; title=&quot;Actions&quot;&gt;
    &lt;div class=&quot;options&quot;&gt;
        
        
        

        
    &lt;/div&gt;
&lt;/div&gt;


                                    &lt;a class=&quot;zoom&quot; href=&quot;http://i.imgur.com/NPRDXH4.png&quot;&gt;
                                        &lt;img class=&quot;unloaded&quot; alt=&quot;Output device&quot;&gt;
                                    &lt;/a&gt;
                                &lt;/div&gt;

                                                                    &lt;p class=&quot;description textbox&quot;&gt;This part reads the value of the selected register and prints the corresponding character with /tellraw. I'm using a special encoding with 64 printable characters and one control character (RESET,0-9,' ','.',A-Z,a-z). The value of the registers is read using /testforblock commands (e.g. testforblock ~-8 ~ ~16 minecraft:dropper 3 {Items:[0:{Slot:0b,id:&quot;minecraft:dirt&quot;,Damage:0s,Count:2b}]}). Each layer has the same functionality but for a different register.

To keep it as small as possible I didn't add any reset functionality which means that you can't print the same character twice in a row using the same register. You'll first have to print a different character to reset the output, for instance the control character that has the value 0.&lt;/p&gt;
                                
                            &lt;/div&gt;
                                                    &lt;a name=&quot;nAOlnLt&quot;&gt;&lt;/a&gt;
                            &lt;div class=&quot;image&quot; id=&quot;nAOlnLt&quot;&gt;
                                                                    &lt;h2&gt;Input device&lt;/h2&gt;
                                

                                
                                &lt;div class=&quot;wrapper&quot;&gt;
                                    &lt;div class=&quot;image-hover action-button combobox left&quot; title=&quot;Actions&quot;&gt;
    &lt;div class=&quot;options&quot;&gt;
        
        
        

        
    &lt;/div&gt;
&lt;/div&gt;


                                    &lt;a class=&quot;zoom&quot; href=&quot;http://i.imgur.com/nAOlnLt.png&quot;&gt;
                                        &lt;img class=&quot;unloaded&quot; alt=&quot;Input device&quot;&gt;
                                    &lt;/a&gt;
                                &lt;/div&gt;

                                                                    &lt;p class=&quot;description textbox&quot;&gt;Similar to the output device, each layer of this circuit reads the value of the input sign using /testforblock commands (e.g. testforblock ~-5 ~-2 ~-8 minecraft:wall_sign 4 {Text1:&quot;0&quot;}) and sets the current register to the corresponding numerical value.&lt;/p&gt;
                                
                            &lt;/div&gt;
                                                    &lt;a name=&quot;TVTSjVh&quot;&gt;&lt;/a&gt;
                            &lt;div class=&quot;image&quot; id=&quot;TVTSjVh&quot;&gt;
                                                                    &lt;h2&gt;Example programs&lt;/h2&gt;
                                

                                
                                &lt;div class=&quot;wrapper&quot;&gt;
                                    &lt;div class=&quot;image-hover action-button combobox left&quot; title=&quot;Actions&quot;&gt;
    &lt;div class=&quot;options&quot;&gt;
        
        
        

        
    &lt;/div&gt;
&lt;/div&gt;


                                    &lt;a class=&quot;zoom&quot; href=&quot;http://i.imgur.com/TVTSjVh.png&quot;&gt;
                                        &lt;img class=&quot;unloaded&quot; alt=&quot;Example programs&quot;&gt;
                                    &lt;/a&gt;
                                &lt;/div&gt;

                                                                    &lt;p class=&quot;description textbox&quot;&gt;There are three simple example programs that can be loaded at the moment. The first goes through all values and prints them in an infinite loop. The second adds the numerical value of two input characters and prints the character corresponding to the sum. 

Finally, the most complex is a &quot;Hello World&quot; program that takes about 15 minutes to complete. Here's the full code: +++++[-&amp;gt;&amp;gt;+++++&amp;lt;&amp;lt;]&amp;gt;&amp;gt;.[-&amp;lt;++&amp;lt;++&amp;gt;&amp;gt;]&amp;lt;---.&amp;lt;++.&amp;gt;----.--.&amp;lt;++++.&amp;gt;--.+++++.&amp;lt;++.&lt;/p&gt;
                                
                            &lt;/div&gt;
                                                    &lt;a name=&quot;M8acNZY&quot;&gt;&lt;/a&gt;
                            &lt;div class=&quot;image&quot; id=&quot;M8acNZY&quot;&gt;
                                                                    &lt;h2&gt;Thank you for your attention! :)&lt;/h2&gt;
                                

                                
                                &lt;div class=&quot;wrapper&quot;&gt;
                                    &lt;div class=&quot;image-hover action-button combobox left&quot; title=&quot;Actions&quot;&gt;
    &lt;div class=&quot;options&quot;&gt;
        
        
        

        
    &lt;/div&gt;
&lt;/div&gt;


                                    &lt;a class=&quot;zoom&quot; href=&quot;http://i.imgur.com/M8acNZY.png&quot;&gt;
                                        &lt;img class=&quot;unloaded&quot; alt=&quot;Thank you for your attention! :)&quot;&gt;
                                    &lt;/a&gt;
                                &lt;/div&gt;

                                                                    &lt;p class=&quot;description textbox&quot;&gt;I hope you'll have fun playing with this and use some of the ideas in your own projects. I learned a lot during this project and already have ideas to make it both smaller and faster. I'll try to update the download if a snapshot breaks it before the release of 1.8.&lt;/p&gt;
                                
                            &lt;/div&gt;
                        
                    &lt;/div&gt;
                
            &lt;/div&gt;
</description>
<title>
Minecraft redstone computer running brainfuck (x-post from /r/Minecraft)
</title>
</item>
<item>
<link>
http://haufler.org/2014/01/19/i-hope-i-dont-get-kicked-out-of-yale-for-this/
</link>
<description>
&lt;div&gt;&lt;div class=&quot;insertion&quot;&gt;
              &lt;p&gt;I hope I don&amp;#x2019;t get kicked out of Yale for this.&lt;/p&gt;

&lt;p&gt;In January 2012, two Yale students named Harry Yu and Peter Xu built a replacement to Yale&amp;#x2019;s official course selection website. They it called YBB+ (Yale Bluebook Plus), a &amp;#x201C;plus&amp;#x201D; version of the Yale-owned site, called Yale Bluebook. YBB+ offered different functionality from the official site, allowing students to sort courses by average rating and workload. The official Yale Bluebook, rather, showed a visual graph of the distribution of student ratings as well as a list of written student reviews. YBB+ offered a more lightweight user interface and facilitated easier comparison of course statistics. Students loved it. A significant portion of the student body started using it.&lt;/p&gt;

&lt;p&gt;Fast-forward &lt;strong&gt;two years&lt;/strong&gt;. Last Friday (1/10/14), Yale blocked YBB+&amp;#x2019;s IP address on the school network without warning. When contacted, Yale said that YBB+ infringed upon Yale&amp;#x2019;s trademark. Harry and Peter quickly removed the Yale name from the site, rebranded it as CourseTable and relaunched. Yale blocked the website again, declaring the website to be &lt;a href=&quot;http://haufler.org/img/blocked.png&quot;&gt;malicious activity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Later that weekend, Yale&amp;#x2019;s administration told the student developers that the school didn&amp;#x2019;t approve of the use of its course evaluation data, saying that their website &amp;#x201C;let students see the averaged evaluations far too easily&amp;#x201D;. Harry and Peter were told to &lt;strong&gt;remove the feature from the CourseTable website or else they would be referred to the school&amp;#x2019;s punishment committee&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On Tuesday, Harry and Peter published &lt;a href=&quot;http://coursetable.com/index2.htm&quot;&gt;a blog post&lt;/a&gt; explaining Yale&amp;#x2019;s censorship policy and the Internet exploded. The post hit the front page of Reddit and the top of Hacker News. The Washington Post and Techcrunch covered the story. Around the world, commentators decried Yale&amp;#x2019;s censorship as a freedom of speech violation. The world waited as Yale&amp;#x2019;s administration was silent for three days.&lt;/p&gt;

&lt;p&gt;Finally, Mary Miller, the Dean of Yale College, wrote an &lt;a href=&quot;http://yaledailynews.com/crosscampus/2014/01/17/miller-pens-open-letter-on-ybb/&quot;&gt;open letter&lt;/a&gt; to Yale on Friday night. In this letter, she &lt;strong&gt;defended Yale&amp;#x2019;s decision&lt;/strong&gt; to censor Harry and Peter&amp;#x2019;s website and course rating functionality, stating:&amp;#xA0;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#x201C;[Yale&amp;#x2019;s course] evaluations&amp;#x2026; became available to students only in recent years and with the understanding that the information they made available to students would appear only as it currently appears on Yale&amp;#x2019;s sites &amp;#x2014; in its entirety.&amp;#x201D;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Worded less diplomatically, it appears the Dean of Yale College is expressing to students that, &lt;strong&gt;&amp;#x201C;You can use our course evaluation data, but only if you view the data as we tell you to view it&amp;#x201D;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before you get out your pitchforks, there is one more piece to this puzzle: Yale also told Harry and Peter that the CourseTable website infringed upon the school&amp;#x2019;s copyrighted course data. It appears to be true; CourseTable hosted Yale&amp;#x2019;s course descriptions and student evaluations, or, if not the exact evaluations, they at least hosted derivations of them.&lt;/p&gt;

&lt;p&gt;This copyright assertion, however, reeks of hypocrisy and inconsistency. Yale Bluebook, the official course selection website, was &lt;a href=&quot;http://yaledailynews.com/blog/2012/08/01/university-acquires-yale-bluebook/&quot;&gt;originally a student-made website&lt;/a&gt; &lt;strong&gt;that used the same data as CourseTable&lt;/strong&gt;. Apparently, the student creators of Yale Bluebook received a &lt;em&gt;de facto&lt;/em&gt; license to use Yale&amp;#x2019;s copyrighted data when they designed their site in a manner that Dean Miller felt was &amp;#x201C;appropriate&amp;#x201D;.&lt;/p&gt;

&lt;p&gt;Hypocrisy or not, Yale&amp;#x2019;s copyright assertion appears to be somewhat valid. Although one could argue that the CourseTable website constitutes transformative fair use, I&amp;#x2019;m told that Yale does have a copyright to its course descriptions. This is an unfortunate outcome, since Yale&amp;#x2019;s copyright assertion muddles the argument that Yale&amp;#x2019;s actions violate Peter and Harry&amp;#x2019;s freedom of speech.&lt;/p&gt;

&lt;p&gt;The story does not end here, however, since there&amp;#x2019;s a way to distinguish the freedom of speech issue from the copyright claims. What if someone made a piece of software that displays Yale&amp;#x2019;s course evaluation data in a way that Yale disapproves of, while also (1) not infringing on Yale&amp;#x2019;s copyrights or trademarks, (2) not storing any sensitive data, (3) not scraping or collecting Yale&amp;#x2019;s data, and (4) not causing damages to Yale&amp;#x2019;s network or servers? If Yale censors this piece of software or punishes the software developer, it would clearly characterize Yale as an institution where having authority over students trumps freedom of speech.&lt;/p&gt;

&lt;p&gt;Guess what? I made it last night.&lt;/p&gt;

&lt;p&gt;I built a Chrome Extension called &lt;a href=&quot;https://chrome.google.com/webstore/detail/banned-bluebook/cglpifkaeakoloeiafbanoginnfocinj?hl=en&amp;amp;gl=US&quot;&gt;Banned Bluebook&lt;/a&gt;. It modifies the Chrome browser to add CourseTable&amp;#x2019;s functionality to Yale&amp;#x2019;s official course selection website, showing the course&amp;#x2019;s average rating and workload next to each search result. It also allows students to sort these courses by rating and workload. This is the &lt;a href=&quot;http://haufler.org/img/official-bluebook-screenshot.png&quot;&gt;original site&lt;/a&gt;, and this is the site &lt;a href=&quot;http://haufler.org/img/banned-bluebook-demo.gif&quot;&gt;with Banned Bluebook enabled&lt;/a&gt; (this demo uses randomly generated rating values).&lt;/p&gt;

&lt;p&gt;Banned Bluebook never stores data on any servers. It never talks to any non-Yale servers. Moreover, since my software is smarter at caching data locally than the official Yale course website, I expect that students using this extension will consume &lt;em&gt;less bandwidth over time&lt;/em&gt; than students without it. Don&amp;#x2019;t believe me? You can read the &lt;a href=&quot;https://github.com/seanhaufler/banned-bluebook&quot;&gt;source code&lt;/a&gt;. No data ever leaves Yale&amp;#x2019;s control. Trademarks, copyright infringement, and data security are non-issues. It&amp;#x2019;s 100% kosher.&lt;/p&gt;

&lt;p&gt;My intent behind Banned Bluebook is to demonstrate two points to Dean Miller and the Yale administration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If Yale grants students access to data, the university does not have the right to specify exactly how students must view the data.&lt;/li&gt;

&lt;li&gt;Censorship through IP blocking and Deep Packet Inspection is not only unethical, it&amp;#x2019;s also futile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dean Miller, I humbly request that you, on behalf of Yale, either uphold or deny students&amp;#x2019; right, under &lt;a href=&quot;http://policy.yale.edu/policy/1607-information-technology-appropriate-use-policy&quot;&gt;school policy&lt;/a&gt;, to build software like Banned Bluebook.&lt;/p&gt;

&lt;p&gt;If Yale affirms this right, I&amp;#x2019;d like you to publicly apologize for the events that have transpired over the last week, including Yale&amp;#x2019;s censorship of CourseTable and the pattern of hypocrisy we&amp;#x2019;ve seen in Yale&amp;#x2019;s copyright enforcement of course data.&lt;/p&gt;

&lt;p&gt;If Yale denies this right, I&amp;#x2019;ll see you at the punishment committee.&lt;/p&gt;
              

&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
            &lt;/div&gt;
          &lt;/div&gt;
</description>
<title>
Yale censored a student's course catalog site. I made an unblockable replacement
</title>
</item>
<item>
<link>
http://jeffknupp.com/blog/2014/01/18/python-and-flask-are-ridiculously-powerful/
</link>
<description>
&lt;div&gt;&lt;div class=&quot;entry-content&quot;&gt;
    
        &lt;p&gt;As a developer, I sometimes forget the power I wield. It's easy to forget that,
when something doesn't work the way I'd like, I have the power to change it.
Yesterday, I was reminded of this fact as I finally got fed up with the way
payments are processed for &lt;a href=&quot;http://www.jeffknupp.com/writing-idiomatic-python-ebook/&quot;&gt;my book&lt;/a&gt;.
After being unhappy with the &lt;em&gt;three&lt;/em&gt; different digital-goods payment processors
I've used since the book came out, I took two hours and wrote my own solution
using Python and &lt;a href=&quot;http://flask.pocoo.org&quot;&gt;Flask&lt;/a&gt;. That's right. &lt;em&gt;Two hours&lt;/em&gt;. 
It's now powering my book payment processing and the flow is so incredibly
simple that you can buy the book and begin reading it in 20 seconds.&lt;/p&gt;
&lt;p&gt;Read on to find out how I created my own digital goods payment solution in an
evening.&lt;/p&gt;


&lt;h2&gt;Payment Processor Purchase Problems&lt;/h2&gt;
&lt;p&gt;When I began selling the book, I used a combination of two services (one for 
credit cards and another for PayPal). Eventually, I found a single 
processor capable of supporting both. I've never been happy, though, with any of
them. The most recent processor required users to create an account on the
merchant's system and enter their mailing address (though there was no 
use for it).&lt;/p&gt;
&lt;p&gt;Additionally, I've had a terrible time trying to get Google Analytics to
properly track visitor flow through the entire visit, including the checkout 
process. I always sensed that, if I were able to get that working and run 
A/B tests on my book page, I could greatly increase sales. Without proper 
tracking however, I was out of luck.&lt;/p&gt;
&lt;p&gt;Lastly, sending out book updates is terribly time-consuming using three different
processors. None supported updates well, and I wanted a one-click solution to
sending out book updates. Finding a service that supported that was basically
impossible.&lt;/p&gt;
&lt;h2&gt;Oh Yeah, I'm a Programmer&lt;/h2&gt;
&lt;p&gt;After receiving an email from a customer yesterday about how difficult the
payment process was and informing me that I'm likely losing sales because of
it, I got fed up. I decided to roll my own digital goods management solution. It
needed the following work-flow:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a customer clicks the &quot;Buy Now&quot; button, they should be asked to enter only
their email address and credit card info, click &quot;Confirm&quot;, and be taken to a
unique URL to download the book (generated specifically for that purchase). An 
email should be sent to the customer containing the generated URL (in case the customer 
needs to re-download the book). There should be a limit to the number of 
times (5) they can download it. The purchase and customer information should be
stored in a database, and sending out updates should be a one-command affair.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Clearly, it's not that complicated. The trickiest part would be dynamically generating 
a unique URL that linked to the proper version of the book. Everything else
seemed straightforward.&lt;/p&gt;
&lt;h2&gt;&quot;Flask to the Rescue,&quot; or &quot;A Digital Goods Payment Solution in 100 Lines of Code&quot;&lt;/h2&gt;
&lt;p&gt;Spoiler alert: the resulting application is exactly 100 lines of code. Flask is
a great choice for a web application of this size. It doesn't require a ton of
boilerplate (&lt;em&gt;cough&lt;/em&gt; like Django &lt;em&gt;cough&lt;/em&gt;) but has good plugin support. Bottle
would have been another fine choice, but I've used Flask more recently, so
that's what I chose.&lt;/p&gt;
&lt;p&gt;To begin, I needed to decide how I was going to store the customer and purchase
information. I decided to use &lt;a href=&quot;http://www.sqlalchemy.org&quot;&gt;SQLAlchemy&lt;/a&gt;, since
I've got a lot of experience with it because of
&lt;a href=&quot;http://www.sandman.io&quot;&gt;sandman&lt;/a&gt;. Flask has a plugin, Flask-SQLAlchemy, that
makes using the two together easy. Since I don't need anything too fancy
database-wise, I chose SQLite as my database back-end. &lt;/p&gt;
&lt;p&gt;Having made these decisions, I created a file named &lt;code&gt;app.py&lt;/code&gt; and created the following models:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__tablename__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'product'&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Purchase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__tablename__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'purchase'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'product.id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relationship&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;downloads_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After adding the five different versions of the book to the database (I created
a &lt;code&gt;populate_db.py&lt;/code&gt; file and added them as SQLAlchemy models), I needed to decide
how I was going to actually process payments. Luckily,
&lt;a href=&quot;http://www.stripe.com&quot;&gt;Stripe&lt;/a&gt; makes accepting credit card payments stupidly
easy, and I already had an account with them. Their &quot;checkout.js&quot; solution
creates a form and button on your page. When the button is clicked, a simple and
attractive payment overlay is displayed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jeffknupp.com/images/payment.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;action&lt;/code&gt; attribute of the form points to the page on your site that the user
should be taken to after a successful payment. I added 5 of these buttons to my
book sales site and added another hidden form field to contain the &lt;code&gt;product_id&lt;/code&gt;
(an integer between 1 and 5) of the product that was purchased.&lt;/p&gt;
&lt;h2&gt;Processing Payments&lt;/h2&gt;
&lt;p&gt;Clearly, I needed an endpoint in my application to process a successfully
charged card. I added the following function to do so:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/buy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stripe_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'stripeToken'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'stripeEmail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'product_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;charge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stripe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Charge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'usd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stripe_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stripe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CardError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Card Declined&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Your chard could not&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        be charged. Please check the number and/or contact your credit card&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        company.&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charge&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;purchase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Purchase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;purchase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Thanks for your purchase!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jeff@jeffknupp.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Thanks for buying Writing Idiomatic Python!&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;p&amp;gt;If you didn't already download your copy, you can visit &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;a href=&quot;http://buy.jeffknupp.com/{}&quot;&amp;gt;your private link&amp;lt;/a&amp;gt;. You'll be able to&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;download the file up to five times, at which point the link will&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;expire.&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;purchase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;recipients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/{}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;purchase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, I took a few shortcuts with the code (since I was coding
angrily...). First, I have inline HTML to be returned from an unsuccessful
charge and for the email that is sent upon purchase. That should be extracted
to a global variable or, better, contained in a separate file. Second, I didn't do any
error checking when creating the &lt;code&gt;Purchase&lt;/code&gt; object. But really, the only thing 
that could go wrong is trying to insert a duplicate &lt;code&gt;uuid&lt;/code&gt;, which doesn't
concern me due to the probability of it happening (read: vanishingly small).&lt;/p&gt;
&lt;p&gt;You can see I'm using a &lt;code&gt;mail&lt;/code&gt; object. This comes from the Flask-Mail package,
which makes sending email painless. I simply set it up to use GMail as the mail
server and everything Just Worked. &lt;/p&gt;
&lt;h2&gt;OK, Now Give Me The Book&lt;/h2&gt;
&lt;p&gt;Now that I had the payment portion sorted out, I needed to add an endpoint for
initiating downloads after a purchase. Since I'm using UUIDs as a primary key, I
can also use them as the URL for the download endpoint. When someone hits the
endpoint, I simply need to check that the UUID contained in the URL matches the
UUID of a purchase in the database. If it does, serve the book file and
decrement the &lt;code&gt;downloads_left&lt;/code&gt; attribute. If not, return a &lt;code&gt;404&lt;/code&gt; error.
Here's the code I came up with:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/&amp;lt;uuid&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;download_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;purchase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Purchase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purchase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;purchase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downloads_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;No downloads left!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;You have&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;            exceeded the allowed number of downloads for this file. Please email&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;            jeff@jeffknupp.com with any questions.&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;purchase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downloads_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_from_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'files'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;purchase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_attachment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Very straightforward. Using the UUID as a URL variable, search for a purchase.
If it exists, just check that there are still downloads left and serve the file
attribute of the purchase's product. Otherwise, here's a &lt;code&gt;404&lt;/code&gt; for you.&lt;/p&gt;
&lt;p&gt;Lastly, I needed to add a test endpoint that would allow me to simulate the
purchase process. Here's the code for that endpoint and the portion that runs
the app:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;&amp;lt;http&amp;gt;&amp;lt;body&amp;gt;&amp;lt;form action=&quot;buy&quot; method=&quot;POST&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;script&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    src=&quot;https://checkout.stripe.com/checkout.js&quot; class=&quot;stripe-button&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    data-key=&quot;pk_test_w3qNBkDR8A4jkKejBmsMdH34&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    data-amount=&quot;999&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    data-name=&quot;jeffknupp.com&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    data-description=&quot;Writing Idiomatic Python 3 PDF ($9.99)&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;product_id&quot; value=&quot;2&quot; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;With Great Power Comes... Moar Power!&lt;/h2&gt;
&lt;p&gt;I was actually surprised at how quickly and easily I got this working. The
entire application is &lt;em&gt;a single file containing 100 lines of code&lt;/em&gt;. And it
replaces a very important service I use everyday, one with which I've never been
happy. Finally, I can track purchases without issue, which I'm convinced will
increase sales.&lt;/p&gt;
&lt;p&gt;It's nice to be reminded that, as developers, we have a lot of power to shape
our interactions with the digital world. I, for one, often forget that if I don't
like the way some piece of technology works, I can change it. From
automating mechanical tasks like data entry to automatically sorting and
organizing email, developers have the power to simplify their everyday tasks.&lt;/p&gt;
&lt;p&gt;Having libraries like Flask in your tool belt is crucial to 
solving these sorts of problems, though. As you progress as a developer, you
should be building up a set of tools that work for &quot;core&quot;
problem domains. Flask is a perfect example, since needing to throw together a 
web app is a common problem.&lt;/p&gt;
&lt;p&gt;And of course, sharing what you made is critical as well. I would be remiss if I
created something useful for myself and didn't share it with others. &quot;Sharing&quot;
means more than &quot;putting in a public GitHub repo&quot;. You also need to let people
know about it. From mailing lists to forums to personal blogs, there's no
shortage of avenues for making others aware of what you've created. I always try
to give back to the community, since I've gained so much from it.&lt;/p&gt;
        
    
    
    &lt;div id=&quot;mc_embed_signup&quot; class=&quot;well&quot;&gt;

  &lt;h4&gt;Like this article?&lt;/h4&gt;
  &lt;p&gt;If you found this article useful, please consider a donation via gittip to make sure the high-quality, long form articles keep coming:&lt;/p&gt;
  
  &lt;p&gt;&lt;strong&gt;Sign up for the free jeffknupp.com email newsletter.&lt;/strong&gt; Sent roughly once a month, it focuses on Python programming, scalable web development, and growing your freelance consultancy. And of course, you'll never be spammed, your privacy is protected, and you can opt out at any time.&lt;/p&gt;
&lt;p class=&quot;mc-field-group&quot;&gt;
	&lt;label for=&quot;mce-EMAIL&quot;&gt;Email Address&lt;/label&gt;
	
&lt;/p&gt;
		

&lt;/div&gt;
    
  

&lt;section&gt;
        

        
        &lt;a href=&quot;http://disqus.com&quot; class=&quot;dsq-brlink&quot;&gt;comments powered by &lt;/a&gt;
 
  &lt;/section&gt;
  &lt;/div&gt;

    
&lt;/div&gt;
</description>
<title>
Python and Flask are extremely powerful
</title>
</item>
<item>
<link>
http://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/ISO-IMAGES/10.0/
</link>
<description>
&lt;div&gt;&lt;div class=&quot;list&quot;&gt;
&lt;table summary=&quot;Directory Listing&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
&lt;thead&gt;&lt;tr&gt;&lt;th class=&quot;n&quot;&gt;Name&lt;/th&gt;&lt;th class=&quot;m&quot;&gt;Last Modified&lt;/th&gt;&lt;th class=&quot;s&quot;&gt;Size&lt;/th&gt;&lt;th class=&quot;t&quot;&gt;Type&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class=&quot;n&quot;&gt;&lt;a href=&quot;http://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/ISO-IMAGES/&quot;&gt;Parent Directory&lt;/a&gt;/&lt;/td&gt;&lt;td class=&quot;m&quot;&gt;&amp;#xA0;&lt;/td&gt;&lt;td class=&quot;s&quot;&gt;- &amp;#xA0;&lt;/td&gt;&lt;td class=&quot;t&quot;&gt;Directory&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;n&quot;&gt;&lt;a href=&quot;http://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/ISO-IMAGES/10.0/CHECKSUM.MD5&quot;&gt;CHECKSUM.MD5&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;m&quot;&gt;2014-Jan-16 23:27:15&lt;/td&gt;&lt;td class=&quot;s&quot;&gt;0.3K&lt;/td&gt;&lt;td class=&quot;t&quot;&gt;application/octet-stream&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;n&quot;&gt;&lt;a href=&quot;http://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/ISO-IMAGES/10.0/CHECKSUM.SHA256&quot;&gt;CHECKSUM.SHA256&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;m&quot;&gt;2014-Jan-16 23:26:48&lt;/td&gt;&lt;td class=&quot;s&quot;&gt;0.4K&lt;/td&gt;&lt;td class=&quot;t&quot;&gt;application/octet-stream&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;n&quot;&gt;&lt;a href=&quot;http://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/ISO-IMAGES/10.0/FreeBSD-10.0-RELEASE-amd64-bootonly.iso&quot;&gt;FreeBSD-10.0-RELEASE-amd64-bootonly.iso&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;m&quot;&gt;2014-Jan-16 23:17:42&lt;/td&gt;&lt;td class=&quot;s&quot;&gt;209.9M&lt;/td&gt;&lt;td class=&quot;t&quot;&gt;application/octet-stream&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;n&quot;&gt;&lt;a href=&quot;http://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/ISO-IMAGES/10.0/FreeBSD-10.0-RELEASE-amd64-disc1.iso&quot;&gt;FreeBSD-10.0-RELEASE-amd64-disc1.iso&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;m&quot;&gt;2014-Jan-16 23:15:25&lt;/td&gt;&lt;td class=&quot;s&quot;&gt;622.7M&lt;/td&gt;&lt;td class=&quot;t&quot;&gt;application/octet-stream&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;n&quot;&gt;&lt;a href=&quot;http://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/ISO-IMAGES/10.0/FreeBSD-10.0-RELEASE-amd64-dvd1.iso&quot;&gt;FreeBSD-10.0-RELEASE-amd64-dvd1.iso&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;m&quot;&gt;2014-Jan-16 23:24:02&lt;/td&gt;&lt;td class=&quot;s&quot;&gt;2.3G&lt;/td&gt;&lt;td class=&quot;t&quot;&gt;application/octet-stream&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;n&quot;&gt;&lt;a href=&quot;http://ftp.freebsd.org/pub/FreeBSD/releases/amd64/amd64/ISO-IMAGES/10.0/FreeBSD-10.0-RELEASE-amd64-memstick.img&quot;&gt;FreeBSD-10.0-RELEASE-amd64-memstick.img&lt;/a&gt;&lt;/td&gt;&lt;td class=&quot;m&quot;&gt;2014-Jan-16 23:25:11&lt;/td&gt;&lt;td class=&quot;s&quot;&gt;665.0M&lt;/td&gt;&lt;td class=&quot;t&quot;&gt;application/octet-stream&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<title>
FreeBSD 10.0 is here
</title>
</item>
<item>
<link>
http://bgriffen.scripts.mit.edu/www/2014/01/graphs-of-wikipedia-programming-languages-and-paradigms/
</link>
<description>
&lt;div&gt;&lt;div class=&quot;bk-post-featured-content-wrap&quot;&gt;&lt;a href=&quot;http://bgriffen.scripts.mit.edu/www/wp-content/uploads/2014/01/programminglanguages-label.png&quot;&gt;&lt;img src=&quot;http://bgriffen.scripts.mit.edu/www/wp-content/uploads/2014/01/programminglanguages-label-940x390.png&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;bk-blog-content-wrap dividable-content&quot;&gt;&lt;p&gt;A while back I posted about a graph of &lt;a title=&quot;Graphs Of Wikipedia: Influential Thinkers&quot; href=&quot;http://bgriffen.scripts.mit.edu/www/2013/01/interactive-graphs-of-wikipedia/&quot;&gt;the personalities on Wikipedia&lt;/a&gt;. This time I wanted to see which programming languages were linked to one another by user-entered &amp;#x201C;Influenced&amp;#x201D; and &amp;#x201C;Influenced-by&amp;#x201D; information. Take for instance the functional language Haskell:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bgriffen.scripts.mit.edu/www/wp-content/uploads/2014/01/Haskell-Programming-Wiki.png&quot;&gt;&lt;img class=&quot;size-large wp-image-1439 aligncenter&quot; alt=&quot;Haskell-Programming-Wiki&quot; src=&quot;http://bgriffen.scripts.mit.edu/www/wp-content/uploads/2014/01/Haskell-Programming-Wiki-1024x455.png&quot; width=&quot;940&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the infobox on the side we find a large list of languages Haskell is connected to in one way or another. Wikipedia devotes &lt;a href=&quot;https://en.wikipedia.org/wiki/Haskell_(programming_language)#Related_languages&quot;&gt;an entire section&lt;/a&gt; to how it is related to other programming languages for those interested.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bgriffen.scripts.mit.edu/www/wp-content/uploads/2014/01/Haskell-Programming-Influenced.png&quot;&gt;&lt;img class=&quot;size-full wp-image-1438 aligncenter&quot; alt=&quot;Haskell Programming - Influenced&quot; src=&quot;http://bgriffen.scripts.mit.edu/www/wp-content/uploads/2014/01/Haskell-Programming-Influenced.png&quot; width=&quot;243&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It must be emphasized that the links are&amp;#xA0;&lt;em&gt;user-generated&lt;/em&gt;&lt;em&gt;&amp;#xA0;&lt;/em&gt;and any such comparison is largely subjective in nature (especially when comparing concepts rather than syntax). The following query &lt;a href=&quot;http://dbpedia.org/snorql/&quot; target=&quot;_blank&quot;&gt;executed here&lt;/a&gt; provided me with the bulk of the data:&lt;/p&gt;
&lt;pre class=&quot;brush: sql; title: ; notranslate&quot; title=&quot;&quot;&gt;
SELECT *
WHERE { ?p a &amp;lt;http://dbpedia.org/ontology/ProgrammingLanguage&amp;gt; .
?p &amp;lt;http://dbpedia.org/ontology/influenced&amp;gt; ?influenced . }
&lt;/pre&gt;
&lt;p&gt;The output was then decoded using &lt;a href=&quot;http://meyerweb.com/eric/tools/dencoder/&quot; target=&quot;_blank&quot;&gt;a nifty URL decoder&lt;/a&gt;. It was then &lt;a href=&quot;https://github.com/bgriffen/griffsgraphs/blob/master/programminglanguages/proglanguages.py&quot; target=&quot;_blank&quot;&gt;fed through a Python script&lt;/a&gt; to arrange it in a format most suitable for Gephi. The graph below represents the connections between all programming languages in Wikipedia. A force algorithm was applied such that closer nodes are more strongly connected in nature. The size of the node indicates how many connections that language has to the others in the network. The colors are achieved by carrying out a modularity algorithm applied by Gephi to highlight subnetworks.  The curvature of outgoing edges is clockwise indicating influence direction. Lisp for example has many clockwise edges going out and only few counter-clockwise coming in. I can see some relations in the languages I am familiar with but perhaps you notice a few things that are flat out wrong? Please let me know in the comments as I&amp;#x2019;d be interested in hearing your thoughts. The raw Gephi graph data (.dl, .dfg, .gephi, .dexf, .gml etc.) can be &lt;a href=&quot;http://bgriffen.scripts.mit.edu/www/wp-content/uploads/2014/01/programminglanguage-data.zip&quot; target=&quot;_blank&quot;&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
[&lt;a href=&quot;http://bgriffen.scripts.mit.edu/www/wp-content/uploads/2014/01/programminglanguages-label.png&quot; target=&quot;_blank&quot;&gt;PNG&lt;/a&gt;]&lt;br&gt;
&lt;br&gt;
I also include the same graph but with straight arrows clearly showing the influence direction.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
[&lt;a href=&quot;http://bgriffen.scripts.mit.edu/www/wp-content/uploads/2014/01/programminglanguagesarrows-label.png&quot; target=&quot;_blank&quot;&gt;PNG&lt;/a&gt;] &lt;/p&gt;
&lt;p&gt;As one might expect all of the major players are the biggest nodes. C, Haskell, Lisp, Python and Java all feature prominently. Anything strange you notice? Let me know in the comments. I really must commend the designers on their nomenclature. See if you can find one of the more humorous languages by zooming in. I also obtained the designer of each language and connected the people together based on the programming languages they were involved with. This was obtained by the following query:&lt;/p&gt;
&lt;pre class=&quot;brush: sql; title: ; notranslate&quot; title=&quot;&quot;&gt;
SELECT *
WHERE {?p a &amp;lt;http://dbpedia.org/ontology/ProgrammingLanguage&amp;gt; .
?p &amp;lt;http://dbpedia.org/ontology/designer&amp;gt; ?designer . }
&lt;/pre&gt;

&lt;p&gt;[&lt;a href=&quot;http://bgriffen.scripts.mit.edu/www/wp-content/uploads/2014/01/designers-highreslabel.png&quot; target=&quot;_blank&quot;&gt;PNG&lt;/a&gt;]&lt;br&gt;
Large nodes do not represent more influential people but simply the people whose work spawned the most number of languages in the subsequent years. As expected, it is a very homogeneous playing field as many people were involved in multiple languages and at times had many collaborators. It must be stressed that the dataset is incomplete and was the result of my somewhat rudimentary way of parsing the data. Without a doubt, things could be improved. &lt;a href=&quot;https://github.com/bgriffen/griffsgraphs&quot; target=&quot;_blank&quot;&gt;I&amp;#x2019;ve setup a GitHub repository&lt;/a&gt; for all (Gephi) graph files and images for those interested. Feel free to embed or share the above images. Lastly, please keep in mind where this data is coming from: contributors of Wikipedia. Whilst they are a studious bunch, they aren&amp;#x2019;t without faults so take up any problems with the graph with the pages themselves as that is all this represents.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
</description>
<title>
Graph Of Programming Languages and Their Designers
</title>
</item>
</channel>
</rss>
