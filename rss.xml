<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0'>
<channel>
<generator>
clj-rss
</generator>
<link>
https://news.ycombinator.com
</link>
<title>
myread
</title>
<description>
myread
</description>
<item>
<author>
RJ Nowling
</author>
<link>
http://discretestates.blogspot.com/2014/01/response-to-math-is-not-necessary-for.html
</link>
<description>
&lt;div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-8006763369905331017&quot;&gt;
Ross Hunter recently wrote a &lt;a href=&quot;http://www.mutuallyhuman.com/blog/2014/01/14/math-is-not-necessary-for-software-development/&quot;&gt;blog entry&lt;/a&gt; on Mutually Human arguing that math is not necessary for being a good software developer. &amp;#xA0;I agree with his thesis -- math isn't necessary. &amp;#xA0;However, Ross shouldn't then jump to the conclusion that math isn't useful for software development. Math may not be necessary but it can certainly be useful.&lt;br&gt;
&lt;br&gt;
I'll start by addressing relevant points in his argument and try to clear up perceived misconceptions.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;&lt;u&gt;First Argument:&lt;/u&gt;&lt;/b&gt;&lt;br&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;The skills that make a good mathematician are not the same as the skills that make for a good software developer.&lt;/li&gt;
&lt;li&gt;Math is the process of breaking down complex problems into simpler problems, recognizing patterns, and applying known formulae.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Math is often taught in a way where students learn how to solve problems by identifying patterns. &amp;#xA0;Once the student identifies the pattern, they can solve the problem using the approach they memorized. &amp;#xA0;It's unfortunate that math is taught this way because people like Ross come away with a very incomplete and distorted picture of math. &amp;#xA0;I would call this &quot;computation&quot; rather than math.&lt;/p&gt;

&lt;p&gt;
The reason we have &quot;known formulae&quot; is precisely because of the practice of actual mathematics. In my mind, mathematics is the process of analyzing a formal system with logic. A mathematician starts by defining the basis of a formal system by specifying an initial set of rules by way of axioms, or statements which are held to be true without proof. &amp;#xA0;Next, the mathematician recursively applies logic to determine what the implications of the axioms are and if any additional rules can be then be defined. &amp;#xA0;As more and more rules are proven, the system becomes more powerful. &amp;#xA0;&lt;/p&gt;

&lt;p&gt;
Often times, mathematicians will be looking to see if a specific rule can be implied from the initial set of axioms. &amp;#xA0;If they find that this is not the case, the mathematicians may apply creative thinking to look for more specific cases where the rule does hold true or may change the axioms. &amp;#xA0;A good example is the complex number system. &amp;#xA0;When faced with the square roots of negative values, mathematicians had to define a new mathematical object (the imaginary number) to be able to reason about such results. This process can actually be quite creative.&lt;/p&gt;

&lt;p&gt;
Speaking from personal experience and comments made by others, a good math education can be a significant advantage. &amp;#xA0;Reasoning through complex arguments and formal systems has made me much more detail oriented than I was before. &amp;#xA0;Math has improved my problem solving skills. &amp;#xA0;It's also enabled me to reason formally about software, which can be very important when developing distributed systems, for example.&lt;/p&gt;

&lt;p&gt;
It's unfortunate that the way math is often taught fails our students. &amp;#xA0;Students are often taught the results found over thousands of years, but not the methodology for discovering the results. &amp;#xA0;Classes like algebra, calculus, and introductory statistics are examples which focus on results rather than methodology. Unfortunately, these are also the most popular math classes since they are required in most high schools and college science majors!&lt;/p&gt;

&lt;p&gt;
Ross points out that he loved his discrete math class. &amp;#xA0;Discrete math, along with others such as geometry, graph theory, and combinatorics, are much better courses for teaching students the methods rather than results. &amp;#xA0;All of the subject material can be derived from a few simple definitions and axioms, giving students the opportunity to learn the mathematical process. &amp;#xA0;Imagine the benefit for students if they were taught Real Analysis or Modern Algebra instead of calculus? &amp;#xA0;As Ross rightly argues, in many cases, a solid foundation in logical thinking can more broadly applicable than calculus.&lt;/p&gt;
&lt;p&gt;
&lt;br&gt;
(I would also like to correct Ross's description of discrete math. &amp;#xA0;Ross implies that discrete math only consists of logic and boolean algebra. &amp;#xA0;This is, of course, wrong -- discrete math covers a range of topics such as set theory, combinatorics, and graph theory as well.)&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;&lt;u&gt;Second Argument:&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Math, there is only one right answer, but in software development, there is rarely a singular right answer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Ross assumes that if a student is trained in mathematics, they will not be able to deal with grey situations. &amp;#xA0;Maybe Ross assumes that people are only studying math? &amp;#xA0;Or maybe he assumes that people are not capable of learning new ways of thinking or analyzing situations critically? Either way, this argument doesn't hold water.&lt;/p&gt;

&lt;p&gt;
Like any skill or way of thinking we have developed, learning where and when to apply it is an important part of gaining experience. &amp;#xA0;Ideally, a student would also be exposed to the humanities or cutting edge problems in the sciences where there are not clear answers. (Science education faces a similar problem -- a focus on results, not methods.) &amp;#xA0;Even if the student only studies math, it would be safe to assume that people can learn and adapt as they gain experience. &amp;#xA0;That is fundamentally part of being human.&lt;/p&gt;

&lt;p&gt;
There are also cases where math rarely involves a single correct answer. &amp;#xA0;A mathematician may have multiple ways of defining the initial axioms, each with their own trade offs. &amp;#xA0;For example, there are variations on Euclidean geometry that change the initial axioms and end up with very different properties.&lt;/p&gt;

&lt;br&gt;
&lt;b&gt;&lt;u&gt;Math IS Useful:&lt;/u&gt;&lt;/b&gt;&lt;br&gt;
Although math education is not necessary for software development, it is useful. &amp;#xA0;I've already described how math teaches good problem solving skills and critical thinking. &amp;#xA0;With the shift towards &quot;internet scale&quot; systems and big data, math is even more important than before.&lt;br&gt;
&lt;br&gt;
Consider the case of evaluating and tuning a complex software system to squeeze out every last bit of performance. &amp;#xA0;A well-controlled experiment and appropriate use of statistics is necessary to accurately access the response of the system under various conditions. &amp;#xA0;A software developer doesn't want to waste time performance tuning the areas of the system contributing least to the run-time -- they want to know what's eating up all the time so they can use their time efficiently.&lt;br&gt;
&lt;br&gt;
A better example would be the rise of machine learning and data mining. &amp;#xA0;Users leak data left and right, which is collected by nearly every internet company. &amp;#xA0;The data is then processed to predict what the user might like to target ads or improve the user experience. &amp;#xA0;Machine learning is also used in the banking apps on our cell phones to read hand-written checks. &amp;#xA0;The popularity of machine learning is exploding as more and more uses are found. &amp;#xA0;I predict that many software developers will need to be proficient in machine learning techniques in the future. &amp;#xA0;Since machine learning is based on math and statistics, there may be a time when most software developers will need to know some linear algebra, statistics, and calculus.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;&lt;u&gt;All Knowledge is Useful:&lt;/u&gt;&lt;/b&gt;&lt;br&gt;
Every subject offers an opportunity to apply our skills in a new way and train our brains to be even better. &amp;#xA0;One of the benefits of a liberal arts education is that students are expected to take a number of courses outside their major. &amp;#xA0;A programmer who decides to study math, literature, history, or art may find that they have developed a number of skills and tools that traditional Computer Scientists lack.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;b&gt;&lt;u&gt;So is Experience:&lt;/u&gt;&lt;/b&gt;&lt;br&gt;
Experience is a great teacher, especially in software development. &amp;#xA0;Spending hours debugging code is a great way to learn how a project works and to remember what caused the bug in the first case. &amp;#xA0;The next time you see a similar bug, you won't have to spend nearly as much time hunting its source down.&lt;br&gt;
&lt;br&gt;
Experience also offers the benefit of knowing what works best in practice. &amp;#xA0;Ross points out that sometimes clever people will write code that is TOO clever. &amp;#xA0;They have sacrificed readability and effort for laziness or intellectual satisfaction. &amp;#xA0;This is not a problem of mathematicians, though. &amp;#xA0;This is a problem that comes from a lack of experience.&lt;br&gt;
&lt;br&gt;
In the end, I agree that math is not necessary for software development&amp;#xA0;(yet)&amp;#xA0;. &amp;#xA0;I also think that we could and should change the required math courses for computer science majors to reflect courses that will focus on logic and reasoning. &amp;#xA0;But, we shouldn't be attacking math or implying that it has no value. &amp;#xA0;For some of us, math education has been a valuable part of our training.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;

&lt;/div&gt;

&lt;/div&gt;
</description>
<title>
Response to &quot;Math is Not Necessary for Software Development&quot;
</title>
</item>
<item>
<link>
http://motherboard.vice.com/en_ca/blog/maybe-the-most-orwellian-text-message-ever-sent
</link>
<description>
&lt;div&gt;&lt;div class=&quot;story-content&quot;&gt;
                                        &lt;img src=&quot;http://lh3.ggpht.com/u5K_Xp_M7NDqPKGrNP3BC9Oxd808bjXyFvygqUcFpBWqLN0_fHlpzV8Ld8eM_531v_YcR0yN9lEPTgH7XqZxywX6FmoyQWL78U0=s630&quot; width=&quot;630&quot; alt=&quot;&quot;&gt;
                                    

&lt;p&gt;&amp;#x201C;Dear subscriber, you are registered as a participant in a mass disturbance.&amp;#x201D;&lt;/p&gt;

&lt;p&gt;That's a text message that thousands of Ukrainian protesters spontaneously&amp;#xA0;received on their cell phones today, as&amp;#xA0;a new law prohibiting public demonstrations went into effect. It was the regime's police force, sending protesters&amp;#xA0;the perfectly dystopian text message to accompany the newly minted,&amp;#xA0;perfectly dystopian legislation. In fact, it's downright Orwellian (and I hate&amp;#xA0;that adjective, and&amp;#xA0;only use it when absolutely necessary,&amp;#xA0;I swear).&lt;/p&gt;

&lt;p&gt;But that's what this is:&amp;#xA0;it's technology employed to detect noncompliance, to hone in on dissent.&amp;#xA0;The &lt;a href=&quot;http://www.nytimes.com/2014/01/22/world/europe/ukraine-protests.html?_r=0&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;NY Times&lt;/em&gt;&amp;#xA0;reports&lt;/a&gt; that the &quot;Ukrainian government used telephone technology to pinpoint the locations of cell phones in use near clashes between riot police officers and protesters early on Tuesday.&quot;&amp;#xA0;&lt;em&gt;Near&lt;/em&gt;. Using a cell phone near a clash lands you on the regime's hit list.&amp;#xA0;&lt;/p&gt;

&lt;p&gt;See, Kiev is &lt;a href=&quot;http://www.ustream.tv/channel/euromajdan/pop-out&quot; target=&quot;_blank&quot;&gt;tearing itself to shreds right now&lt;/a&gt;, but since we're&amp;#xA0;kind of burned out on protests, riots, and revolutions at the moment, it's being treated as below-the-fold news. Somehow, the fact that &lt;a href=&quot;http://www.businessinsider.com/ukraine-protests-what-you-need-to-know-2013-12&quot; target=&quot;_blank&quot;&gt;over a million&amp;#xA0;people&lt;/a&gt; are marching, camping out, and battling with Ukraine's increasingly authoritarian government is barely making a ripple behind such blockbuster news bits as&amp;#xA0;bridge closures and polar vortexes. Yes, even though protesters are literally building catapaults and wearing medieval armor and manning &lt;a href=&quot;http://www.flickr.com/photos/jordibernabeu/11178528714/&quot; target=&quot;_blank&quot;&gt;flaming dump trucks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully news of the nascent&amp;#xA0;techno-security state will turn some heads&amp;#x2014;it's right out of &lt;em&gt;1984,&amp;#xA0;&lt;/em&gt;or, more recently,&amp;#xA0;&lt;a href=&quot;http://motherboard.vice.com/blog/elysium-science-fiction-tricked-hollywood-into-making-the-years-most-radical-film&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Elysium&lt;/em&gt;&lt;/a&gt;:&amp;#xA0;technology deployed to &quot;detect&quot; dissent.&amp;#xA0;Again, this tech appears to be highly arbitrary; anyone near the protest is liable to be labeled a &quot;participant,&quot; as if targeting protesters directly and so broadly wasn't bad enough in the first place.&lt;/p&gt;

&lt;p&gt;It's further&amp;#xA0;reminder that authoritarian regimes are exploiting the very technology once celebrated as a vehicle&amp;#xA0;for liberation; last year, in Turkey, you'll recall, the state &lt;a href=&quot;http://motherboard.vice.com/blog/turkish-prime-minister-characterizes-twitter-as-menace-to-society&quot; target=&quot;_blank&quot;&gt;rounded up dissident Twitter users&lt;/a&gt;. Now, Ukraine is&amp;#xA0;tracing the phone signal&amp;#xA0;directly. Dictators have already proved plenty adept at &lt;a href=&quot;http://motherboard.vice.com/blog/are-governments-getting-trigger-happy-with-the-internet-kill-switch&quot; target=&quot;_blank&quot;&gt;pulling the plug on the internet&lt;/a&gt; altogether.&lt;/p&gt;

&lt;p&gt;All of this puts lie to the lately-popular mythology that technology is inherently a liberating force&amp;#x2014;with the right hack, it&amp;#xA0;can oppress just as easily.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;Reach this writer at brian.merchant(at)vice.com and on Twitter, at&amp;#xA0;&lt;a href=&quot;https://twitter.com/bcmerchant&quot; target=&quot;_blank&quot;&gt;@bcmerchant&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;More&amp;#xA0;Dystopian Drift:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://motherboard.vice.com/blog/the-1-percent-raked-20-percent-of-americas-cash-last-year-dystopia-looms&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;With Unprecedented Inequality, the US Looks More Like a Dystopia Than Ever&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://motherboard.vice.com/read/motherboard-tv-free-the-network&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;&lt;i&gt;Free the Network&lt;/i&gt;&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;i&gt;&lt;a href=&quot;http://motherboard.vice.com/blog/things-are-getting-orwellian-at-exxons-arkansas-oil-spill&quot; target=&quot;_blank&quot;&gt;Things Are Getting Orwellian at Exxon's Arkansas Oil Spill&lt;/a&gt;&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://motherboard.vice.com/blog/edward-snowden-says-our-world-is-worse-than-1984-in-grim-christmas-message&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;&lt;i&gt;Edward Snowden Says Our World Is Worse than '1984'&lt;/i&gt;&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;


            &lt;/div&gt;

            
            &lt;/div&gt;
</description>
<title>
“Dear subscriber, you are registered as a participant in a mass disturbance.”
</title>
</item>
<item>
<link>
item?id=7102282
</link>
<description>

</description>
<title>
20 comments
</title>
</item>
<item>
<link>
item?id=7102161
</link>
<description>

</description>
<title>
2 comments
</title>
</item>
<item>
<link>
http://gcc.gnu.org/ml/gcc/2014-01/msg00176.html
</link>
<description>
&lt;div&gt;&lt;body&gt;



&lt;p&gt;This is the mail archive of the 
&lt;tt&gt;gcc@gcc.gnu.org&lt;/tt&gt;
mailing list for the &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC project&lt;/a&gt;.






&lt;/p&gt;









&lt;ul&gt;
&lt;li&gt;&lt;em&gt;From&lt;/em&gt;: esr at thyrsus dot com (Eric S. Raymond)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To&lt;/em&gt;: rms at gnu dot org, gcc at gcc dot gnu dot org, emacs-devel at gnu dot org&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Date&lt;/em&gt;: Tue, 21 Jan 2014 15:19:49 -0500 (EST)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subject&lt;/em&gt;: clang and FSF's strategy&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authentication-results&lt;/em&gt;: sourceware.org; auth=none&lt;/li&gt;
&lt;/ul&gt;





&lt;pre&gt;David Kastrup's recent question on emacs-devel motivates me to bring
up a larger related question I've been meaning to open for a while: Are the
FSF's goals best served by continuing to technically restrict GCC?

This is a question in which I have some positive stake.  Yes, I
continue to be opposed to the FSF's style of propaganda exactly
because I think it hinders an end goal - a software ecosystem that is
open-source and user-controlled - that I agree with and have worked
hard to achieve. On the other hand, I have always said that the FSF's
artifacts are its best artillery, and GCC is certainly one of the
biggest guns in that arsenal.

I want GCC to do what the FSF wants it to do - promote freedom and
openness, erode proprietary control, prevent vendor lock-in of
development toolchains. I think it is time to question whether the
anti-plugins policy is still the best way to accomplish this.

What gives this question point is the very existence of clang.  The
clang developers aren't shy about saying in public that they regard
the FSF's anti-plugin policy as obstructive and that this is a major
motivation for their work.  And they're making excellent progress;
clang is a production-quality tool today, not yet as mature as GCC but
with better features in some areas - its error messages, in particular
are *far* superior.

The clang developers very carefully do *not* say that they aim to make
GCC obsolete and relegate it to the dustbin of discarded tech.  But I
believe that is unmistakably among their goals, and I judge that they
are a credible threat to GCCs's dominance in the 3- to 5-year
timeframe.

It might be that my goals would actually be advanced if clang were to
kick GCC off the top of the heap.  That is, there is at least a
possible world in which a serious hit to FSF's prestige would decrease
its ability to hinder progress through PR I have made no secret of
considering ham-handed and counterproductive.

For the present I choose to ignore this possibility. It seems better
to me to promote as vigorous as possible a competitive race between 
GCC and clang, so that both will improve and the the aggregate position
of open-source toolchains will strengthen.

Therefore, I point out that FSF can no longer prevent proprietary
vendors from plugging into a free compiler to improve their tools.
That horse has left the barn; the strategic goal of the anti-plugin
policy has been definitively busted.

I also think it bears noticing that nobody outside of Microsoft seems
to particularly want to write proprietary compilers any more.  GCC won
its war; the cost and time-to-market advantages of hooking into
open-source toolchains are now so widely understood that new processor
designs support them as a matter of course.

Wouldn't it make sense, then, to entirely drop the factoring
restrictions from GCC so it can compete for developer attention more
effectively with clang?

Before clang existed, back when GCC had a near monopoly in its
competitive space, there might have been a functional case for those
restrictions. Reasonable people may differ on that; there's no point
in arguing it retrospectively. Now, I submit, they have become a pointless
gesture that serves only to hinder GCC development abd increase
clang's competitive advantage.

GCC has a lot of strengths to play from, most notably the maturity of
its multiplatform and cross-development support.  I urge the FSF to
fully free the code - drop the policy restrictions, encourage a
flourishing ecosystem of surrounding plugins.  Let GCC, clang, and
other alternatives compete for attention on pure technical merit.

I think the last fifteen years have demonstrated that in this sort of
competition, the proprietary vendors will eat dust if they try to
outcompete open-source tools on their own ground. Furthermore, they've
learned this the hard way, and are quite unlikely to try.  There are
less risky uses for their NRE.

In some sense I don't really care who wins.  Either GCC or clang
will serve my needs. I do prefer that both tools be as excellent
as possible.  And it would be nice if the FSF were to demonstrate that
it can recognize changed conditions and move with the times.
-- 
		&amp;lt;a href=&quot;&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.catb.org/~esr/&amp;amp;quot&quot;&gt;http://www.catb.org/~esr/&amp;amp;quot&lt;/a&gt;;&amp;gt;Eric S. Raymond&amp;lt;/a&amp;gt;

There's a tendency today to absolve individuals of
moral responsibility and treat them as victims of
social circumstance.  You buy that, you pay with your
soul.
		-Tom Robbins, Still Life with Woodpecker

&lt;/pre&gt;
















&lt;/body&gt;
&lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;body&gt;



&lt;p&gt;This is the mail archive of the 
&lt;tt&gt;gcc@gcc.gnu.org&lt;/tt&gt;
mailing list for the &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC project&lt;/a&gt;.






&lt;/p&gt;









&lt;ul&gt;
&lt;li&gt;&lt;em&gt;From&lt;/em&gt;: David Kastrup &amp;lt;dak at gnu dot org&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To&lt;/em&gt;: gcc at gcc dot gnu dot org&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cc&lt;/em&gt;: emacs-devel at gnu dot org&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Date&lt;/em&gt;: Wed, 22 Jan 2014 01:07:12 +0100&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subject&lt;/em&gt;: Re: clang and FSF's strategy&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authentication-results&lt;/em&gt;: sourceware.org; auth=none&lt;/li&gt;
&lt;li&gt;&lt;em&gt;References&lt;/em&gt;: &amp;lt;20140121201949 dot 21DE1380522 at snark dot thyrsus dot com&amp;gt;&lt;/li&gt;
&lt;/ul&gt;





&lt;pre&gt;esr@thyrsus.com (Eric S. Raymond) writes:

&amp;gt; David Kastrup's recent question on emacs-devel motivates me to bring
&amp;gt; up a larger related question I've been meaning to open for a while:
&amp;gt; Are the FSF's goals best served by continuing to technically restrict
&amp;gt; GCC?

I don't think that's even a sensible question.  The point of the GPL is
to promote expansion of Free Software, and the tool it uses for doing so
is by covering licensing of &quot;the work as a whole&quot;.  When providing full
technical capabilities for accessing the functionality of of program
without creating a larger whole in the process, we are basically down to
the LGPL.

So most definitely the FSF's goals are best served by continuing to
technically restrict GCC.  If there is any question, the question is
rather _what_ restrictions serve its interests more than it impedes
them.  Since any lifted restrictions cannot easily be reinstated, it
makes sense to be conservative.

&amp;gt; This is a question in which I have some positive stake.  Yes, I
&amp;gt; continue to be opposed to the FSF's style of propaganda exactly
&amp;gt; because I think it hinders an end goal - a software ecosystem that is
&amp;gt; open-source and user-controlled - that I agree with and have worked
&amp;gt; hard to achieve.

You are crossposting to two public project lists of the GNU project with
inflammatory language and mischaracterizations.  You have been involved
with the GNU project long enough to be well aware that this kind of
crowbar approach does not lead to much more than headlines about Free
Software infighting.

&amp;gt; The clang developers very carefully do *not* say that they aim to make
&amp;gt; GCC obsolete and relegate it to the dustbin of discarded tech.

Like most Free Software, GCC started out in a state where its technical
competitiveness placed it in the dustbin.  And that's a state the GNU
project prefers over that of it being an enabling and seminal part of
proprietary software &quot;ecosystems&quot;.  That's the reason GNU software is
licensed under copyleft rather than permissive licenses, and the
criterion of popularity should not render that choice irrelevant.

There is leeway for making and balancing individual decisions according
to individual tradeoffs.

Your black-and-white and all-or-nothing rhetoric and confrontational
style is not helpful for that.

&amp;gt; Therefore, I point out that FSF can no longer prevent proprietary
&amp;gt; vendors from plugging into a free compiler to improve their tools.

And we could not prevent proprietary vendors from plugging into
proprietary compilers to improve their tools, either.  And things like
Microsoft Visual C++ and the Intel compilers are quite competitive in
technical respects.  The only thing we ever have been able to prevent
people to do is them plugging into _our_ free compiler.

&amp;gt; That horse has left the barn;

Lots of horses have left the barn.  That's irrelevant as long as it is
not the horse we are sitting on.

&amp;gt; I also think it bears noticing that nobody outside of Microsoft seems
&amp;gt; to particularly want to write proprietary compilers any more.

Huh?  Intel still writes proprietary compilers, basically every GPU
vendor boosts his own proprietary compiler.

&amp;gt; In some sense I don't really care who wins.  Either GCC or clang will
&amp;gt; serve my needs. I do prefer that both tools be as excellent as
&amp;gt; possible.  And it would be nice if the FSF were to demonstrate that it
&amp;gt; can recognize changed conditions and move with the times.

The whole point of the FSF was _not_ to &quot;move with the times&quot;.  If you
would be willing to forego your popularity contest based approach, you
might have a better chance of getting actual adjustments in the details.

But at the core level, I see a fundamental miscomprehension about the
contexts in which strong copyleft and the GNU project operate and make
sense.  As long as you don't come to terms with that, I don't see this
discussion leading anywhere.  And that's not even taking into account
that key players tend to be less than amused about such a
confrontational approach.

-- 
David Kastrup

&lt;/pre&gt;






&lt;ul&gt;&lt;li&gt;&lt;strong&gt;References&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a name=&quot;00176&quot; href=&quot;http://gcc.gnu.org/ml/gcc/2014-01/msg00176.html&quot;&gt;clang and FSF's strategy&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;









&lt;/body&gt;
&lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;body&gt;



&lt;p&gt;This is the mail archive of the 
&lt;tt&gt;gcc@gcc.gnu.org&lt;/tt&gt;
mailing list for the &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC project&lt;/a&gt;.






&lt;/p&gt;









&lt;ul&gt;
&lt;li&gt;&lt;em&gt;From&lt;/em&gt;: Alexandre Oliva &amp;lt;oliva at gnu dot org&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To&lt;/em&gt;: esr at thyrsus dot com (Eric S. Raymond)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cc&lt;/em&gt;: rms at gnu dot org, gcc at gcc dot gnu dot org, emacs-devel at gnu dot org&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Date&lt;/em&gt;: Tue, 21 Jan 2014 22:50:12 -0200&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subject&lt;/em&gt;: Re: clang and FSF's strategy&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authentication-results&lt;/em&gt;: sourceware.org; auth=none&lt;/li&gt;
&lt;li&gt;&lt;em&gt;References&lt;/em&gt;: &amp;lt;20140121201949 dot 21DE1380522 at snark dot thyrsus dot com&amp;gt;&lt;/li&gt;
&lt;/ul&gt;





&lt;pre&gt;On Jan 21, 2014, esr@thyrsus.com (Eric S. Raymond) wrote:

&amp;gt; I think it is time to question whether the anti-plugins policy is
&amp;gt; still the best way to accomplish this.

Err...  Excuse me, but what anti-plugins policy are you talking about?

The runtime license exception designed to make room for GCC plugins
without endangering its copyleft is almost 5 years old!

Did you feel so aligned with clang's FSF-disparaging propaganda that you
failed to check the facts, or are you being intentionally specious?


That GCC plugin interface is not sufficiently stable for major
uncoordinated developments by third-parties is just as true as that
Linux's module interface is constantly changing, and complaints about
its lack of stability in it are often responded with such phrases as
&amp;#xE2;contribute your driver and we'll even help you keep it up-to-date&amp;#xE2;.

If you were to applaud one while voicing objections to the other,
someone might even get the idea you're using double standards ;-)

-- 
Alexandre Oliva, freedom fighter    &lt;a rel=&quot;nofollow&quot; href=&quot;http://FSFLA.org/~lxoliva/&quot;&gt;http://FSFLA.org/~lxoliva/&lt;/a&gt;
You must be the change you wish to see in the world. -- Gandhi
Be Free! -- &lt;a rel=&quot;nofollow&quot; href=&quot;http://FSFLA.org/&quot;&gt;http://FSFLA.org/&lt;/a&gt;   FSF Latin America board member
Free Software Evangelist     Red Hat Brazil Toolchain Engineer

&lt;/pre&gt;






&lt;ul&gt;&lt;li&gt;&lt;strong&gt;References&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a name=&quot;00176&quot; href=&quot;http://gcc.gnu.org/ml/gcc/2014-01/msg00176.html&quot;&gt;clang and FSF's strategy&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;









&lt;/body&gt;
&lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;body&gt;



&lt;p&gt;This is the mail archive of the 
&lt;tt&gt;gcc@gcc.gnu.org&lt;/tt&gt;
mailing list for the &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC project&lt;/a&gt;.






&lt;/p&gt;









&lt;ul&gt;
&lt;li&gt;&lt;em&gt;From&lt;/em&gt;: Stefan Monnier &amp;lt;monnier at iro dot umontreal dot ca&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To&lt;/em&gt;: esr at thyrsus dot com (Eric S. Raymond)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cc&lt;/em&gt;: rms at gnu dot org,  gcc at gcc dot gnu dot org,  emacs-devel at gnu dot org&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Date&lt;/em&gt;: Tue, 21 Jan 2014 20:31:04 -0500&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subject&lt;/em&gt;: Re: clang and FSF's strategy&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authentication-results&lt;/em&gt;: sourceware.org; auth=none&lt;/li&gt;
&lt;li&gt;&lt;em&gt;References&lt;/em&gt;: &amp;lt;20140121201949 dot 21DE1380522 at snark dot thyrsus dot com&amp;gt;&lt;/li&gt;
&lt;/ul&gt;





&lt;pre&gt;&amp;gt; up a larger related question I've been meaning to open for a while: Are the
&amp;gt; FSF's goals best served by continuing to technically restrict GCC?

Let me repeat: please stop discussing such things on this list.
There are things like gnu.misc.discuss for that.


        Stefan

&lt;/pre&gt;






&lt;ul&gt;&lt;li&gt;&lt;strong&gt;References&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a name=&quot;00176&quot; href=&quot;http://gcc.gnu.org/ml/gcc/2014-01/msg00176.html&quot;&gt;clang and FSF's strategy&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;









&lt;/body&gt;
&lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;body&gt;



&lt;p&gt;This is the mail archive of the 
&lt;tt&gt;gcc@gcc.gnu.org&lt;/tt&gt;
mailing list for the &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC project&lt;/a&gt;.






&lt;/p&gt;









&lt;ul&gt;
&lt;li&gt;&lt;em&gt;From&lt;/em&gt;: Ian Lance Taylor &amp;lt;iant at google dot com&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To&lt;/em&gt;: &quot;Eric S. Raymond&quot; &amp;lt;esr at thyrsus dot com&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cc&lt;/em&gt;: rms at gnu dot org, GCC Development &amp;lt;gcc at gcc dot gnu dot org&amp;gt;, emacs-devel at gnu dot org&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Date&lt;/em&gt;: Tue, 21 Jan 2014 17:31:43 -0800&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subject&lt;/em&gt;: Re: clang and FSF's strategy&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authentication-results&lt;/em&gt;: sourceware.org; auth=none&lt;/li&gt;
&lt;li&gt;&lt;em&gt;References&lt;/em&gt;: &amp;lt;20140121201949 dot 21DE1380522 at snark dot thyrsus dot com&amp;gt;&lt;/li&gt;
&lt;/ul&gt;





&lt;pre&gt;On Tue, Jan 21, 2014 at 12:19 PM, Eric S. Raymond &amp;lt;esr@thyrsus.com&amp;gt; wrote:
&amp;gt;
&amp;gt; Wouldn't it make sense, then, to entirely drop the factoring
&amp;gt; restrictions from GCC so it can compete for developer attention more
&amp;gt; effectively with clang?
&amp;gt;
&amp;gt; Before clang existed, back when GCC had a near monopoly in its
&amp;gt; competitive space, there might have been a functional case for those
&amp;gt; restrictions. Reasonable people may differ on that; there's no point
&amp;gt; in arguing it retrospectively. Now, I submit, they have become a pointless
&amp;gt; gesture that serves only to hinder GCC development abd increase
&amp;gt; clang's competitive advantage.
&amp;gt;
&amp;gt; GCC has a lot of strengths to play from, most notably the maturity of
&amp;gt; its multiplatform and cross-development support.  I urge the FSF to
&amp;gt; fully free the code - drop the policy restrictions, encourage a
&amp;gt; flourishing ecosystem of surrounding plugins.  Let GCC, clang, and
&amp;gt; other alternatives compete for attention on pure technical merit.

I'm sympathetic to our comments regarding GCC vs. clang.  But I'm not
sure I grasp your proposed solution.  GCC does support plugins, and
has supported them for a few releases now.

GCC plugins have what turns out to be a significant defect: the plugin
interface simply exposes GCC internals, and as such is not stable
across releases.  I pushed for plugins in GCC, and I thought this
unstable interface would be OK, but I was wrong.  For general plugins
to be useful, we need a more stable interface.

But that is a technical issue, not a licensing issue.  You are talking
about licensing issues.  Do you think the licensing requirements on
plugins are too onerous?

Because of the non-standard interface, the most effective way for
people to write plugins for GCC today is to use something like MELT
(&lt;a rel=&quot;nofollow&quot; href=&quot;http://gcc-melt.org&quot;&gt;http://gcc-melt.org&lt;/a&gt;) or the GCC Python plugin
(&lt;a rel=&quot;nofollow&quot; href=&quot;https://fedorahosted.org/gcc-python-plugin/&quot;&gt;https://fedorahosted.org/gcc-python-plugin/&lt;/a&gt;).  These provide a
somewhat more standard interface across releases.

Ideally we would develop a standard interface for C as well.  There
have been some efforts along those lines but as far as I know none of
them have been committed to the tree.

Ian

&lt;/pre&gt;






&lt;ul&gt;&lt;li&gt;&lt;strong&gt;References&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a name=&quot;00176&quot; href=&quot;http://gcc.gnu.org/ml/gcc/2014-01/msg00176.html&quot;&gt;clang and FSF's strategy&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;









&lt;/body&gt;
&lt;/div&gt;
</description>
<title>
Eric S. Raymond - clang and FSF's strategy
</title>
</item>
</channel>
</rss>
