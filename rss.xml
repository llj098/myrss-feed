<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0'>
<channel>
<generator>
clj-rss
</generator>
<link>
https://news.ycombinator.com
</link>
<title>
myread
</title>
<description>
myread
</description>
<item>
<author>
unknown
</author>
<link>
https://sen.se/store/mother/?utm_expid=78993385-1.X-oIkUsIR8aRPG13DPrvIg.0
</link>
<description>
&lt;div&gt;&lt;div class=&quot;content&quot;&gt;
            &lt;p class=&quot;inner&quot;&gt;
                
                
                &lt;ul&gt;
                    &lt;li class=&quot;pushnotification&quot;&gt;Push notifications on your smartphone&lt;/li&gt;
                    &lt;li class=&quot;sms&quot;&gt;Text messages / SMS*&lt;/li&gt;
                    &lt;li class=&quot;email&quot;&gt;Email&lt;/li&gt;
                    &lt;li class=&quot;phonecall&quot;&gt;Phone calls* **&lt;/li&gt;
                    &lt;li class=&quot;alert&quot;&gt;Sounds and lights on your Mother&lt;/li&gt;
                    &lt;li class=&quot;notification&quot;&gt;The Senseriver of everything happening&lt;/li&gt;
                &lt;/ul&gt;
                &lt;small&gt;(*) extra charges apply&lt;/small&gt;
                &lt;small&gt;(**) english voice messages only&lt;/small&gt;

            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
</description>
<title>
Mother
</title>
</item>
<item>
<author>
unknown
</author>
<link>
http://speaking.io
</link>
<description>
&lt;div&gt;&lt;div class=&quot;wrapper&quot;&gt;
    
    &lt;p&gt;
      Be it at a conference, or during a company meeting, or in your car trying
      to persuade the cop not to ticket you for going three times the speed
      limit while streaming an episode of &lt;em&gt;The Maury Povich Show&lt;/em&gt; on your
      iPad, talking in front of other people can be an intimidating experience.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
<title>
Public speaking is tough
</title>
</item>
<item>
<author>
unknown
</author>
<link>
http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types/
</link>
<description>
&lt;div&gt;&lt;body&gt;
	
	&lt;table id=&quot;periodic&quot; class=&quot;hide-lifetime hide-bounds hide-abi&quot;&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;th class=&quot;row&quot;&gt;&lt;/th&gt;
			&lt;th class=&quot;col immref&quot;&gt;&lt;a&gt;Immutable Reference&lt;/a&gt;&lt;/th&gt;
			&lt;th class=&quot;col mutref&quot;&gt;&lt;a&gt;Mutable Reference&lt;/a&gt;&lt;/th&gt;
			&lt;th class=&quot;col owned&quot;&gt;&lt;a&gt;Owned&lt;/a&gt;&lt;/th&gt;
			&lt;th class=&quot;gap&quot;&gt;&lt;/th&gt;
			&lt;th class=&quot;bare&quot;&gt;&lt;/th&gt;
		&lt;/tr&gt;
		&lt;tr class=&quot;raw&quot;&gt;
			&lt;th class=&quot;raw row&quot;&gt;&lt;a&gt;Raw&lt;/a&gt;&lt;/th&gt;
			&lt;td class=&quot;raw immref&quot;&gt;
				&lt;strong&gt;&lt;code&gt;*&lt;var&gt;T&lt;/var&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Immutable raw pointer
			&lt;/td&gt;
			&lt;td class=&quot;raw mutref&quot;&gt;
				&lt;strong&gt;&lt;code&gt;*&lt;b&gt;mut&lt;/b&gt; &lt;var&gt;T&lt;/var&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Mutable raw pointer
			&lt;/td&gt;
			&lt;td class=&quot;raw owned impossible&quot;&gt;
				Raw pointers do not have ownership.
			&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;
			&lt;/td&gt;&lt;th class=&quot;col bare&quot; rowspan=&quot;2&quot;&gt;&lt;a&gt;Bare&lt;/a&gt;&lt;/th&gt;
		&lt;/tr&gt;
		&lt;tr class=&quot;gap&quot;&gt;
			&lt;th class=&quot;gap&quot;&gt;&lt;/th&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr class=&quot;simple&quot;&gt;
			&lt;th class=&quot;simple row&quot;&gt;&lt;a&gt;Simple&lt;/a&gt;&lt;/th&gt;
			&lt;td class=&quot;simple immref&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;&lt;var&gt;T&lt;/var&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Immutable borrowed pointer
			&lt;/td&gt;
			&lt;td class=&quot;simple mutref&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;&lt;b&gt;mut&lt;/b&gt; &lt;var&gt;T&lt;/var&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Mutable borrowed pointer
			&lt;/td&gt;
			&lt;td class=&quot;simple owned&quot;&gt;
				&lt;strong&gt;&lt;code&gt;~&lt;var&gt;T&lt;/var&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Owned pointer
			&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;simple bare&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&lt;var&gt;T&lt;/var&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Primitive type, struct, enum and so on
			&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr class=&quot;vec&quot;&gt;
			&lt;th class=&quot;vec row&quot;&gt;&lt;a&gt;Vector&lt;/a&gt;&lt;/th&gt;
			&lt;td class=&quot;vec immref&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;[&lt;var&gt;T&lt;/var&gt;]&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Immutable borrowed vector slice
			&lt;/td&gt;
			&lt;td class=&quot;vec mutref&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;&lt;b&gt;mut&lt;/b&gt; [&lt;var&gt;T&lt;/var&gt;]&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Mutable borrowed vector slice
			&lt;/td&gt;
			&lt;td class=&quot;vec owned&quot;&gt;
				&lt;strong&gt;&lt;code&gt;~[&lt;var&gt;T&lt;/var&gt;]&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Owned vector
			&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;vec bare proposed&quot;&gt;
				&lt;strong&gt;&lt;code&gt;[&lt;var&gt;T&lt;/var&gt;]&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Unsized vector type
			&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr class=&quot;str&quot;&gt;
			&lt;th class=&quot;str row&quot;&gt;&lt;a&gt;String&lt;/a&gt;&lt;/th&gt;
			&lt;td class=&quot;str immref&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;str&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Immutable borrowed string slice
			&lt;/td&gt;
			&lt;td class=&quot;str mutref proposed&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;&lt;b&gt;mut&lt;/b&gt; str&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Mutable borrowed string slice
			&lt;/td&gt;
			&lt;td class=&quot;str owned&quot;&gt;
				&lt;strong&gt;&lt;code&gt;~str&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Owned string
			&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;str bare proposed&quot;&gt;
				&lt;strong&gt;&lt;code&gt;str&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Unsized string type
			&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr class=&quot;trait&quot;&gt;
			&lt;th class=&quot;trait row&quot;&gt;&lt;a&gt;Trait&lt;/a&gt;&lt;/th&gt;
			&lt;td class=&quot;trait immref&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;&lt;var&gt;Trait&lt;/var&gt;&lt;i class=&quot;bounds&quot;&gt;:&lt;var&gt;K&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Immutable borrowed trait object
			&lt;/td&gt;
			&lt;td class=&quot;trait mutref&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&amp;amp;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;&lt;b&gt;mut&lt;/b&gt; &lt;var&gt;Trait&lt;/var&gt;&lt;i class=&quot;bounds&quot;&gt;:&lt;var&gt;K&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Mutable borrowed trait object
			&lt;/td&gt;
			&lt;td class=&quot;trait owned&quot;&gt;
				&lt;strong&gt;&lt;code&gt;~&lt;var&gt;Trait&lt;/var&gt;&lt;i class=&quot;bounds&quot;&gt;:&lt;var&gt;K&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Owned trait object
			&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;trait bare proposed&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&lt;var&gt;Trait&lt;/var&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Unsized trait type
			&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr class=&quot;gap&quot;&gt;
			&lt;th class=&quot;gap&quot;&gt;&lt;/th&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr class=&quot;fn&quot;&gt;
			&lt;th class=&quot;fn row&quot;&gt;&lt;a&gt;Call-many&lt;/a&gt;&lt;/th&gt;
			&lt;td class=&quot;fn immref proposed&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&lt;em&gt;(no shorthand)&lt;/em&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				&lt;code&gt;&amp;amp;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;Fn&amp;lt;&lt;i class=&quot;arguments&quot;&gt;&lt;var&gt;T&amp;#x2026;&lt;/var&gt;, &lt;/i&gt;&amp;gt;&lt;i class=&quot;bounds&quot;&gt;:&lt;var&gt;K&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;br&gt;
				Closure with immutable environment
			&lt;/td&gt;
			&lt;td class=&quot;fn mutref&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;|&lt;i class=&quot;arguments&quot;&gt;&lt;var&gt;T&amp;#x2026;&lt;/var&gt;&lt;/i&gt;|&lt;i class=&quot;bounds&quot;&gt;:&lt;var&gt;K&lt;/var&gt;&lt;/i&gt;&lt;i class=&quot;return&quot;&gt; -&amp;gt; &lt;var&gt;U&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				&lt;code&gt;&amp;amp;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;&lt;b&gt;mut&lt;/b&gt; Fn&amp;lt;&lt;i class=&quot;arguments&quot;&gt;&lt;var&gt;T&amp;#x2026;&lt;/var&gt;, &lt;/i&gt;&amp;gt;&lt;i class=&quot;bounds&quot;&gt;:&lt;var&gt;K&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;br&gt;
				Closure with mutable environment
			&lt;/td&gt;
			&lt;td class=&quot;fn owned proposed&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&lt;em&gt;(no shorthand)&lt;/em&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				&lt;code&gt;~Fn&amp;lt;&lt;i class=&quot;arguments&quot;&gt;&lt;var&gt;T&amp;#x2026;&lt;/var&gt;, &lt;/i&gt;&amp;gt;&lt;i class=&quot;bounds&quot;&gt;:&lt;var&gt;K&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;br&gt;
				Closure with owned environment
			&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;fn bare&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&lt;i class=&quot;abi&quot;&gt;&lt;b&gt;extern&lt;/b&gt; &quot;&lt;var&gt;ABI&lt;/var&gt;&quot; &lt;/i&gt;&lt;b&gt;fn&lt;/b&gt;(&lt;i class=&quot;arguments&quot;&gt;&lt;var&gt;T&amp;#x2026;&lt;/var&gt;&lt;/i&gt;)&lt;i class=&quot;return&quot;&gt; -&amp;gt; &lt;var&gt;U&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				Bare function type
			&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr class=&quot;oncefn&quot;&gt;
			&lt;th class=&quot;oncefn row&quot;&gt;&lt;a&gt;Call-once&lt;/a&gt;&lt;/th&gt;
			&lt;td class=&quot;oncefn immref proposed&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&lt;em&gt;(no shorthand)&lt;/em&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				&lt;code&gt;&amp;amp;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;OnceFn&amp;lt;&lt;i class=&quot;arguments&quot;&gt;&lt;var&gt;T&amp;#x2026;&lt;/var&gt;, &lt;/i&gt;&amp;gt;&lt;i class=&quot;bounds&quot;&gt;:&lt;var&gt;K&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;br&gt;
				Procedure with immutable environment
			&lt;/td&gt;
			&lt;td class=&quot;oncefn mutref proposed&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&lt;em&gt;(no shorthand)&lt;/em&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				&lt;code&gt;&amp;amp;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt; &lt;/i&gt;&lt;b&gt;mut&lt;/b&gt; OnceFn&amp;lt;&lt;i class=&quot;arguments&quot;&gt;&lt;var&gt;T&amp;#x2026;&lt;/var&gt;, &lt;/i&gt;&amp;gt;&lt;i class=&quot;bounds&quot;&gt;:&lt;var&gt;K&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;br&gt;
				Procedure with mutable environment
			&lt;/td&gt;
			&lt;td class=&quot;oncefn owned&quot;&gt;
				&lt;strong&gt;&lt;code&gt;&lt;b&gt;proc&lt;/b&gt;(&lt;i class=&quot;arguments&quot;&gt;&lt;var&gt;T&amp;#x2026;&lt;/var&gt;&lt;/i&gt;)&lt;i class=&quot;return&quot;&gt; -&amp;gt; &lt;var&gt;U&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
				&lt;code&gt;~OnceFn&amp;lt;&lt;i class=&quot;arguments&quot;&gt;&lt;var&gt;T&amp;#x2026;&lt;/var&gt;, &lt;/i&gt;&amp;gt;&lt;i class=&quot;bounds&quot;&gt;:&lt;var&gt;K&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;br&gt;
				Procedure with owned environment
			&lt;/td&gt;
			&lt;td class=&quot;gap&quot;&gt;&lt;/td&gt;
			&lt;td class=&quot;oncefn bare impossible&quot;&gt;
				Bare functions always can be called multiple times.
			&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
	&lt;/table&gt;
	&lt;nav&gt;
		&lt;table id=&quot;bgkey&quot; class=&quot;key&quot;&gt;
			&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;Supported as of 0.9&lt;/td&gt;&lt;/tr&gt;
			&lt;tr class=&quot;proposed&quot;&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;Proposed (&lt;a href=&quot;https://github.com/mozilla/rust/issues/6308&quot;&gt;DST&lt;/a&gt; and &lt;a href=&quot;https://github.com/mozilla/rust/issues/10124&quot;&gt;Variadic generics&lt;/a&gt;)&lt;/td&gt;&lt;/tr&gt;
			&lt;tr class=&quot;impossible&quot;&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;Impossible&lt;/td&gt;&lt;/tr&gt;
		&lt;/table&gt;
		&lt;table id=&quot;optkey&quot; class=&quot;key&quot;&gt;
			&lt;tr class=&quot;lifetime&quot;&gt;&lt;th&gt;&lt;code&gt;&lt;i class=&quot;lifetime&quot;&gt;'&lt;var&gt;r&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;/th&gt;&lt;td&gt;Lifetime&lt;/td&gt;&lt;/tr&gt;
			&lt;tr class=&quot;bounds&quot;&gt;&lt;th&gt;&lt;code&gt;&lt;i class=&quot;bounds&quot;&gt;:&lt;var&gt;K&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;/th&gt;&lt;td&gt;Trait bounds&lt;/td&gt;&lt;/tr&gt;
			&lt;tr class=&quot;arguments&quot;&gt;&lt;th&gt;&lt;code&gt;&lt;i class=&quot;arguments&quot;&gt;&lt;var&gt;T&amp;#x2026;&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;/th&gt;&lt;td&gt;Function arguments&lt;/td&gt;&lt;/tr&gt;
			&lt;tr class=&quot;return&quot;&gt;&lt;th&gt;&lt;code&gt;&lt;i class=&quot;return&quot;&gt;-&amp;gt; &lt;var&gt;U&lt;/var&gt;&lt;/i&gt;&lt;/code&gt;&lt;/th&gt;&lt;td&gt;Function return&lt;/td&gt;&lt;/tr&gt;
			&lt;tr class=&quot;abi&quot;&gt;&lt;th&gt;&lt;code&gt;&lt;i class=&quot;abi&quot;&gt;&lt;b&gt;extern&lt;/b&gt; &quot;&lt;var&gt;ABI&lt;/var&gt;&quot;&lt;/i&gt;&lt;/code&gt;&lt;/th&gt;&lt;td&gt;ABI definition&lt;/td&gt;&lt;/tr&gt;
		&lt;/table&gt;
	&lt;/nav&gt;

	&lt;h2&gt;What is this?&lt;/h2&gt;
	&lt;p&gt;This &quot;periodic table&quot; is a cheatsheet for various Rust types. &lt;a href=&quot;http://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; programming language has a versatile type system that avoids a certain class of memory error in the safe context, and consequently has somewhat many types at the first glance. This table organizes them into an orthogonal tabular form, making them easier to understand and reason. I also hope that this makes very obvious why Rust needs such seemingly many types.&lt;/p&gt;
	&lt;p&gt;The periodic table was made by &lt;a href=&quot;http://mearie.org/&quot;&gt;Kang Seonghoon&lt;/a&gt; as a thought experiment, and then... it have got redditted unexpectedly :p Henceforth I've made the URL permanent and added some descriptions.&lt;/p&gt;
	&lt;p&gt;Discussion: &lt;a href=&quot;http://www.reddit.com/r/rust/comments/1v7hqb/the_periodic_table_of_rust_types/&quot;&gt;/r/rust&lt;/a&gt;, &lt;a href=&quot;http://www.reddit.com/r/programming/comments/1v8jr0/the_periodic_table_of_rust_types/&quot;&gt;/r/programming&lt;/a&gt;, &lt;a href=&quot;https://news.ycombinator.com/item?id=7060951&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;

	&lt;h3&gt;Guide&lt;/h3&gt;
	&lt;p&gt;Columns indicate the ownership. There are two big groups from left to right: &lt;strong&gt;indirect&lt;/strong&gt; (i.e. referenced or owned) and &lt;strong&gt;direct&lt;/strong&gt;. Indirect types can be coerced horizontally: &lt;code&gt;~&lt;var&gt;T&lt;/var&gt;&lt;/code&gt; can be coerced to &lt;code&gt;&amp;amp;&lt;b&gt;mut&lt;/b&gt; &lt;var&gt;T&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;var&gt;T&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;b&gt;mut&lt;/b&gt; &lt;var&gt;T&lt;/var&gt;&lt;/code&gt; can be coerced to &lt;code&gt;&amp;amp;&lt;var&gt;T&lt;/var&gt;&lt;/code&gt;.&lt;/p&gt;
	&lt;p&gt;Rows indicate the different kind of types. There are three big groups from top to bottom: &lt;strong&gt;unsafe dereference&lt;/strong&gt;, &lt;strong&gt;safe dereference&lt;/strong&gt; and &lt;strong&gt;callable&lt;/strong&gt;.&lt;/p&gt;
	&lt;p&gt;Colored backgrounds (sorry the accessibility!) indicate the current availability. Black background means the type is plain absurd and prohibited. Gray background means the type makes some sense but it is not yet in the language. Fortunately we have two proposals that cover all the missing types now:&lt;/p&gt;
	&lt;ul&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/rust/issues/6308&quot;&gt;Dynamically sized types&lt;/a&gt; proposal (a.k.a. DST) brings unsized types to the language. Normally most types including references and owned pointers have their size known and thus are &quot;sized&quot;, but &lt;code&gt;[&lt;var&gt;T&lt;/var&gt;]&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;&lt;var&gt;Trait&lt;/var&gt;&lt;/code&gt; do not have their size known in the compile time. The proposal allows them in the limited context, and that is primarily useful for fully supporting custom smart pointers. This also has a side effect that allows for &lt;code&gt;&amp;amp;&lt;b&gt;mut&lt;/b&gt; str&lt;/code&gt;, though it won't see much use since safe strings cannot be modified via indexing.&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/rust/issues/10124&quot;&gt;Variadic generics&lt;/a&gt; proposal brings a variadic number of generic parameters, similar to that of C++11. Consequently it can turn closures and procedures into simple traits. The exact interface is not yet settled (one of the possible interface discussed is indicated below in the small print) so it can look differently in the future.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;p&gt;There are some optional syntactic parts possible in types. Many of them are turned off by default since they are normally verbose, but you can turn them on if you want.&lt;/p&gt;

	
	&lt;address&gt;a part of &lt;a href=&quot;http://cosmic.mearie.org/&quot;&gt;cosmic.mearie.org&lt;/a&gt;.&lt;/address&gt;

	
&lt;/body&gt;
&lt;/div&gt;
</description>
<title>
The Periodic Table of Rust Types
</title>
</item>
<item>
<author>
unknown
</author>
<link>
http://www.inc.com/jeremy-quittner/supreme-court-deals-blow-to-troll.html
</link>
<description>
&lt;div id=&quot;articlecontent&quot; score=&quot;31.25&quot;&gt;&lt;a name=&quot;articlecontent&quot;&gt;&lt;/a&gt;
    


    
        
            
        
                                    &lt;p id=&quot;deck&quot;&gt;The Supreme Court tells an alleged patent troll to beat it, suggesting an era of frivolous patent litigation may soon end.&lt;/p&gt;  
        
                    
        
                    &lt;div id=&quot;panographic-image&quot;&gt;
                &lt;img src=&quot;http://www.inc.com/uploaded_files/image/supreme-court-building-pan_12255.jpg&quot; alt=&quot;&quot;&gt;
            &lt;/div&gt;
                            &lt;figcaption class=&quot;imagecaption&quot; id=&quot;pancaption&quot;&gt;&lt;/figcaption&gt;
                         
     
  

        

                
                
                    
    




 

	

	
	






&lt;bodycopy id=&quot;bodycopy&quot;&gt;
	&lt;p&gt;Chalk one up for the enemies of patent trolls: The Supreme Court on Monday &lt;a href=&quot;http://www.supremecourt.gov/orders/courtorders/011314zor_f204.pdf&quot; target=&quot;_blank&quot;&gt;threw out&lt;/a&gt; a request for trial from alleged &lt;a href=&quot;http://arstechnica.com/tech-policy/2013/01/how-newegg-crushed-the-shopping-cart-patent-and-saved-online-retail/&quot;&gt;patent troll Soverain Software&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The case, called &lt;em&gt;Soverain Software LLC. v. Newegg Inc.&lt;/em&gt;, is one of three that are expected to go before the Supreme Court this year. While the Court will likely hear the remaining cases, which deal with finer points of patent law, its dismissal of Soverain speaks to the potential frivolousness of its claims.&lt;/p&gt;
&lt;p&gt;Soverain acquired the rights to numerous pieces of code tied to the online shopping cart, &lt;a href=&quot;http://www.bloomberg.com/news/2014-01-13/internet-patent-owner-loses-high-court-bid-to-revive-suit.html&quot; target=&quot;_blank&quot;&gt;developed in the 1990s&lt;/a&gt;. In recent years, Soverain has gone on a litigious tear, suing more than two dozen companies including Amazon, Nordstrom, Macy's and Newegg, an online retailer, which all use shopping carts for internet sales.&lt;/p&gt;
&lt;p&gt;Soverain had some success suing on the state level, where a Texas jury awarded the Chicago-based company $2.5 million in damages against Newegg. However, Soverain lost on appeal last year in U.S. District Court for the Eastern District of Texas, which ruled the shopping cart patents owned by Soverain were too general.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.inc.com/magazine/201202/kris-frieswick/patent-troll-toll-on-businesses.html&quot;&gt;Patent trolls&lt;/a&gt; typically acquire rights to fallow or soon-to-expire patents with no intention of using the patent. Often patent trolls set up shell companies whose only assets are the patents, which means they have no real revenues or assets. Their sole purpose is to harass small businesses, which usually settle rather than pay for extended and costly litigation.&lt;/p&gt;
&lt;p&gt;Patent law was originally written to protect the patent holder, making it easier for the patent holder to prevail in court. For the patent infringer to win, rather, the defendant must prove exceptional circumstances--namely that the patentee acted in bad faith and made baseless claims. This is hard to do. While the patent holder can be awarded &quot;treble damages,&quot; or three times the damage claimed, the most the infringer can ever collect is attorney fees. &lt;/p&gt;
&lt;p&gt;The remaining cases before the Supreme Court will deal with these finer points.&lt;/p&gt;
&lt;p&gt;Congress is examining legislation that would fight patent trolls and their frivolous lawsuits by making them liable for court costs, should they lose their cases.&lt;/p&gt;
&lt;p&gt;Small businesses mounted 3,400 legal defenses in 2011 for patent cases, a 32 percent increase over the prior year, according to a &lt;a href=&quot;http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2091210&quot;&gt;research paper&lt;/a&gt; from 2012 by Boston University law professors James Bessen and Michael J. Meurer.  That cost to small companies was about $11 billion in 2011, also a 32 percent increase over the prior year.&lt;/p&gt;
&lt;p&gt;The total median awards to trolls is now nearly twice as high as those to legitimate patent holders, whose median reward fell about 30 percent to $4 billion, according to a 2013 &lt;a href=&quot;http://www.pwc.com/en_US/us/forensic-services/publications/assets/2013-patent-litigation-study.pdf&quot; target=&quot;_blank&quot;&gt;report&lt;/a&gt; by PriceWaterhouseCoopers.&lt;/p&gt;
&lt;/bodycopy&gt;



    &lt;div id=&quot;bottom-of-article&quot; score=&quot;-2.5&quot;&gt;
                
        &lt;br clear=&quot;all&quot;&gt;
    &lt;/div&gt;

    
	

		




	
    &lt;div id=&quot;article-credit&quot; score=&quot;5.0&quot;&gt;

	&lt;div class=&quot;columnist-photo&quot;&gt;&lt;a href=&quot;http://www.inc.com/author/jeremy-quittner&quot; rel=&quot;author&quot;&gt;&lt;img src=&quot;http://www.inc.com/uploaded_files/image/100x100/JeremyQuittner-bkt_19367.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;
	
	
	&lt;/div&gt;

	


	


		

&lt;/div&gt;


</description>
<title>
US Supreme Court declines to hear appeal by patent troll
</title>
</item>
<item>
<author>
unknown
</author>
<link>
http://arstechnica.com/tech-policy/2014/01/net-neutrality-is-half-dead-court-strikes-down-fccs-anti-blocking-rules/
</link>
<description>
&lt;div class=&quot;article-content clearfix&quot; score=&quot;7.5&quot;&gt;
    
&lt;figure class=&quot;intro-image image center full-width&quot; score=&quot;12.5&quot;&gt;
      &lt;img src=&quot;http://cdn.arstechnica.net/wp-content/uploads/2014/01/net-neutrality-censored.jpg&quot; width=&quot;640&quot;&gt;
  
    &lt;figcaption class=&quot;caption&quot; score=&quot;7.5&quot;&gt;
	
			
	  &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;p&gt;The Federal Communication Commission's net neutrality rules were partially struck down today by the US Court of Appeals for the District of Columbia Circuit, which said the Commission did not properly justify its anti-discrimination and anti-blocking rules.&lt;/p&gt;
&lt;p&gt;Those rules in the Open Internet Order, &lt;a href=&quot;http://arstechnica.com/tech-policy/2010/12/its-here-fcc-adopts-net-neutrality-lite/&quot;&gt;adopted in 2010&lt;/a&gt;, forbid ISPs from blocking services or charging content providers for access to the network. &lt;a href=&quot;http://arstechnica.com/tech-policy/2013/09/verizons-bid-to-kill-network-neutrality-law-goes-to-court-monday/&quot;&gt;Verizon challenged the entire order&lt;/a&gt; and got a big victory in today's ruling. While it could still be appealed to the Supreme Court, the order today would allow pay-for-prioritization deals that could let Verizon or other ISPs charge companies like Netflix for a faster path to consumers.&lt;/p&gt;
&lt;p&gt;The court left part of the Open Internet Order intact, however, saying that the FCC still has &quot;general authority&quot; to regulate how broadband providers treat traffic.&lt;/p&gt;
&lt;p&gt;The FCC got itself into trouble with some &lt;a href=&quot;http://arstechnica.com/tech-policy/2013/09/fccs-wishy-washy-rulemaking-might-doom-net-neutrality-in-court/&quot;&gt;wishy-washy rulemaking&lt;/a&gt;. The commission did not declare that ISPs are &quot;common carriers,&quot; yet it imposed restrictions that sound strikingly similar to regulations that can only apply to common carriers.&lt;/p&gt;
&lt;p&gt;The 81-page ruling (&lt;a href=&quot;http://www.cadc.uscourts.gov/internet/opinions.nsf/3AF8B4D938CDEEA685257C6000532062/%24file/11-1355-1474943.pdf&quot;&gt;PDF&lt;/a&gt;) today states the following:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;[T]he Commission has established that section 706 of the Telecommunications Act of 1996 vests it with affirmative authority to enact measures encouraging the deployment of broadband infrastructure. The Commission, we further hold, has reasonably interpreted section 706 to empower it to promulgate rules governing broadband providers’ treatment of Internet traffic, and its justification for the specific rules at issue here—that they will preserve and facilitate the “virtuous circle&quot; of innovation that has driven the explosive growth of the Internet—is reasonable and supported by substantial evidence. That said, even though the Commission has general authority to regulate in this arena, it may not impose requirements that contravene express statutory mandates. Given that the Commission has chosen to classify broadband providers in a manner that exempts them from treatment as common carriers, the Communications Act expressly prohibits the Commission from nonetheless regulating them as such. Because the Commission has failed to establish that the anti-discrimination and anti-blocking rules do not impose per se common carrier obligations, we vacate those portions of the Open Internet Order.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;FCC Chairman Tom Wheeler said the commission might appeal the ruling. “The DC Circuit has correctly held that ‘Section 706 . . . vests [the Commission] with affirmative authority to enact measures encouraging the deployment of broadband infrastructure’ and therefore may ‘promulgate rules governing broadband providers’ treatment of Internet traffic,&quot; Wheeler said in a written statement. &quot;I am committed to maintaining our networks as engines for economic growth, test beds for innovative services and products, and channels for all forms of speech protected by the First Amendment. We will consider all available options, including those for appeal, to ensure that these networks on which the Internet depends continue to provide a free and open platform for innovation and expression, and operate in the interest of all Americans.”&lt;/p&gt;
&lt;p&gt;Consumer advocacy group Free Press lamented the ruling. “We’re disappointed that the court came to this conclusion,&quot; Free Press CEO Craig Aaron said in a written statement. &quot;Its ruling means that Internet users will be pitted against the biggest phone and cable companies—and in the absence of any oversight, these companies can now block and discriminate against their customers’ communications at will.&quot;&lt;/p&gt;
&lt;p&gt;Aaron further blamed former FCC Chairman Julius Genachowski, who &quot;made a grave mistake when [his Commission] failed to ground its open Internet rules on solid legal footing. Internet users will pay dearly for the previous chairman’s lack of political will.&quot;&lt;/p&gt;
&lt;p&gt;Consumer advocacy group Public Knowledge offered similar thoughts, while urging the FCC to come up with new rules that meet legal muster. &quot;[T]he Court did uphold broad Commission authority to regulate broadband,&quot; Public Knowledge Senior VP Harold Feld said. &quot;To exercise that authority, the FCC must craft open Internet protection that are not full fledged common carrier rules. Alternatively, if the FCC needs broader authority it can classify broadband as a title 2 common carrier service. Both of these are viable options. In fact, Public Knowledge has long held that both broadband is a telecommunications service, and that the modest protections offered by the Open Internet rules fall well short of full common carrier regulations.&quot;&lt;/p&gt;
&lt;p&gt;Public Knowledge itself could appeal the ruling, Feld said.&lt;/p&gt;
&lt;p&gt;We will provide further analysis of this ruling in a followup article today.&lt;/p&gt;
    		&lt;/div&gt;
    
</description>
<title>
Net neutrality is half-dead: Court strikes down FCC’s anti-blocking rules
</title>
</item>
</channel>
</rss>
