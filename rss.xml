<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0'>
<channel>
<generator>
clj-rss
</generator>
<link>
https://news.ycombinator.com
</link>
<title>
myread
</title>
<description>
myread
</description>
<item>
<author>
unknown
</author>
<link>
http://www.eurogamer.net/articles/digitalfoundry-2014-secret-developers-wii-u-the-inside-story
</link>
<description>
&lt;div&gt;&lt;article class=&quot;hd&quot;&gt;
	
													
							
						&lt;p class=&quot;byline&quot;&gt;			
							&lt;strong&gt;By&lt;/strong&gt;
							&lt;a href=&quot;http://www.eurogamer.net/author/1162&quot;&gt;The Secret Developers&lt;/a&gt;
		
							&lt;strong&gt;Published&lt;/strong&gt;
							&lt;span&gt;
																	Saturday, 11 January 2014															&lt;/span&gt;
						&lt;/p&gt;
	
																
		
		
			&lt;section class=&quot;&quot;&gt;
  &lt;p&gt;
    &lt;em&gt;The Secret Developers is Digital Foundry's occasional series where game-makers come forward to talk with us - and you - about topics they are passionate about, or in the case of this article, to give you the inside story behind a particular hot topic. As the future of the Wii U looks uncertain in the face of the successful launches for both Xbox One and PlayStation 4, this &quot;warts and all&quot; tale from a respected third-party creator gives you some idea of how Nintendo handled the transition to the high-definition gaming era, and the challenges developers faced in bringing their games to the Wii U platform.&lt;/em&gt;
  &lt;/p&gt;
  &lt;p&gt;I was there when Nintendo first pitched the Wii U to developers, I worked on the hardware extensively and helped to produce one of the better third-party titles. Now, as the fate of the hardware looks uncertain after a second Christmas of disappointing sales, I wanted to tell the story of what it was actually like to work with the console, and with Nintendo, and perhaps give some context to the mixed fortunes of the machine and its third-party titles.&lt;/p&gt;
  &lt;p&gt;But first, let's go back to the beginning. The genesis of a new games console generally follows a standard pattern. Initially there is a prolonged period of research and development internally within a manufacturer where the goals and hardware designs are sketched out. These then go through a process of refinement with the hardware parts manufacturers, based on their technology and, obviously, cost.&lt;/p&gt;
  &lt;p&gt;Once the basic hardware design has been thrashed out, the internal software (SDK) teams get involved in writing the initial code/drivers and tests that are required to run the hardware. Once the teams are happy with the hardware, cost and timelines, the companies start to go out and talk to developers about the new hardware.&lt;/p&gt;
  &lt;p&gt;To begin with this will be first-party developers and feedback will be gathered that may, or may not, affect the design of the hardware. At this stage the hardware design can be changed, but the window of opportunity is getting smaller. The hardware parts manufacturers have to ramp up their production lines to produce the silicon, which takes time.&lt;/p&gt;
  &lt;p&gt;After initial feedback, the studio 'tours' begin, talking to select third-party publishers, the Ubisoft, Take-Two and EAs of the world, that the platform holders need to entice to make games for their consoles. Without games, and the income that they provide, the console soon starts to lose money, becoming a noose around the manufacturer's neck.&lt;/p&gt;
  &lt;p&gt;Major changes at this point are rare, unless they are things that can be altered through software changes (clock speeds, system OS time-slices, etc.) or can be 'easily' added to the hardware design, for example swapping out one set of memory modules for another of higher capacity.&lt;/p&gt;
  &lt;p&gt;That's where I come in.&lt;/p&gt;
  &lt;div class=&quot;pullquote  left &quot;&gt;&lt;p&gt;&quot;After initial feedback, the studio 'tours' begin, talking to the Ubisoft, Take-Two and EAs of the world... Without games, and the income that they provide, the console soon starts to lose money, becoming a noose around the manufacturer's neck.&quot; &lt;/p&gt; &lt;/div&gt;
  &lt;div class=&quot;image-gallery &quot;&gt;
    &lt;div class=&quot;illustration    &quot;&gt;
      &lt;img src=&quot;http://images.eurogamer.net/2013/articles//a/1/6/4/5/9/4/4/wii_u.jpg.jpg/EG11/resize/600x-1/quality/80/format/jpg&quot; width=&quot;600&quot; height=&quot;339.2578125&quot; alt=&quot;wiiu&quot;&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;
&lt;/section&gt;&lt;section class=&quot;&quot;&gt;
  &lt;h2&gt;The reveal and post-reveal catch-up&lt;/h2&gt;
  &lt;p&gt;When I was told that Nintendo had come into the office for a meeting I could already guess as to what they were going to be talking about. Rumours had been circulating for weeks of new hardware, but nothing concrete had been said. After signing the various NDAs we all gathered in a room to hear the presentation.&lt;/p&gt;
  &lt;p&gt;It started off in the usual way with a look back on how successful the Wii had been and what their intentions were for the new hardware. They wanted a console that was the same size as the Wii and wouldn't make much noise, so &quot;mum wouldn't mind having it in the living room&quot;. It was during this statement that quiet alarm bells started to ring in my brain, but I ignored them and continued watching the presentation. The pitch then moved on to the usual &quot;we need your help to ensure that the Wii U is a success and you can help us (Nintendo) along the way&quot;. These words ended up having more significance than either we, or the presenters, could have envisaged.&lt;/p&gt;
  &lt;p&gt;Then the new controller was shown as a dummy prototype, complete with a glossy video showing how it could be used in games as a series of mock-ups, which looked exciting. By this point we were all considering how we could use the controller in our games. But then they revealed the internal details of the console and I realised the reason for my earlier alarm bells. If Nintendo wanted the hardware to have a small footprint and be quiet, they needed minimal fan noise, meaning that cooling was limited, which in turn meant that the CPU would have to produce a minimal amount of heat, which meant that the clock speed would have to be kept low. While I can't confirm specific details, the &lt;a href=&quot;http://en.wikipedia.org/wiki/Espresso_(microprocessor)&quot;&gt;collective thoughts of the internet&lt;/a&gt; are presented for reference on Wikipedia.&lt;/p&gt;
  &lt;p&gt;So a basic comparison/calculation makes the Wii U look, on paper at least, significantly &lt;em&gt;slower&lt;/em&gt; than an Xbox 360 in terms of raw CPU. This point was raised in the meeting, but the Nintendo representatives dismissed it saying that the &quot;low power consumption was more important to the overall design goals&quot; and that &quot;other CPU features would improve the performance over the raw numbers&quot;.&lt;/p&gt;
  &lt;div class=&quot;pullquote  left &quot;&gt;&lt;p&gt;&quot;Almost immediately after the reveal the emails starting flying asking what people thought of the new console design and specification. The almost universal answer was, 'I like the new controller, but the CPU looks a bit underpowered.'&quot; &lt;/p&gt; &lt;/div&gt;
  &lt;div class=&quot;image-gallery &quot;&gt;
    &lt;div class=&quot;illustration    &quot;&gt;
      &lt;img src=&quot;http://images.eurogamer.net/2013/articles//a/1/6/4/5/9/4/4/Nintendo_Wii_U_processor_heatspreader.jpg.jpg/EG11/resize/600x-1/quality/80/format/jpg&quot; width=&quot;600&quot; alt=&quot;processor&quot;&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;p&gt;Almost immediately after the reveal the emails starting flying asking what people thought of the new console design and specification. The almost universal answer was, &quot;I like the new controller, but the CPU looks a bit underpowered&quot;.&lt;/p&gt;
  &lt;p&gt;Over the coming weeks people started doing other calculations trying to guess the performance of the machine - don't forget that this is a long time before development kits were available to do actual tests. Some people even built custom PC rigs with &lt;em&gt;under-clocked&lt;/em&gt; CPUs to try and gauge performance of their code on these machine. Again, the almost universal answer was that it wasn't going to be powerful enough to run next-gen engines and it might even struggle to do current-gen (PS3 and X360) titles. But in spite of these tests the management made the decision, for various business reasons, to release a game on the Wii U. So now we had to get stuck in and try to make a game.&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;&quot;&gt;
  &lt;h2&gt;And so, to work&lt;/h2&gt;
  &lt;p&gt;Soon after the decision was made the development kits started arriving. As is usual for early hardware they were bigger than the final design with a mixture of connectors and ports used specifically for development. So we plugged them in and flashed them to the latest system code, then tried to get a simple &quot;hello world&quot; type game running, which proved harder than you might think.&lt;/p&gt;
  &lt;p&gt;Having worked on other hardware consoles, I suppose that we were rather spoilt by having mature toolchains that integrated nicely with our development environment. Wii U on the other hand seemed to be trying at every turn to make it difficult to compile and run any code. Nintendo had provided an integration of their development tools into Visual Studio - the de facto standard for development - but it didn't work, not even close. So time was spent trying to get this fixed up, while reporting the issue to the platform holder. Eventually we received a solution from Nintendo via another third-party company who had also been working on this issue for a while.&lt;/p&gt;
  &lt;p&gt;So now we could make the code visible in Visual Studio and get it compiling, which was good, but the compilation times were really slow, even for minor changes. Then it had to do the link step, at which point you could happily get up, make a cup of tea, have a chat and get back to your desk before the link was complete. Link times were measured in multiple (four or more) minutes on Wii U compared to around one minute on other platforms.&lt;/p&gt;
  &lt;p&gt;This doesn't sound bad, but when you are debugging and making lots of changes, these additional times add up. If you made 10 changes to a file in a morning, you could be spending over 50 minutes waiting for the linker to complete, which is a lot of wasted time. &lt;/p&gt;
  &lt;div class=&quot;pullquote  left &quot;&gt;&lt;p&gt;&quot;As a team, we lost days of time to the compile/link/debug overheads and this negatively impacted the amount of features that we could put into our game before the release date.&quot; &lt;/p&gt; &lt;/div&gt;
  &lt;div class=&quot;image-gallery &quot;&gt;
    &lt;div class=&quot;illustration    &quot;&gt;
      &lt;img src=&quot;http://images.eurogamer.net/2013/articles//a/1/6/4/5/9/4/4/wii_devkit.jpg.jpg/EG11/resize/600x-1/quality/80/format/jpg&quot; width=&quot;600&quot; height=&quot;224.922760041195&quot; alt=&quot;devkit&quot;&gt;
    &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;p&gt;Finally, when you had the code, you would deploy it to the console and start up the debugger, which was part of the toolchain that Nintendo had licensed from Green Hills Software. As a seasoned developer I've used a lot of debuggers, but this one surprised even me. Its interface was clunky, it was very slow to use and if you made the mistake of actually clicking on any code, then it would pause and retrieve all of the values for the variables that you had clicked, which might take a minute or more to come back.&lt;/p&gt;
  &lt;p&gt;All of these things made the actual development of code harder than it should have been and ate into the development time of the game. As a team, we lost days of time to the compile/link/debug overheads and this negatively impacted the amount of features that we could put into our game before the release date.&lt;/p&gt;
  &lt;p&gt;Another curious thing to note at this point was that over the course of six months we received multiple different development kits in a variety of colours, none of which revealed why they were different from the previous one. We knew that there were some hardware bugs that were being fixed, but the release notes rarely stated what had changed - we just had to take the new ones and get them working with our code again, consuming valuable development time. There have been some interesting rumours circulating of PC-style development boxes, and even the Radeon HD 4850 (running underclocked) utilised as a proxy for the Wii U's GPU. We worked on Wii U from the early days and never saw equipment like this - our kits always took the form of custom hardware that I presume was based on near-to-final silicon.&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;h2&gt;Working with Wii U&lt;/h2&gt;&lt;p&gt;Now that the game was up and running on the console we could start developing features that would use the new controllers and make our game stand out on the platform. But soon after starting this we ran into some issues that the (minimal) documentation didn't cover, so we asked questions of our local Nintendo support team. They didn't know the answers so they said they would check with the developers in Japan and we waited for a reply. And we waited. And we waited.&lt;/p&gt;&lt;p&gt;After about a week of chasing we heard back from the support team that they had received an answer from Japan, which they emailed to us. The reply was in the form of a few sentences of very broken English that didn't really answer the question that we had asked in the first place. So we went back to them asking for clarification, which took another week or so to come back. After the second delay we asked why it was taking to long for replies to come back from Japan, were they very busy? The local support team said no, it's just that any questions had to be sent off for translation into Japanese, then sent to the developers, who replied and then the replies were translated back to English and sent back to us. With timezone differences and the delay in translating, this usually took a week !&lt;/p&gt;&lt;p&gt;Getting the game to run at its target frame-rate is a part of the development process that is less interesting in this context as it follows the standard pattern. Get the game running, optimise the code (CPU and GPU) and if it still won't perform, cut back on features until it does fit.&lt;/p&gt;&lt;div class=&quot;pullquote  left &quot;&gt;&lt;p&gt;&quot;Getting the game to run at its target frame-rates... follows the standard pattern. Get the game running, optimise the code and if it still won't perform, cut back on features until it does fit.&quot; &lt;/p&gt; &lt;/div&gt;				&lt;p class=&quot;video&quot;&gt;
					&lt;iframe width=&quot;600&quot; height=&quot;338&quot; src=&quot;http://www.youtube.com/embed/ABBp3s0ilmY&quot;&gt;&lt;/iframe&gt;
					
				&lt;/p&gt;
&lt;p&gt;As far as the CPU optimisations went, yes we did have to cut back on some features due to the CPU not being powerful enough. As we originally feared, trying to support a detailed game running in HD put a lot of strain on the CPUs and we couldn't do as much as we would have liked. Cutting back on some of the features was an easy thing to do, but impacted the game as a whole. Code optimised for the PowerPC processors found in the Xbox 360 and PlayStation 3 wasn't always a good fit for the Wii U CPU, so while the chip has some interesting features that let the CPU punch above its weight, we couldn't fully take advantage of them. However, some code could see substantial improvements that did mitigate the lower clocks - anything up to a 4x boost owing to the removal of Load-Hit-Stores, and higher IPC (instructions per cycle) via the inclusion of out-of-order execution. &lt;/p&gt;&lt;p&gt;On the GPU side, the story was reversed. The GPU proved very capable and we ended up adding additional &quot;polish&quot; features as the GPU had capacity to do it. There was even some discussion on trying to utilise the GPU via compute shaders (GPGPU) to offload work from the CPU - exactly the approach I expect to see gain traction on the next-gen consoles - but with very limited development time and no examples or guidance from Nintendo, we didn't feel that we could risk attempting this work. If we had a larger development team or a longer timeframe, maybe we would have attempted it, but in hindsight we would have been limited as to what we could have done before we maxed out the GPU again. The GPU is better than on PS3 or Xbox 360, but leagues away from the graphics hardware in the PS4 or Xbox One.&lt;/p&gt;&lt;p&gt;I've also seen some concerns about the utilisation of DDR3 RAM on Wii U, and a bandwidth deficit compared to the PS3 and Xbox 360. This wasn't really a problem for us. The GPU could fetch data rapidly with minimal stalls (via the EDRAM) and we could efficiently pre-fetch, allowing the GPU to run at top speed.&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;h2&gt;Nintendo vs. online gaming&lt;/h2&gt;&lt;p&gt;Now that the game was coming together and the hardware issues were being resolved our attention turned to the networking side of our game and its interface to the newly announced Nintendo Network. We spotted early on that there seemed to be gaps in the documentation, and the code, around the networking area, so we asked for clarification. After the usual translation delay we received word that they were still working on the code, but don't worry it would be arriving soon.&lt;/p&gt;&lt;p&gt;Alarm bells started ringing quietly in my head again, but I put them to one side for the time being. This is Nintendo's new network infrastructure that they are basing their console around, they should make sure that it is complete and fully tested before sharing it, so I could forgive them some delay. We had the basics so we could at least do some testing and connect multiple kits together, but a lot of the Mii and friends content was missing and there was no way to test how the existing code would behave in a &quot;retail environment&quot; as there was no retail &quot;flash&quot; for the development kits. We had to code it all in the dark and just hope that it worked.&lt;/p&gt;&lt;p&gt;Around this time we got the chance to talk to some more senior people in Nintendo, via a phone conference, as they were gathering feedback on our development experiences and their toolchain. This phone conference gave an interesting insight into Nintendo and how it appears to operate.&lt;/p&gt;&lt;div class=&quot;pullquote  left &quot;&gt;&lt;p&gt;&quot;At some point in this conversation we were informed that it was no good referencing Live and PSN as nobody in [Nintendo's] development teams used those systems (!) so could we provide more detailed explanations for them?&quot; &lt;/p&gt; &lt;/div&gt;				&lt;p class=&quot;video&quot;&gt;
					&lt;iframe width=&quot;600&quot; height=&quot;338&quot; src=&quot;http://www.youtube.com/embed/doMx1UEKEzU&quot;&gt;&lt;/iframe&gt;
					
				&lt;/p&gt;
&lt;p&gt;The discussion started off well enough and covered off our experiences with the hardware and (slow) toolchain and then we steered them towards discussing when the online features might be available. We were told that the features, and the OS updates to support them, would be available before the hardware launch, but only just. There were apparently issues with setting up a large networking infrastructure to rival Sony and Microsoft that they hadn't envisaged.&lt;/p&gt;&lt;p&gt;This was surprising to hear, as we would have thought that they had plenty of time to work on these features as it had been announced months before, so we probed a little deeper and asked how certain scenarios might work with the Mii friends and networking, all the time referencing how Xbox Live and PSN achieve the same thing. At some point in this conversation we were informed that it was no good referencing Live and PSN as nobody in their development teams used those systems (!) so could we provide more detailed explanations for them? My only thought after this call was that they were struggling - badly - with the networking side as it was far more complicated than they anticipated. They were trying to play catch-up with the rival systems, but without the years of experience to back it up.&lt;/p&gt;&lt;p&gt;As promised, (just) before the worldwide launch we received the final networking features that we required for our game along with an OS update for the development kits that would allow us to test. So we patched up our code and tried to start testing our game.&lt;/p&gt;&lt;p&gt;First up we had to flash the kits to the retail mode that had the Mii and network features. This was a very complicated manual process that left the consoles in a halfway state. In the retail mode we could test our features and ensure that they worked as expected, which would be a requirement for getting through Nintendo certification, but in this mode the debugging capabilities were limited. So we could see when things went wrong, but we couldn't fully debug to find out why. As developers, we had to make a choice and hope that any issues that you found were due to the (untested) OS code and wouldn't happen in the final retail environment. What should have been simple tasks were long-winded and error prone. Simple things like sending a friends request to another user were not supported in the OS, so you had to boot a separate program on the console manually, via a debug menu, so that you could send one. But if any error occurred there was no way to debug why it had failed, it just failed.&lt;/p&gt;&lt;p&gt;We started to ask questions about how they could possibly launch the console, which was a matter of weeks away, with a partially developed OS. How were they going to get the OS onto all of the consoles that had been manufactured up to that point? Was it just that we got it late, but they had pushed it into the production line earlier?&lt;/p&gt;&lt;p&gt;Launch day came around and the answer became clear: Nintendo was late - very late - with its network systems. In fact, the only way to access their systems fully was to download a &lt;em&gt;big&lt;/em&gt; patch on day one that added all these missing components. Without that patch a lot of the release titles would have been only semi-functional.&lt;/p&gt;&lt;div class=&quot;pullquote  left &quot;&gt;&lt;p&gt;&quot;We started to ask questions about how they could possibly launch the console, which was a matter of weeks away, with a partially developed OS... Launch day came around and the answer became clear: Nintendo was late - very late - with its network systems.&quot; &lt;/p&gt; &lt;/div&gt;				&lt;p class=&quot;video&quot;&gt;
					&lt;iframe width=&quot;600&quot; height=&quot;338&quot; src=&quot;http://www.youtube.com/embed/1rUR9A0Dl00&quot;&gt;&lt;/iframe&gt;
					
				&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;h2&gt;What happened next?&lt;/h2&gt;&lt;p&gt;Well, we eventually released our game and it was generally well-received, so the management sat back to see what kind of sales figures we would get for all our efforts. Without going into detail it would be fair to say that the numbers we were seeing were less than impressive. In fact we would be lucky to make back all the money that we had invested in making the game in the first place, and although the management publicly supported the Wii U platform, it is unlikely that we would ever release another Wii U title.&lt;/p&gt;&lt;p&gt;But what about the rest of the world? How had other development studios faired? The story of what happened next is pretty well documented in the gaming press, but I'd like to highlight some interesting points that have been on my mind recently. Firstly, third-party support. Do you remember all the hype surrounding the Wii U launch? All those third parties showing videos of existing games that they were going to bring to the Wii U? Whatever happened to a lot of those games?&lt;/p&gt;&lt;p&gt;After the initial flurry of game titles a lot of the studios quietly backed away from their initial statements and announced, with minimal press, that they were in fact not going to make a Wii U version. The reasons behind a particular title not appearing on the Wii U are all pure speculation, but I personally think that a combination of:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Previous development experience using the toolchain and hardware put off development teams from making another title on Wii U.&lt;/li&gt;&lt;li&gt;The technical and feature support from Nintendo were lacking for third-party studios. There was a feeling internally that if you weren't a first-party development studio, you were largely ignored by Nintendo, as we were superficial to their profits. Internally developed titles would save Nintendo and we were just there to add depth to the games catalogue.&lt;/li&gt;&lt;li&gt;The sales figures for the Wii U console were not looking that good soon after launch. There was a lot of confusion in the general population around the launch as most people thought that the Wii U was some kind of add-on to the Wii, they didn't know that it was a new console. This lack of awareness probably contributed to the console not getting off to the start that Nintendo would have hoped and put off studio from developing on the hardware.&lt;/li&gt;&lt;li&gt;Nintendo also fell victim to bad timing. A few months after the console launched the next-gen hype train stepped up a gear as Sony announced the PlayStation 4, with Microsoft joining the fray a few months later. Don't forget that many of the larger studios would have known about the hardware months before it was announced, well before the Wii U hardware actually launched.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So, these larger studios had a choice. Would they develop a port of an existing game to a console with limited capabilities and limited market penetration? Or put their teams to work on developing new features and concepts for the &quot;real&quot; next-gen consoles that were going to be launched that year? When you look at it this way, the choice isn't that hard.&lt;/p&gt;&lt;div class=&quot;pullquote  left &quot;&gt;&lt;p&gt;&quot;Larger studios had a choice. Would they port of an existing game to a console with limited capabilities and limited market penetration? Or put their teams to work on developing new features and concepts for the 'real' next-gen consoles?&quot; &lt;/p&gt; &lt;/div&gt;				&lt;p class=&quot;video&quot;&gt;
					&lt;iframe width=&quot;600&quot; height=&quot;338&quot; src=&quot;http://www.youtube.com/embed/yvg9mwBrZy4&quot;&gt;&lt;/iframe&gt;
					
				&lt;/p&gt;
&lt;p&gt;From a first-party perspective, it seems that Nintendo itself hasn't had the easiest time. Now this is pure speculation, but from interactions with some of the development teams it seems as though Nintendo's own teams were having real troubles adapting to the new console - the main reason being the move to HD and the ability of the hardware to support it. Don't forget that until the Wii U came out, none of the first-party titles were in HD and the move from SD to HD is not as easy as you would expect. PS3 and Xbox 360 developers went through this pain early in the previous console cycle and it cost them a lot of time and money trying to adapt, with some studios failing in a big way.&lt;/p&gt;&lt;p&gt;Nintendo's internal teams were now facing this challenge on a new console with limited development time and a lot of pressure to deliver compelling titles. With these pressures upon them it was inevitable that some of the higher-profile titles would slip, but it's surprising how sparse the first-party line-up has been over the last year.&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;&quot;&gt;
  &lt;h2&gt;The future for Wii U&lt;/h2&gt;
  &lt;p&gt;Can the Wii U compete in this brave new world of next-gen (current-gen?) consoles? In terms of raw performance it sits uncomfortably between the previous generation and the current one. Parts of the hardware run better than the previous generation, but other parts drag it down. If you tried to compare the Wii U against the PS4/XO, it comes off very badly indeed - it just cannot compete with the new consoles.&lt;/p&gt;
  &lt;p&gt;At a very basic level, look at the power draw taken by the next-gen consoles compared to the Wii U. The PlayStation 4 draws over 100W more from the mains than Nintendo's console, and it does so using the latest, most power-efficient x86 cores from AMD in concert with a much larger GPU that's a generation ahead and runs on a much smaller fabrication process - 28nm vs. what I'm reliably informed is the 55nm process from Japanese company Renasas. &lt;/p&gt;
  &lt;p&gt;There are some fleeting parallels between Wii U and the next-gen consoles - the combination of a low-power CPU with a much more powerful graphics chip - but the notion of next-gen titles being easily portable to the Wii U just doesn't work. The gulf in power is just too high, while the GPGPU that we'll see on Xbox One and PlayStation 4 isn't compatible with the older shader model four hardware found in the Wii U.&lt;/p&gt;
  &lt;p&gt;Doubtless, the first-party developers at Nintendo will make the hardware sing - they always do - but the situation looks grim for those of us in third-party development, with the opportunity to progress on the hardware held back by both the quality of the tools and the lack of financial reward for tailoring our code to the strengths of the hardware. So where does that leave the Wii U?&lt;/p&gt;
  &lt;p&gt;Personally I'm not sure on what will happen, but if the current trends continue, the Wii U will probably continue to sell in small quantities until a &quot;must have&quot; title is released, probably from a first-party studio, at which point the sales will sky rocket for a while - but even so, matching the momentum of PlayStation 4 and Xbox One seems highly unlikely. Other variables such as the recent news regarding China lifting the ban on games consoles may influence Nintendo's future direction. This huge untapped market may provide a lifeline in terms of sales, but with the low wages of the general population these sales might well come from the original Wii, rather than the more expensive Wii U.&lt;/p&gt;
  &lt;p&gt;You can never discount Nintendo, but based on my experience - and the sales of the platform - the company's facing its most testing challenge in modern times.&lt;/p&gt;
&lt;/section&gt;
		

	
																																												
	
						
						
	
					&lt;/article&gt;
	
											
				
									&lt;/div&gt;
</description>
<title>
The Secret Developers: Wii U - the inside story
</title>
</item>
<item>
<author>
unknown
</author>
<link>
https://www.youtube.com/watch?v=OPcV9uIY5i4
</link>
<description>
&lt;figure class=&quot;video blockFigure&quot;&gt;&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;http://www.youtube.com/embed/OPcV9uIY5i4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;figcaption&gt;http://tasvideos.org/4156S.html&lt;/figcaption&gt;&lt;/figure&gt;
</description>
<title>
Using bugs in Super Mario World to inject new code and play pong.
</title>
</item>
<item>
<author>
unknown
</author>
<link>
https://github.com/veltman/clmystery
</link>
<description>
&lt;div&gt;&lt;article class=&quot;markdown-body entry-content&quot;&gt;

&lt;pre&gt;&lt;code&gt;.OOOOOOOOOOOOOOO @@                                   @@ OOOOOOOOOOOOOOOO.
OOOOOOOOOOOOOOOO @@                                    @@ OOOOOOOOOOOOOOOO
OOOOOOOOOO'''''' @@                                    @@ ```````OOOOOOOOO
OOOOO'' aaa@@@@@@@@@@@@@@@@@@@@&quot;&quot;&quot;                   &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;@@aaaa `OOOO
OOOOO,&quot;&quot;&quot;&quot;@@@@@@@@@@@@@@&quot;&quot;&quot;&quot;                                     a@&quot;&quot; OOOA
OOOOOOOOOoooooo,                                            |OOoooooOOOOOS
OOOOOOOOOOOOOOOOo,                                          |OOOOOOOOOOOOC
OOOOOOOOOOOOOOOOOO                                         ,|OOOOOOOOOOOOI
OOOOOOOOOOOOOOOOOO @          THE                          |OOOOOOOOOOOOOI
OOOOOOOOOOOOOOOOO'@           COMMAND                      OOOOOOOOOOOOOOb
OOOOOOOOOOOOOOO'a'            LINE                         |OOOOOOOOOOOOOy
OOOOOOOOOOOOOO''              MURDERS                      aa`OOOOOOOOOOOP
OOOOOOOOOOOOOOb,..                                          `@aa``OOOOOOOh
OOOOOOOOOOOOOOOOOOo                                           `@@@aa OOOOo
OOOOOOOOOOOOOOOOOOO|                                             @@@ OOOOe
OOOOOOOOOOOOOOOOOOO@                               aaaaaaa       @@',OOOOn
OOOOOOOOOOOOOOOOOOO@                        aaa@@@@@@@@&quot;&quot;        @@ OOOOOi
OOOOOOOOOO~~ aaaaaa&quot;a                 aaa@@@@@@@@@@&quot;&quot;            @@ OOOOOx
OOOOOO aaaa@&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; &quot;&quot;            @@@@@@@@@@@@&quot;&quot;               @@@|`OOOO'
OOOOOOOo`@@a                  aa@@  @@@@@@@&quot;&quot;         a@        @@@@ OOOO9
OOOOOOO'  `@@a               @@a@@   @@&quot;&quot;           a@@   a     |@@@ OOOO3
`OOOO'       `@    aa@@       aaa&quot;&quot;&quot;          @a        a@     a@@@',OOOO'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There's been a murder in Terminal City, and TCPD needs your help.&lt;/p&gt;

&lt;p&gt;To figure out whodunit, you need access to a command line.&lt;/p&gt;

&lt;p&gt;Once you're ready, clone this repo, or &lt;a href=&quot;https://github.com/veltman/clmystery/archive/master.zip&quot;&gt;download it as a zip file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open a Terminal, go to the location of the files, and start by reading the file 'instructions'.&lt;/p&gt;

&lt;p&gt;One way you can do this is with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat instructions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get started on how to use the command line, open cheatsheet.md or cheatsheet.pdf (from the command line, you can type 'nano cheatsheet.md').&lt;/p&gt;

&lt;p&gt;Don't use a text editor to view any files except these instructions, the cheatsheet, and hints.&lt;/p&gt;&lt;/article&gt;
  &lt;/div&gt;
</description>
<title>
A command line murder mystery
</title>
</item>
<item>
<author>
unknown
</author>
<link>
http://blogs.perl.org/users/ovid/2014/01/ditching-a-language.html
</link>
<description>
&lt;div&gt;
                        
                        
                        
                        &lt;div class=&quot;entry-body&quot;&gt;
                            &lt;p&gt;I can't go into the full background and a couple of details have been changed to protect the innocent, but I was chatting with a company that I'll call Acme. They faced a situation that I've seen before and usually ends badly. The code base they have looks like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Roughly a &lt;em&gt;million&lt;/em&gt; lines of legacy spaghetti code&lt;/li&gt;
&lt;li&gt;Very little use of existing libraries (&quot;not invented here&quot; syndrome)&lt;/li&gt;
&lt;li&gt;Siloed developers&lt;/li&gt;
&lt;li&gt;Hard to maintain and extend&lt;/li&gt;
&lt;li&gt;Prospective developers see the code and &quot;nope&quot; the heck out of there&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have spoken to quite a few companies in this mess and Acme had a solution for dealing with it: they were going to rewrite the code base in another language.&lt;/p&gt;

&lt;p&gt;Oh really?&lt;/p&gt;

                            &lt;p&gt;A &lt;em&gt;million&lt;/em&gt; lines of code, in heavy use, is going to be rewritten? Let's do some rough math.&lt;/p&gt;

&lt;p&gt;We know that lines of code is a rubbish metric for productivity, but in this case, it's really all I have to work with. I pulled out an old project of mine and saw that I did six months of development on it. How do I calculate the lines of code I've written? Well, I can't, not really, but for the sake of argument, let's make a quick guess. Given a starting and ending commit, &lt;a href=&quot;http://stackoverflow.com/questions/2528111/how-can-i-calculate-the-number-of-lines-changed-between-two-commits-in-git&quot;&gt;here's how I can calculate how many lines of code I've changed over the course of the project (using git)&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;prettyprint&quot;&gt;git log --numstat --pretty=&quot;%H&quot; --author=ovid $first_commit..$last_commit \
  | perl -anE 'if (3 == @F){ $a+=$F[0];$b+=$F[1] } END { say &quot;+$a -$b&quot; }'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that printed my total insertions and deletions: +76294, -32686. That makes for just over 100,000 lines of code changed in six months, but even then, it's a rubbish, rubbish metric. No matter how I play with the numbers, I get between 300 to 1,000 lines of code a day. I'm productive, but that number seems very high. On the other hand, the project lead commented that I was productive enough that it was hard to do code reviews, so maybe that's not too far off.&lt;/p&gt;

&lt;p&gt;Let's forget about the &lt;a href=&quot;http://codebetter.com/patricksmacchia/2012/01/23/mythical-man-month-10-lines-per-developer-day/&quot;&gt;10 lines of code a day&lt;/a&gt; that we sometimes hear and pick 500 lines of code a day. That's being generous. Very generous. Further, let's assume that we can maintain this pace and that the old code base will be written in a language with similar verbosity. That's roughly 5.5 person years of effort to rewrite to rewrite the code base, but that assumes you're working seven days a week, 365 days a year. In reality US workers typically work roughly 2,000 hours per year, or about 250 days out of the year. That means it would take eight person years of effort to replicate the above code base (over ten years for the average hourly hours here in France).&lt;/p&gt;

&lt;p&gt;And that's assuming you could consistently crank out 500 lines of code a day. So we'll forget about the lessons of the Mythical Man Month and assume 8 developers could crank this out in a year. Assuming that each developer annually costs the company around &amp;#x20AC;100,000 (that's salary, insurance, taxes, training, supporting equipment, etc.), and assuming at least two other employees will be there to coordinate the project, that's a &amp;#x20AC;1,000,000 they're going to spend.&lt;/p&gt;

&lt;p&gt;No, that's not true. That's a one million euro they're going to flush down the toilet and reach for the euro roll again. Acme's developers have meetings. They have &quot;off days&quot;. They have to spend time understanding the original code base: they can't just transcribe it. Work will still have to continue on the old code base. Features added to the old would have to be added to the new. Features taken for granted in one code base won't be available in the other. Modules working in one code base won't be available in the other (or worse, may be available but you'll miss all the interface differences). And then there's the work coordination necessary between eight devs. Further, because of the lack of structure in Acme's old code base, simply transcribing it would turn one steaming pile of ones and zeros into another steaming pile of ones and zeros. I suspect new team would be &lt;em&gt;lucky&lt;/em&gt; to get 500 lines of code a day for the entire team. Very lucky. This project, even if wildly successful, is going to cost many millions of euros.&lt;/p&gt;

&lt;p&gt;And now Acme has to have the new development team &lt;em&gt;and&lt;/em&gt; the old development team sticking around, greatly increasing their costs (or retrain the existing devs). At the BBC, as soon as they announced they were switching from Perl several Perl devs announced they were quitting and taking their hard-earned business knowledge with them. Why stick with a company when you know you don't have a future? (Actually, your future is likely guaranteed, but grudgingly.) And I might add that Perl is still heavily used at the BBC, several years later because &quot;see above&quot;. (And guess why &lt;a href=&quot;http://www.computerworld.com/s/article/9225079/Brain_drain_Where_Cobol_systems_go_from_here_&quot;&gt;COBOL is still so heavily used&lt;/a&gt;? See above.)&lt;/p&gt;

&lt;p&gt;Note that the above isn't an analysis. It's a &quot;pie in the sky&quot; best case pipe dream that simply won't happen. You can pull this off for smaller code bases, but even then it's painful, expensive, and time-consuming. The industry is riddled with projects (and companies) that have failed because of rewrites (anyone remember Netscape?). &lt;/p&gt;

&lt;p&gt;I have been at multiple companies that have decided to change programming languages, but they're generally not foolish enough to blindly rewrite their systems[1]. I worked with &lt;em&gt;two&lt;/em&gt; companies that switched to Ruby on Rails and subsequently ditched it (both for Perl), only to find that they don't have the time to replace it. So now they have legacy Rails apps that they have to maintain because they don't have the time or money to simply rewrite them. And these were &lt;em&gt;small&lt;/em&gt; compared to a million line code base.&lt;/p&gt;

&lt;p&gt;So Acme has decided to spend millions of euros to switch from their current high risk/low reward position to a new higher risk/low reward position. I fail to see the cunningness here. Unfortunately, I understand what happened. At another company, the CEO panicked in a financial crisis and fired the dev team that had been working for one and a half years to develop a complicated project in part because an outsourcing company in India promised they could replicate it in two months &amp;#x2014; for a lot less money. Non-technical people often have no understanding of how hard our work is.&lt;/p&gt;

&lt;p&gt;Acme's solution to their current woes clearly fits the definition of &quot;large project&quot; and we know from &lt;em&gt;decades&lt;/em&gt; of painful experience that large projects fail. They're so disastrous that &lt;a href=&quot;http://www.mckinsey.com/insights/business_technology/delivering_large-scale_it_projects_on_time_on_budget_and_on_value&quot;&gt;almost one fifth of large software projects threaten the very existence of the company&lt;/a&gt;. Would you &lt;em&gt;dare&lt;/em&gt; go to the Board of Directors and say &quot;I have a multi-million euro software project that if it succeeds, will make it easier to hire developers, but it will probably fail and has almost a 1 in 5 chance of bankrupting us?&quot; No, you wouldn't, but Acme did.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;1. Except for an insurance company who decided to switch their accounting software from COBOL to C++. They gave their COBOL devs a two week training course in C++ and told 'em to rewrite the system. I don't need to tell you how that turned out.&lt;/small&gt;&lt;/p&gt;

                        &lt;/div&gt;
                        
                        
                    &lt;/div&gt;
</description>
<title>
A company having trouble hiring decides to rewrite their million line application in a new language
</title>
</item>
<item>
<author>
unknown
</author>
<link>
http://apple.stackexchange.com/questions/5435/got-any-tips-or-tricks-for-terminal-in-mac-os-x
</link>
<description>
&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;
            &lt;p&gt;Make files invisible:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SetFile file -a V&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SetFile can change a lot of other file attributes and metadata, as well.&lt;/p&gt;

&lt;p&gt;SetFile is not a OS X native command it comes bundled with DevTools/Xcode.&lt;/p&gt;

&lt;p&gt;If you don't have Xcode and don't want to download about 6 GB, you can use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chflags hidden|show &amp;lt;file/folder&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;chflags is a BSD command and it also has a Man Page just enter this in Terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;man chflags
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for those who don't like to enter commands self and just would like to know what there stands in the man. Here you have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CHFLAGS(1)        BSD General Commands Manual           CHFLAGS(1)

NAME
     chflags -- change file flags

SYNOPSIS
     chflags [-fhv] [-R [-H | -L | -P]] flags file ...

DESCRIPTION
     The chflags utility modifies the file flags of the listed files as speci-
     fied by the flags operand.

     The options are as follows:

     -f      Do not display a diagnostic message if chflags could not modify
         the flags for file, nor modify the exit status to reflect such
         failures.

     -H      If the -R option is specified, symbolic links on the command line
         are followed.  (Symbolic links encountered in the tree traversal
         are not followed.)

     -h      If the file is a symbolic link, change the file flags of the link
         itself rather than the file to which it points.

     -L      If the -R option is specified, all symbolic links are followed.

     -P      If the -R option is specified, no symbolic links are followed.
         This is the default.

     -R      Change the file flags for the file hierarchies rooted in the
         files instead of just the files themselves.

     -v      Cause chflags to be verbose, showing filenames as the flags are
         modified.  If the -v option is specified more than once, the old
         and new flags of the file will also be printed, in octal nota-
         tion.

     The flags are specified as an octal number or a comma separated list of
     keywords.  The following keywords are currently defined:

       arch, archived
           set the archived flag (super-user only)

       opaque  set the opaque flag (owner or super-user only).  [Directory
           is opaque when viewed through a union mount]

       nodump  set the nodump flag (owner or super-user only)

       sappnd, sappend
           set the system append-only flag (super-user only)

       schg, schange, simmutable
           set the system immutable flag (super-user only)

       uappnd, uappend
           set the user append-only flag (owner or super-user only)

       uchg, uchange, uimmutable
           set the user immutable flag (owner or super-user only)

       hidden  set the hidden flag [Hide item from GUI]

     As discussed in chflags(2), the sappnd and schg flags may only be unset
     when the system is in single-user mode.

     Putting the letters ``no'' before or removing the letters ``no'' from a
     keyword causes the flag to be cleared.  For example:

       nouchg  clear the user immutable flag (owner or super-user only)
       dump    clear the nodump flag (owner or super-user only)

     Unless the -H or -L options are given, chflags on a symbolic link always
     succeeds and has no effect.  The -H, -L and -P options are ignored unless
     the -R option is specified.  In addition, these options override each
     other and the command's actions are determined by the last one specified.

     You can use &quot;ls -lO&quot; to see the flags of existing files.

EXIT STATUS
     The chflags utility exits 0 on success, and &amp;gt;0 if an error occurs.

SEE ALSO
     ls(1), chflags(2), stat(2), fts(3), symlink(7)

HISTORY
     The chflags command first appeared in 4.4BSD.

BUGS
     Only a limited number of utilities are chflags aware.  Some of these
     tools include ls(1), cp(1), find(1), install(1), dump(8), and restore(8).
     In particular a tool which is not currently chflags aware is the pax(1)
     utility.

BSD              March 3, 2006                 BSD
&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;None of these are exactly OSX specific, but here's some stuff from my .bash_profile that I find useful:&lt;/p&gt;

&lt;p&gt;Colored Prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS1=&quot;\[\e[0;31m\][\[\e[1;31m\]\u\[\e[0;34m\]@\h \[\e[32m\]\w\[\e[0;31m]\]\$\[\e[0m\] &quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://grab.by/grabs/c2c7cdff8e49dd764d326620df762665.png&quot; alt=&quot;example&quot;&gt;&lt;/p&gt;

&lt;p&gt;SSH tab completion of hosts that exist in ~/.ssh/config:  (found on &lt;a href=&quot;http://www.macosxhints.com/article.php?story=20100113142633883&quot; rel=&quot;nofollow&quot;&gt;MacOSXHints&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;complete -o default -o nospace -W &quot;$(/usr/bin/env ruby -ne 'puts $_.split(/[,\s]+/)[1..-1].reject{|host| host.match(/\*|\?/)} if $_.match(/^\s*Host\s+/);' &amp;lt; $HOME/.ssh/config)&quot; scp sftp ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Highlighted grep:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias grep=&quot;grep --color=auto&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://grab.by/grabs/dd26dd993c74f8dd076e2f911a8e4ec6.png&quot; alt=&quot;highlighted grep&quot;&gt;&lt;/p&gt;

&lt;p&gt;Automagically dump your public ssh key to a host for future passwordless auth: (can probably easily tweaked to add said host to ~/.ssh/config)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-setup() { cat ~/.ssh/id_rsa.pub | ssh $1 'cat - &amp;gt;&amp;gt; ~/.ssh/authorized_keys'; }
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;More OSX specific stuff that I've setup forces the machine to take a picture with the built-in iSight every time the machine's lid is open and dumps that image in a directory.&lt;br&gt;
Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bernhard-baehr.de/&quot; rel=&quot;nofollow&quot;&gt;SleepWatcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.intergalactic.de/pages/iSight.html&quot; rel=&quot;nofollow&quot;&gt;iSightCapture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a directory somewhere to hold all your images.
Dump this into ~/.wakeup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date=$(date +%y%m%d_%H_%M_%S).jpg;
/PATH/TO/isightcapture -w 640 -h 480 -n 3 -d -t jpg /PATH/TO/PICTURE/DUMP/$date &amp;gt; /dev/null
unset date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've been capping a frame every time my MacBook wakes up for the past 3 1/2 years now, it's interesting to see everything compiled into a long video at a high framerate.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;Ok, definitely not mac specific, but TAB completion in &lt;code&gt;zsh&lt;/code&gt;  is so good I  think it deserves a specific mention.&lt;/p&gt;

&lt;p&gt;You get completion of options, e.g. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -d[TAB]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will give you &lt;code&gt;-daystart&lt;/code&gt;  &lt;code&gt;-delete&lt;/code&gt; &lt;code&gt;-depth&lt;/code&gt; as possible completions.&lt;/p&gt;

&lt;p&gt;Also path completion is improved over Bash completion, for example, I have a Volume called Wubly, and inside that &lt;code&gt;video/tv/comedy&lt;/code&gt;, so typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /v/w/v/t/co[TAB] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will expand to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /Volumes/Wubly/Video/TV/Comedy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(note that it's also case insensitive.)&lt;/p&gt;

&lt;p&gt;If there are multiple paths that match this pattern, they will be shown.&lt;/p&gt;

&lt;p&gt;Completion is also interactive, so you can move around the available choices with the cursor controls.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;&lt;strong&gt;Send Audio to a Apple Tv/Airplay device via the  /usr/bin/say command&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -r160 -a &quot;AirPlay&quot; &quot;hello world&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-r160&lt;/strong&gt; is  Speech rate to be used, in words per minute&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-a&lt;/strong&gt;  followed by device &lt;em&gt;name&lt;/em&gt; or &lt;em&gt;number&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then your text.&lt;/p&gt;

&lt;p&gt;To list your available audio device&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -a?
   39 AirPlay
   47 Built-in Output
  209 Soundflower (2ch)
   74 Soundflower (64ch)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the numbers will work just as well in place of the device name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -r160 -a 39 &quot;Hover over a Method&quot;;say -r160 -a &quot;Built-in Output&quot; &quot;I am back&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the -f option to use a text file as your speech text.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/bin/say -f ~/Music/foo.txt -r160 -a 39 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you will notice say can expand tilde file paths&lt;/p&gt;



&lt;p&gt;With say you can do a lot more like save speech text directly to audio file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/bin/say  -o ~/Music/hi.aac Hello, World.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-o&lt;/strong&gt; oupt file path.  i.e  ~/Music/hi &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.aac&lt;/strong&gt;  file format&lt;/p&gt;

&lt;p&gt;This saves a &lt;strong&gt;.acc&lt;/strong&gt; file named hi.aac to the Music Directory.&lt;/p&gt;

&lt;p&gt;Directory paths MUST exist before the command is run. The file does not need to exist first in the directory and if it does it will most likely be overwritten.&lt;/p&gt;

&lt;p&gt;There are other formats you can use.&lt;/p&gt;

&lt;p&gt;The man page &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/say.1.html&quot; rel=&quot;nofollow&quot;&gt;say&lt;/a&gt; will show you the full list of the options.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;

        &lt;p&gt;One tip or trick per answer.&lt;/p&gt;

&lt;p&gt;My favorite is &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opens the folder you're currently browsing in Finder. You can also pass URLs, images, documents or else to &lt;code&gt;open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you specify a program name with -a you can pass the URL, image, document or folder to that program instead, e.g. &lt;code&gt;open -a Preview image.png&lt;/code&gt;, overriding the default program set for the filetype.&lt;/p&gt;

&lt;p&gt;Please don't post duplicates. Search in the question like this: &lt;code&gt;inquestion:this ls -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mac OS X specific&lt;/strong&gt; answers only.&lt;/p&gt;

    &lt;/div&gt;
    
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;None of these are exactly OSX specific, but here's some stuff from my .bash_profile that I find useful:&lt;/p&gt;

&lt;p&gt;Colored Prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS1=&quot;\[\e[0;31m\][\[\e[1;31m\]\u\[\e[0;34m\]@\h \[\e[32m\]\w\[\e[0;31m]\]\$\[\e[0m\] &quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://grab.by/grabs/c2c7cdff8e49dd764d326620df762665.png&quot; alt=&quot;example&quot;&gt;&lt;/p&gt;

&lt;p&gt;SSH tab completion of hosts that exist in ~/.ssh/config:  (found on &lt;a href=&quot;http://www.macosxhints.com/article.php?story=20100113142633883&quot; rel=&quot;nofollow&quot;&gt;MacOSXHints&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;complete -o default -o nospace -W &quot;$(/usr/bin/env ruby -ne 'puts $_.split(/[,\s]+/)[1..-1].reject{|host| host.match(/\*|\?/)} if $_.match(/^\s*Host\s+/);' &amp;lt; $HOME/.ssh/config)&quot; scp sftp ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Highlighted grep:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias grep=&quot;grep --color=auto&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://grab.by/grabs/dd26dd993c74f8dd076e2f911a8e4ec6.png&quot; alt=&quot;highlighted grep&quot;&gt;&lt;/p&gt;

&lt;p&gt;Automagically dump your public ssh key to a host for future passwordless auth: (can probably easily tweaked to add said host to ~/.ssh/config)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-setup() { cat ~/.ssh/id_rsa.pub | ssh $1 'cat - &amp;gt;&amp;gt; ~/.ssh/authorized_keys'; }
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;More OSX specific stuff that I've setup forces the machine to take a picture with the built-in iSight every time the machine's lid is open and dumps that image in a directory.&lt;br&gt;
Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bernhard-baehr.de/&quot; rel=&quot;nofollow&quot;&gt;SleepWatcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.intergalactic.de/pages/iSight.html&quot; rel=&quot;nofollow&quot;&gt;iSightCapture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a directory somewhere to hold all your images.
Dump this into ~/.wakeup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date=$(date +%y%m%d_%H_%M_%S).jpg;
/PATH/TO/isightcapture -w 640 -h 480 -n 3 -d -t jpg /PATH/TO/PICTURE/DUMP/$date &amp;gt; /dev/null
unset date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've been capping a frame every time my MacBook wakes up for the past 3 1/2 years now, it's interesting to see everything compiled into a long video at a high framerate.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;Ok, definitely not mac specific, but TAB completion in &lt;code&gt;zsh&lt;/code&gt;  is so good I  think it deserves a specific mention.&lt;/p&gt;

&lt;p&gt;You get completion of options, e.g. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -d[TAB]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will give you &lt;code&gt;-daystart&lt;/code&gt;  &lt;code&gt;-delete&lt;/code&gt; &lt;code&gt;-depth&lt;/code&gt; as possible completions.&lt;/p&gt;

&lt;p&gt;Also path completion is improved over Bash completion, for example, I have a Volume called Wubly, and inside that &lt;code&gt;video/tv/comedy&lt;/code&gt;, so typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /v/w/v/t/co[TAB] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will expand to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /Volumes/Wubly/Video/TV/Comedy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(note that it's also case insensitive.)&lt;/p&gt;

&lt;p&gt;If there are multiple paths that match this pattern, they will be shown.&lt;/p&gt;

&lt;p&gt;Completion is also interactive, so you can move around the available choices with the cursor controls.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;&lt;strong&gt;Send Audio to a Apple Tv/Airplay device via the  /usr/bin/say command&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -r160 -a &quot;AirPlay&quot; &quot;hello world&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-r160&lt;/strong&gt; is  Speech rate to be used, in words per minute&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-a&lt;/strong&gt;  followed by device &lt;em&gt;name&lt;/em&gt; or &lt;em&gt;number&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then your text.&lt;/p&gt;

&lt;p&gt;To list your available audio device&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -a?
   39 AirPlay
   47 Built-in Output
  209 Soundflower (2ch)
   74 Soundflower (64ch)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the numbers will work just as well in place of the device name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -r160 -a 39 &quot;Hover over a Method&quot;;say -r160 -a &quot;Built-in Output&quot; &quot;I am back&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the -f option to use a text file as your speech text.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/bin/say -f ~/Music/foo.txt -r160 -a 39 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you will notice say can expand tilde file paths&lt;/p&gt;



&lt;p&gt;With say you can do a lot more like save speech text directly to audio file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/bin/say  -o ~/Music/hi.aac Hello, World.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-o&lt;/strong&gt; oupt file path.  i.e  ~/Music/hi &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.aac&lt;/strong&gt;  file format&lt;/p&gt;

&lt;p&gt;This saves a &lt;strong&gt;.acc&lt;/strong&gt; file named hi.aac to the Music Directory.&lt;/p&gt;

&lt;p&gt;Directory paths MUST exist before the command is run. The file does not need to exist first in the directory and if it does it will most likely be overwritten.&lt;/p&gt;

&lt;p&gt;There are other formats you can use.&lt;/p&gt;

&lt;p&gt;The man page &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/say.1.html&quot; rel=&quot;nofollow&quot;&gt;say&lt;/a&gt; will show you the full list of the options.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;

        &lt;p&gt;One tip or trick per answer.&lt;/p&gt;

&lt;p&gt;My favorite is &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opens the folder you're currently browsing in Finder. You can also pass URLs, images, documents or else to &lt;code&gt;open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you specify a program name with -a you can pass the URL, image, document or folder to that program instead, e.g. &lt;code&gt;open -a Preview image.png&lt;/code&gt;, overriding the default program set for the filetype.&lt;/p&gt;

&lt;p&gt;Please don't post duplicates. Search in the question like this: &lt;code&gt;inquestion:this ls -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mac OS X specific&lt;/strong&gt; answers only.&lt;/p&gt;

    &lt;/div&gt;
    
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;None of these are exactly OSX specific, but here's some stuff from my .bash_profile that I find useful:&lt;/p&gt;

&lt;p&gt;Colored Prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS1=&quot;\[\e[0;31m\][\[\e[1;31m\]\u\[\e[0;34m\]@\h \[\e[32m\]\w\[\e[0;31m]\]\$\[\e[0m\] &quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://grab.by/grabs/c2c7cdff8e49dd764d326620df762665.png&quot; alt=&quot;example&quot;&gt;&lt;/p&gt;

&lt;p&gt;SSH tab completion of hosts that exist in ~/.ssh/config:  (found on &lt;a href=&quot;http://www.macosxhints.com/article.php?story=20100113142633883&quot; rel=&quot;nofollow&quot;&gt;MacOSXHints&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;complete -o default -o nospace -W &quot;$(/usr/bin/env ruby -ne 'puts $_.split(/[,\s]+/)[1..-1].reject{|host| host.match(/\*|\?/)} if $_.match(/^\s*Host\s+/);' &amp;lt; $HOME/.ssh/config)&quot; scp sftp ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Highlighted grep:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias grep=&quot;grep --color=auto&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://grab.by/grabs/dd26dd993c74f8dd076e2f911a8e4ec6.png&quot; alt=&quot;highlighted grep&quot;&gt;&lt;/p&gt;

&lt;p&gt;Automagically dump your public ssh key to a host for future passwordless auth: (can probably easily tweaked to add said host to ~/.ssh/config)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-setup() { cat ~/.ssh/id_rsa.pub | ssh $1 'cat - &amp;gt;&amp;gt; ~/.ssh/authorized_keys'; }
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;More OSX specific stuff that I've setup forces the machine to take a picture with the built-in iSight every time the machine's lid is open and dumps that image in a directory.&lt;br&gt;
Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bernhard-baehr.de/&quot; rel=&quot;nofollow&quot;&gt;SleepWatcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.intergalactic.de/pages/iSight.html&quot; rel=&quot;nofollow&quot;&gt;iSightCapture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a directory somewhere to hold all your images.
Dump this into ~/.wakeup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date=$(date +%y%m%d_%H_%M_%S).jpg;
/PATH/TO/isightcapture -w 640 -h 480 -n 3 -d -t jpg /PATH/TO/PICTURE/DUMP/$date &amp;gt; /dev/null
unset date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've been capping a frame every time my MacBook wakes up for the past 3 1/2 years now, it's interesting to see everything compiled into a long video at a high framerate.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;Ok, definitely not mac specific, but TAB completion in &lt;code&gt;zsh&lt;/code&gt;  is so good I  think it deserves a specific mention.&lt;/p&gt;

&lt;p&gt;You get completion of options, e.g. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -d[TAB]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will give you &lt;code&gt;-daystart&lt;/code&gt;  &lt;code&gt;-delete&lt;/code&gt; &lt;code&gt;-depth&lt;/code&gt; as possible completions.&lt;/p&gt;

&lt;p&gt;Also path completion is improved over Bash completion, for example, I have a Volume called Wubly, and inside that &lt;code&gt;video/tv/comedy&lt;/code&gt;, so typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /v/w/v/t/co[TAB] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will expand to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /Volumes/Wubly/Video/TV/Comedy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(note that it's also case insensitive.)&lt;/p&gt;

&lt;p&gt;If there are multiple paths that match this pattern, they will be shown.&lt;/p&gt;

&lt;p&gt;Completion is also interactive, so you can move around the available choices with the cursor controls.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;&lt;strong&gt;Send Audio to a Apple Tv/Airplay device via the  /usr/bin/say command&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -r160 -a &quot;AirPlay&quot; &quot;hello world&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-r160&lt;/strong&gt; is  Speech rate to be used, in words per minute&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-a&lt;/strong&gt;  followed by device &lt;em&gt;name&lt;/em&gt; or &lt;em&gt;number&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then your text.&lt;/p&gt;

&lt;p&gt;To list your available audio device&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -a?
   39 AirPlay
   47 Built-in Output
  209 Soundflower (2ch)
   74 Soundflower (64ch)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the numbers will work just as well in place of the device name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -r160 -a 39 &quot;Hover over a Method&quot;;say -r160 -a &quot;Built-in Output&quot; &quot;I am back&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the -f option to use a text file as your speech text.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/bin/say -f ~/Music/foo.txt -r160 -a 39 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you will notice say can expand tilde file paths&lt;/p&gt;



&lt;p&gt;With say you can do a lot more like save speech text directly to audio file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/bin/say  -o ~/Music/hi.aac Hello, World.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-o&lt;/strong&gt; oupt file path.  i.e  ~/Music/hi &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.aac&lt;/strong&gt;  file format&lt;/p&gt;

&lt;p&gt;This saves a &lt;strong&gt;.acc&lt;/strong&gt; file named hi.aac to the Music Directory.&lt;/p&gt;

&lt;p&gt;Directory paths MUST exist before the command is run. The file does not need to exist first in the directory and if it does it will most likely be overwritten.&lt;/p&gt;

&lt;p&gt;There are other formats you can use.&lt;/p&gt;

&lt;p&gt;The man page &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/say.1.html&quot; rel=&quot;nofollow&quot;&gt;say&lt;/a&gt; will show you the full list of the options.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;

        &lt;p&gt;One tip or trick per answer.&lt;/p&gt;

&lt;p&gt;My favorite is &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opens the folder you're currently browsing in Finder. You can also pass URLs, images, documents or else to &lt;code&gt;open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you specify a program name with -a you can pass the URL, image, document or folder to that program instead, e.g. &lt;code&gt;open -a Preview image.png&lt;/code&gt;, overriding the default program set for the filetype.&lt;/p&gt;

&lt;p&gt;Please don't post duplicates. Search in the question like this: &lt;code&gt;inquestion:this ls -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mac OS X specific&lt;/strong&gt; answers only.&lt;/p&gt;

    &lt;/div&gt;
    
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;None of these are exactly OSX specific, but here's some stuff from my .bash_profile that I find useful:&lt;/p&gt;

&lt;p&gt;Colored Prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS1=&quot;\[\e[0;31m\][\[\e[1;31m\]\u\[\e[0;34m\]@\h \[\e[32m\]\w\[\e[0;31m]\]\$\[\e[0m\] &quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://grab.by/grabs/c2c7cdff8e49dd764d326620df762665.png&quot; alt=&quot;example&quot;&gt;&lt;/p&gt;

&lt;p&gt;SSH tab completion of hosts that exist in ~/.ssh/config:  (found on &lt;a href=&quot;http://www.macosxhints.com/article.php?story=20100113142633883&quot; rel=&quot;nofollow&quot;&gt;MacOSXHints&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;complete -o default -o nospace -W &quot;$(/usr/bin/env ruby -ne 'puts $_.split(/[,\s]+/)[1..-1].reject{|host| host.match(/\*|\?/)} if $_.match(/^\s*Host\s+/);' &amp;lt; $HOME/.ssh/config)&quot; scp sftp ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Highlighted grep:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias grep=&quot;grep --color=auto&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://grab.by/grabs/dd26dd993c74f8dd076e2f911a8e4ec6.png&quot; alt=&quot;highlighted grep&quot;&gt;&lt;/p&gt;

&lt;p&gt;Automagically dump your public ssh key to a host for future passwordless auth: (can probably easily tweaked to add said host to ~/.ssh/config)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-setup() { cat ~/.ssh/id_rsa.pub | ssh $1 'cat - &amp;gt;&amp;gt; ~/.ssh/authorized_keys'; }
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;More OSX specific stuff that I've setup forces the machine to take a picture with the built-in iSight every time the machine's lid is open and dumps that image in a directory.&lt;br&gt;
Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bernhard-baehr.de/&quot; rel=&quot;nofollow&quot;&gt;SleepWatcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.intergalactic.de/pages/iSight.html&quot; rel=&quot;nofollow&quot;&gt;iSightCapture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a directory somewhere to hold all your images.
Dump this into ~/.wakeup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date=$(date +%y%m%d_%H_%M_%S).jpg;
/PATH/TO/isightcapture -w 640 -h 480 -n 3 -d -t jpg /PATH/TO/PICTURE/DUMP/$date &amp;gt; /dev/null
unset date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've been capping a frame every time my MacBook wakes up for the past 3 1/2 years now, it's interesting to see everything compiled into a long video at a high framerate.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;Ok, definitely not mac specific, but TAB completion in &lt;code&gt;zsh&lt;/code&gt;  is so good I  think it deserves a specific mention.&lt;/p&gt;

&lt;p&gt;You get completion of options, e.g. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -d[TAB]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will give you &lt;code&gt;-daystart&lt;/code&gt;  &lt;code&gt;-delete&lt;/code&gt; &lt;code&gt;-depth&lt;/code&gt; as possible completions.&lt;/p&gt;

&lt;p&gt;Also path completion is improved over Bash completion, for example, I have a Volume called Wubly, and inside that &lt;code&gt;video/tv/comedy&lt;/code&gt;, so typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /v/w/v/t/co[TAB] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will expand to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /Volumes/Wubly/Video/TV/Comedy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(note that it's also case insensitive.)&lt;/p&gt;

&lt;p&gt;If there are multiple paths that match this pattern, they will be shown.&lt;/p&gt;

&lt;p&gt;Completion is also interactive, so you can move around the available choices with the cursor controls.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;&lt;strong&gt;Send Audio to a Apple Tv/Airplay device via the  /usr/bin/say command&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -r160 -a &quot;AirPlay&quot; &quot;hello world&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-r160&lt;/strong&gt; is  Speech rate to be used, in words per minute&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-a&lt;/strong&gt;  followed by device &lt;em&gt;name&lt;/em&gt; or &lt;em&gt;number&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then your text.&lt;/p&gt;

&lt;p&gt;To list your available audio device&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -a?
   39 AirPlay
   47 Built-in Output
  209 Soundflower (2ch)
   74 Soundflower (64ch)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the numbers will work just as well in place of the device name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -r160 -a 39 &quot;Hover over a Method&quot;;say -r160 -a &quot;Built-in Output&quot; &quot;I am back&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the -f option to use a text file as your speech text.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/bin/say -f ~/Music/foo.txt -r160 -a 39 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you will notice say can expand tilde file paths&lt;/p&gt;



&lt;p&gt;With say you can do a lot more like save speech text directly to audio file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/bin/say  -o ~/Music/hi.aac Hello, World.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-o&lt;/strong&gt; oupt file path.  i.e  ~/Music/hi &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.aac&lt;/strong&gt;  file format&lt;/p&gt;

&lt;p&gt;This saves a &lt;strong&gt;.acc&lt;/strong&gt; file named hi.aac to the Music Directory.&lt;/p&gt;

&lt;p&gt;Directory paths MUST exist before the command is run. The file does not need to exist first in the directory and if it does it will most likely be overwritten.&lt;/p&gt;

&lt;p&gt;There are other formats you can use.&lt;/p&gt;

&lt;p&gt;The man page &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/say.1.html&quot; rel=&quot;nofollow&quot;&gt;say&lt;/a&gt; will show you the full list of the options.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;

        &lt;p&gt;One tip or trick per answer.&lt;/p&gt;

&lt;p&gt;My favorite is &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opens the folder you're currently browsing in Finder. You can also pass URLs, images, documents or else to &lt;code&gt;open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you specify a program name with -a you can pass the URL, image, document or folder to that program instead, e.g. &lt;code&gt;open -a Preview image.png&lt;/code&gt;, overriding the default program set for the filetype.&lt;/p&gt;

&lt;p&gt;Please don't post duplicates. Search in the question like this: &lt;code&gt;inquestion:this ls -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mac OS X specific&lt;/strong&gt; answers only.&lt;/p&gt;

    &lt;/div&gt;
    
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;None of these are exactly OSX specific, but here's some stuff from my .bash_profile that I find useful:&lt;/p&gt;

&lt;p&gt;Colored Prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS1=&quot;\[\e[0;31m\][\[\e[1;31m\]\u\[\e[0;34m\]@\h \[\e[32m\]\w\[\e[0;31m]\]\$\[\e[0m\] &quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://grab.by/grabs/c2c7cdff8e49dd764d326620df762665.png&quot; alt=&quot;example&quot;&gt;&lt;/p&gt;

&lt;p&gt;SSH tab completion of hosts that exist in ~/.ssh/config:  (found on &lt;a href=&quot;http://www.macosxhints.com/article.php?story=20100113142633883&quot; rel=&quot;nofollow&quot;&gt;MacOSXHints&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;complete -o default -o nospace -W &quot;$(/usr/bin/env ruby -ne 'puts $_.split(/[,\s]+/)[1..-1].reject{|host| host.match(/\*|\?/)} if $_.match(/^\s*Host\s+/);' &amp;lt; $HOME/.ssh/config)&quot; scp sftp ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Highlighted grep:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias grep=&quot;grep --color=auto&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://grab.by/grabs/dd26dd993c74f8dd076e2f911a8e4ec6.png&quot; alt=&quot;highlighted grep&quot;&gt;&lt;/p&gt;

&lt;p&gt;Automagically dump your public ssh key to a host for future passwordless auth: (can probably easily tweaked to add said host to ~/.ssh/config)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-setup() { cat ~/.ssh/id_rsa.pub | ssh $1 'cat - &amp;gt;&amp;gt; ~/.ssh/authorized_keys'; }
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;More OSX specific stuff that I've setup forces the machine to take a picture with the built-in iSight every time the machine's lid is open and dumps that image in a directory.&lt;br&gt;
Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bernhard-baehr.de/&quot; rel=&quot;nofollow&quot;&gt;SleepWatcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.intergalactic.de/pages/iSight.html&quot; rel=&quot;nofollow&quot;&gt;iSightCapture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a directory somewhere to hold all your images.
Dump this into ~/.wakeup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date=$(date +%y%m%d_%H_%M_%S).jpg;
/PATH/TO/isightcapture -w 640 -h 480 -n 3 -d -t jpg /PATH/TO/PICTURE/DUMP/$date &amp;gt; /dev/null
unset date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've been capping a frame every time my MacBook wakes up for the past 3 1/2 years now, it's interesting to see everything compiled into a long video at a high framerate.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;Ok, definitely not mac specific, but TAB completion in &lt;code&gt;zsh&lt;/code&gt;  is so good I  think it deserves a specific mention.&lt;/p&gt;

&lt;p&gt;You get completion of options, e.g. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -d[TAB]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will give you &lt;code&gt;-daystart&lt;/code&gt;  &lt;code&gt;-delete&lt;/code&gt; &lt;code&gt;-depth&lt;/code&gt; as possible completions.&lt;/p&gt;

&lt;p&gt;Also path completion is improved over Bash completion, for example, I have a Volume called Wubly, and inside that &lt;code&gt;video/tv/comedy&lt;/code&gt;, so typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /v/w/v/t/co[TAB] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will expand to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /Volumes/Wubly/Video/TV/Comedy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(note that it's also case insensitive.)&lt;/p&gt;

&lt;p&gt;If there are multiple paths that match this pattern, they will be shown.&lt;/p&gt;

&lt;p&gt;Completion is also interactive, so you can move around the available choices with the cursor controls.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;&lt;strong&gt;Send Audio to a Apple Tv/Airplay device via the  /usr/bin/say command&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -r160 -a &quot;AirPlay&quot; &quot;hello world&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-r160&lt;/strong&gt; is  Speech rate to be used, in words per minute&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-a&lt;/strong&gt;  followed by device &lt;em&gt;name&lt;/em&gt; or &lt;em&gt;number&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then your text.&lt;/p&gt;

&lt;p&gt;To list your available audio device&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -a?
   39 AirPlay
   47 Built-in Output
  209 Soundflower (2ch)
   74 Soundflower (64ch)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the numbers will work just as well in place of the device name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -r160 -a 39 &quot;Hover over a Method&quot;;say -r160 -a &quot;Built-in Output&quot; &quot;I am back&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the -f option to use a text file as your speech text.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/bin/say -f ~/Music/foo.txt -r160 -a 39 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you will notice say can expand tilde file paths&lt;/p&gt;



&lt;p&gt;With say you can do a lot more like save speech text directly to audio file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/bin/say  -o ~/Music/hi.aac Hello, World.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-o&lt;/strong&gt; oupt file path.  i.e  ~/Music/hi &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.aac&lt;/strong&gt;  file format&lt;/p&gt;

&lt;p&gt;This saves a &lt;strong&gt;.acc&lt;/strong&gt; file named hi.aac to the Music Directory.&lt;/p&gt;

&lt;p&gt;Directory paths MUST exist before the command is run. The file does not need to exist first in the directory and if it does it will most likely be overwritten.&lt;/p&gt;

&lt;p&gt;There are other formats you can use.&lt;/p&gt;

&lt;p&gt;The man page &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/say.1.html&quot; rel=&quot;nofollow&quot;&gt;say&lt;/a&gt; will show you the full list of the options.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;

        &lt;p&gt;One tip or trick per answer.&lt;/p&gt;

&lt;p&gt;My favorite is &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opens the folder you're currently browsing in Finder. You can also pass URLs, images, documents or else to &lt;code&gt;open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you specify a program name with -a you can pass the URL, image, document or folder to that program instead, e.g. &lt;code&gt;open -a Preview image.png&lt;/code&gt;, overriding the default program set for the filetype.&lt;/p&gt;

&lt;p&gt;Please don't post duplicates. Search in the question like this: &lt;code&gt;inquestion:this ls -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mac OS X specific&lt;/strong&gt; answers only.&lt;/p&gt;

    &lt;/div&gt;
    
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;None of these are exactly OSX specific, but here's some stuff from my .bash_profile that I find useful:&lt;/p&gt;

&lt;p&gt;Colored Prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS1=&quot;\[\e[0;31m\][\[\e[1;31m\]\u\[\e[0;34m\]@\h \[\e[32m\]\w\[\e[0;31m]\]\$\[\e[0m\] &quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://grab.by/grabs/c2c7cdff8e49dd764d326620df762665.png&quot; alt=&quot;example&quot;&gt;&lt;/p&gt;

&lt;p&gt;SSH tab completion of hosts that exist in ~/.ssh/config:  (found on &lt;a href=&quot;http://www.macosxhints.com/article.php?story=20100113142633883&quot; rel=&quot;nofollow&quot;&gt;MacOSXHints&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;complete -o default -o nospace -W &quot;$(/usr/bin/env ruby -ne 'puts $_.split(/[,\s]+/)[1..-1].reject{|host| host.match(/\*|\?/)} if $_.match(/^\s*Host\s+/);' &amp;lt; $HOME/.ssh/config)&quot; scp sftp ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Highlighted grep:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias grep=&quot;grep --color=auto&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://grab.by/grabs/dd26dd993c74f8dd076e2f911a8e4ec6.png&quot; alt=&quot;highlighted grep&quot;&gt;&lt;/p&gt;

&lt;p&gt;Automagically dump your public ssh key to a host for future passwordless auth: (can probably easily tweaked to add said host to ~/.ssh/config)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-setup() { cat ~/.ssh/id_rsa.pub | ssh $1 'cat - &amp;gt;&amp;gt; ~/.ssh/authorized_keys'; }
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;More OSX specific stuff that I've setup forces the machine to take a picture with the built-in iSight every time the machine's lid is open and dumps that image in a directory.&lt;br&gt;
Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bernhard-baehr.de/&quot; rel=&quot;nofollow&quot;&gt;SleepWatcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.intergalactic.de/pages/iSight.html&quot; rel=&quot;nofollow&quot;&gt;iSightCapture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a directory somewhere to hold all your images.
Dump this into ~/.wakeup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date=$(date +%y%m%d_%H_%M_%S).jpg;
/PATH/TO/isightcapture -w 640 -h 480 -n 3 -d -t jpg /PATH/TO/PICTURE/DUMP/$date &amp;gt; /dev/null
unset date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've been capping a frame every time my MacBook wakes up for the past 3 1/2 years now, it's interesting to see everything compiled into a long video at a high framerate.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;Ok, definitely not mac specific, but TAB completion in &lt;code&gt;zsh&lt;/code&gt;  is so good I  think it deserves a specific mention.&lt;/p&gt;

&lt;p&gt;You get completion of options, e.g. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -d[TAB]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will give you &lt;code&gt;-daystart&lt;/code&gt;  &lt;code&gt;-delete&lt;/code&gt; &lt;code&gt;-depth&lt;/code&gt; as possible completions.&lt;/p&gt;

&lt;p&gt;Also path completion is improved over Bash completion, for example, I have a Volume called Wubly, and inside that &lt;code&gt;video/tv/comedy&lt;/code&gt;, so typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /v/w/v/t/co[TAB] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will expand to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /Volumes/Wubly/Video/TV/Comedy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(note that it's also case insensitive.)&lt;/p&gt;

&lt;p&gt;If there are multiple paths that match this pattern, they will be shown.&lt;/p&gt;

&lt;p&gt;Completion is also interactive, so you can move around the available choices with the cursor controls.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;&lt;p&gt;&lt;strong&gt;Send Audio to a Apple Tv/Airplay device via the  /usr/bin/say command&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -r160 -a &quot;AirPlay&quot; &quot;hello world&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-r160&lt;/strong&gt; is  Speech rate to be used, in words per minute&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-a&lt;/strong&gt;  followed by device &lt;em&gt;name&lt;/em&gt; or &lt;em&gt;number&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then your text.&lt;/p&gt;

&lt;p&gt;To list your available audio device&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -a?
   39 AirPlay
   47 Built-in Output
  209 Soundflower (2ch)
   74 Soundflower (64ch)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the numbers will work just as well in place of the device name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/say -r160 -a 39 &quot;Hover over a Method&quot;;say -r160 -a &quot;Built-in Output&quot; &quot;I am back&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the -f option to use a text file as your speech text.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/bin/say -f ~/Music/foo.txt -r160 -a 39 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you will notice say can expand tilde file paths&lt;/p&gt;



&lt;p&gt;With say you can do a lot more like save speech text directly to audio file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /usr/bin/say  -o ~/Music/hi.aac Hello, World.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-o&lt;/strong&gt; oupt file path.  i.e  ~/Music/hi &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.aac&lt;/strong&gt;  file format&lt;/p&gt;

&lt;p&gt;This saves a &lt;strong&gt;.acc&lt;/strong&gt; file named hi.aac to the Music Directory.&lt;/p&gt;

&lt;p&gt;Directory paths MUST exist before the command is run. The file does not need to exist first in the directory and if it does it will most likely be overwritten.&lt;/p&gt;

&lt;p&gt;There are other formats you can use.&lt;/p&gt;

&lt;p&gt;The man page &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/say.1.html&quot; rel=&quot;nofollow&quot;&gt;say&lt;/a&gt; will show you the full list of the options.&lt;/p&gt;
&lt;/div&gt;
    &lt;/div&gt;&lt;hr class=&quot;rdb-page-break&quot; /&gt;&lt;div&gt;&lt;div class=&quot;post-text&quot;&gt;

        &lt;p&gt;One tip or trick per answer.&lt;/p&gt;

&lt;p&gt;My favorite is &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opens the folder you're currently browsing in Finder. You can also pass URLs, images, documents or else to &lt;code&gt;open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you specify a program name with -a you can pass the URL, image, document or folder to that program instead, e.g. &lt;code&gt;open -a Preview image.png&lt;/code&gt;, overriding the default program set for the filetype.&lt;/p&gt;

&lt;p&gt;Please don't post duplicates. Search in the question like this: &lt;code&gt;inquestion:this ls -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mac OS X specific&lt;/strong&gt; answers only.&lt;/p&gt;

    &lt;/div&gt;
    
    &lt;/div&gt;
</description>
<title>
Tips for Terminal in Mac OS X
</title>
</item>
</channel>
</rss>
